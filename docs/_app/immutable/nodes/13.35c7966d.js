import{S as ya,i as Pa,s as wa,m as Ts,o as ha,p as Aa,q as da,r as xa,u as ra,v as Ha,w as ba,x as Ca,y as ka,e as p,t as k,a as i,c as e,b as l,d as f,f as a,g as r,z as _,h as t,j as o,n as La}from"../chunks/index.e82b0ad9.js";import{A as Ma}from"../chunks/ArticleLayout.23d17524.js";function $a($){let c,E,y,v,u,m,P,j,ms,W,w,D,Es,Y,F,ys,Z,R,Ps,g,h,T,ws,ss,N,hs,as,A,q,As,ns,G,ds,ts,d,O,xs,ps,S,Hs,es,x,_a=`<code class="language-java"><span class="token class-name">LocalPort</span> port <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    port<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PortDeviceFailure</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reportPortError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Device error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GMXError</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reportError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"GMX error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reportError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Response error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ls,H,va=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalPort</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">ACMEPort</span> innerPort<span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token keyword">int</span> portNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		innerPort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ACMEPort</span><span class="token punctuation">(</span>portNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ATM1212UnlockedExcpetion</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,os,X,bs,cs,b,z,Cs,us,U,Ls,is,C,B,Ms,rs,I,$s,ks,L,J,js,fs,K,Ds,_s,M,Q,Fs,vs,V,Rs;return{c(){c=p("p"),E=k("깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),y=i(),v=p("h3"),u=p("a"),m=k("오류 코드보다 예외를 사용하라"),P=i(),j=p("p"),ms=k("과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),W=i(),w=p("h3"),D=p("a"),Es=k("Try-Catch-Finally 문부터 작성하라"),Y=i(),F=p("p"),ys=k("예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),Z=i(),R=p("p"),Ps=k("강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),g=i(),h=p("h3"),T=p("a"),ws=k("미확인 예외를 사용하라"),ss=i(),N=p("p"),hs=k("확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),as=i(),A=p("h3"),q=p("a"),As=k("예외에 의미를 제공하라"),ns=i(),G=p("p"),ds=k("예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),ts=i(),d=p("h3"),O=p("a"),xs=k("호출자를 고려해 예외 클래스를 정의하라"),ps=i(),S=p("p"),Hs=k("오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),es=i(),x=p("pre"),ls=i(),H=p("pre"),os=i(),X=p("p"),bs=k("위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),cs=i(),b=p("h3"),z=p("a"),Cs=k("정상 흐름을 정의하라"),us=i(),U=p("p"),Ls=k("앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다. 특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다."),is=i(),C=p("h3"),B=p("a"),Ms=k("null을 반환하지 마라"),rs=i(),I=p("p"),$s=k("null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),ks=i(),L=p("h3"),J=p("a"),js=k("null을 전달하지 마라"),fs=i(),K=p("p"),Ds=k("NullpointException을 야기하는 코드는 만들지 말자"),_s=i(),M=p("h3"),Q=p("a"),Fs=k("결론"),vs=i(),V=p("p"),Rs=k("깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),this.h()},l(s){c=e(s,"P",{});var n=l(c);E=f(n,"깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),n.forEach(a),y=r(s),v=e(s,"H3",{id:!0});var Ns=l(v);u=e(Ns,"A",{href:!0});var qs=l(u);m=f(qs,"오류 코드보다 예외를 사용하라"),qs.forEach(a),Ns.forEach(a),P=r(s),j=e(s,"P",{});var Gs=l(j);ms=f(Gs,"과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),Gs.forEach(a),W=r(s),w=e(s,"H3",{id:!0});var Os=l(w);D=e(Os,"A",{href:!0});var Ss=l(D);Es=f(Ss,"Try-Catch-Finally 문부터 작성하라"),Ss.forEach(a),Os.forEach(a),Y=r(s),F=e(s,"P",{});var Xs=l(F);ys=f(Xs,"예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),Xs.forEach(a),Z=r(s),R=e(s,"P",{});var zs=l(R);Ps=f(zs,"강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),zs.forEach(a),g=r(s),h=e(s,"H3",{id:!0});var Us=l(h);T=e(Us,"A",{href:!0});var Bs=l(T);ws=f(Bs,"미확인 예외를 사용하라"),Bs.forEach(a),Us.forEach(a),ss=r(s),N=e(s,"P",{});var Is=l(N);hs=f(Is,"확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),Is.forEach(a),as=r(s),A=e(s,"H3",{id:!0});var Js=l(A);q=e(Js,"A",{href:!0});var Ks=l(q);As=f(Ks,"예외에 의미를 제공하라"),Ks.forEach(a),Js.forEach(a),ns=r(s),G=e(s,"P",{});var Qs=l(G);ds=f(Qs,"예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),Qs.forEach(a),ts=r(s),d=e(s,"H3",{id:!0});var Vs=l(d);O=e(Vs,"A",{href:!0});var Ws=l(O);xs=f(Ws,"호출자를 고려해 예외 클래스를 정의하라"),Ws.forEach(a),Vs.forEach(a),ps=r(s),S=e(s,"P",{});var Ys=l(S);Hs=f(Ys,"오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),Ys.forEach(a),es=r(s),x=e(s,"PRE",{class:!0});var ma=l(x);ma.forEach(a),ls=r(s),H=e(s,"PRE",{class:!0});var Ea=l(H);Ea.forEach(a),os=r(s),X=e(s,"P",{});var Zs=l(X);bs=f(Zs,"위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),Zs.forEach(a),cs=r(s),b=e(s,"H3",{id:!0});var gs=l(b);z=e(gs,"A",{href:!0});var sa=l(z);Cs=f(sa,"정상 흐름을 정의하라"),sa.forEach(a),gs.forEach(a),us=r(s),U=e(s,"P",{});var aa=l(U);Ls=f(aa,"앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다. 특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다."),aa.forEach(a),is=r(s),C=e(s,"H3",{id:!0});var na=l(C);B=e(na,"A",{href:!0});var ta=l(B);Ms=f(ta,"null을 반환하지 마라"),ta.forEach(a),na.forEach(a),rs=r(s),I=e(s,"P",{});var pa=l(I);$s=f(pa,"null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),pa.forEach(a),ks=r(s),L=e(s,"H3",{id:!0});var ea=l(L);J=e(ea,"A",{href:!0});var la=l(J);js=f(la,"null을 전달하지 마라"),la.forEach(a),ea.forEach(a),fs=r(s),K=e(s,"P",{});var oa=l(K);Ds=f(oa,"NullpointException을 야기하는 코드는 만들지 말자"),oa.forEach(a),_s=r(s),M=e(s,"H3",{id:!0});var ca=l(M);Q=e(ca,"A",{href:!0});var ua=l(Q);Fs=f(ua,"결론"),ua.forEach(a),ca.forEach(a),vs=r(s),V=e(s,"P",{});var ia=l(V);Rs=f(ia,"깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),ia.forEach(a),this.h()},h(){_(u,"href","#오류-코드보다-예외를-사용하라"),_(v,"id","오류-코드보다-예외를-사용하라"),_(D,"href","#try-catch-finally-문부터-작성하라"),_(w,"id","try-catch-finally-문부터-작성하라"),_(T,"href","#미확인-예외를-사용하라"),_(h,"id","미확인-예외를-사용하라"),_(q,"href","#예외에-의미를-제공하라"),_(A,"id","예외에-의미를-제공하라"),_(O,"href","#호출자를-고려해-예외-클래스를-정의하라"),_(d,"id","호출자를-고려해-예외-클래스를-정의하라"),_(x,"class","language-java"),_(H,"class","language-java"),_(z,"href","#정상-흐름을-정의하라"),_(b,"id","정상-흐름을-정의하라"),_(B,"href","#null을-반환하지-마라"),_(C,"id","null을-반환하지-마라"),_(J,"href","#null을-전달하지-마라"),_(L,"id","null을-전달하지-마라"),_(Q,"href","#결론"),_(M,"id","결론")},m(s,n){t(s,c,n),o(c,E),t(s,y,n),t(s,v,n),o(v,u),o(u,m),t(s,P,n),t(s,j,n),o(j,ms),t(s,W,n),t(s,w,n),o(w,D),o(D,Es),t(s,Y,n),t(s,F,n),o(F,ys),t(s,Z,n),t(s,R,n),o(R,Ps),t(s,g,n),t(s,h,n),o(h,T),o(T,ws),t(s,ss,n),t(s,N,n),o(N,hs),t(s,as,n),t(s,A,n),o(A,q),o(q,As),t(s,ns,n),t(s,G,n),o(G,ds),t(s,ts,n),t(s,d,n),o(d,O),o(O,xs),t(s,ps,n),t(s,S,n),o(S,Hs),t(s,es,n),t(s,x,n),x.innerHTML=_a,t(s,ls,n),t(s,H,n),H.innerHTML=va,t(s,os,n),t(s,X,n),o(X,bs),t(s,cs,n),t(s,b,n),o(b,z),o(z,Cs),t(s,us,n),t(s,U,n),o(U,Ls),t(s,is,n),t(s,C,n),o(C,B),o(B,Ms),t(s,rs,n),t(s,I,n),o(I,$s),t(s,ks,n),t(s,L,n),o(L,J),o(J,js),t(s,fs,n),t(s,K,n),o(K,Ds),t(s,_s,n),t(s,M,n),o(M,Q),o(Q,Fs),t(s,vs,n),t(s,V,n),o(V,Rs)},p:La,d(s){s&&a(c),s&&a(y),s&&a(v),s&&a(P),s&&a(j),s&&a(W),s&&a(w),s&&a(Y),s&&a(F),s&&a(Z),s&&a(R),s&&a(g),s&&a(h),s&&a(ss),s&&a(N),s&&a(as),s&&a(A),s&&a(ns),s&&a(G),s&&a(ts),s&&a(d),s&&a(ps),s&&a(S),s&&a(es),s&&a(x),s&&a(ls),s&&a(H),s&&a(os),s&&a(X),s&&a(cs),s&&a(b),s&&a(us),s&&a(U),s&&a(is),s&&a(C),s&&a(rs),s&&a(I),s&&a(ks),s&&a(L),s&&a(fs),s&&a(K),s&&a(_s),s&&a(M),s&&a(vs),s&&a(V)}}}function ja($){let c,E;const y=[$[0],fa];let v={$$slots:{default:[$a]},$$scope:{ctx:$}};for(let u=0;u<y.length;u+=1)v=Ts(v,y[u]);return c=new Ma({props:v}),{c(){ha(c.$$.fragment)},l(u){Aa(c.$$.fragment,u)},m(u,m){da(c,u,m),E=!0},p(u,[m]){const P=m&1?xa(y,[m&1&&ra(u[0]),m&0&&ra(fa)]):{};m&2&&(P.$$scope={dirty:m,ctx:u}),c.$set(P)},i(u){E||(Ha(c.$$.fragment,u),E=!0)},o(u){ba(c.$$.fragment,u),E=!1},d(u){Ca(c,u)}}}const fa={title:"7장 오류처리",summary:"",date:"2024-01-25",published:!1};function Da($,c,E){return $.$$set=y=>{E(0,c=Ts(Ts({},c),ka(y)))},c=ka(c),[c]}class Ta extends ya{constructor(c){super(),Pa(this,c,Da,ja,wa,{})}}export{Ta as component};
