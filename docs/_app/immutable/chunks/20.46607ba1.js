import{S as vt,i as Et,s as dt,U as ua,B as ht,C as wt,D as Pt,V as Tt,W as pt,r as yt,p as bt,E as Ot,X as et,e,t as c,a as i,c as o,b as l,d as u,f as s,g as k,m as r,h as p,j as a,n as Lt}from"./index.c0b9c16e.js";import{A as Rt}from"./ArticleLayout.072337d2.js";function St(N){let f,d,h,v,_,E,O,w,vn,us,is,En,ks,rs,dn,fs,gn,X,_s,In,L,$,ms,Dn,T,vs,hn,Es,ds,Hn,R,F,hs,Cn,y,ws,wn,Ps,Ts,Mn,S,B,ys,qn,U,bs,xn,A,ot=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
            <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSymbolicLinksAreNotInXmlPageHierarchy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">WikiPage</span> page <span class="token operator">=</span> <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">addLinkTo</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">,</span> <span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
            <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertResponseDoesNotContain</span><span class="token punctuation">(</span><span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetDataAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">makePageWithContent</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"test page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"type:data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertResponseContains</span><span class="token punctuation">(</span><span class="token string">"test page"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,jn,g,W,Os,Yn,V,Ls,Gn,I,K,Rs,Nn,z,Ss,Xn,D,lt=`<code class="language-java">
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreashold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    hw<span class="token punctuation">.</span><span class="token function">setTemp</span><span class="token punctuation">(</span><span class="token constant">WAY_TOO_COLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    controller<span class="token punctuation">.</span><span class="token function">tic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">heaterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">blowerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">coolerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">hiTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">loTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,$n,H,ct=`<code class="language-java">
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">wayTooCold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"HBchL"</span><span class="token punctuation">,</span> hw<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Fn,C,J,As,Bn,M,ut=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">thenResponseShouldBeXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyHasRightTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">thenResponseShouldContain</span><span class="token punctuation">(</span>
            <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Un,Q,gs,Wn,q,Z,Is,Vn,x,it=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">SerialDate</span> d1 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SerialDate</span> d2 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SerialDate</span> d3 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SerialDate</span> d4 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Kn,j,nn,Ds,zn,sn,Hs,Jn,b,Pn,Cs,Ms,Tn,qs,Qn,an,xs,Zn,tn,yn,js,ns,pn,Ys,ss,Y,en,bn,Gs,as,on,Ns,ts,m,ln,On,Xs,$s,Fs,cn,Ln,Bs,Us,Ws,un,Rn,Vs,Ks,zs,kn,Sn,Js,Qs,Zs,rn,An,na,sa,ps,G,fn,aa,es,_n,ta;return{c(){f=e("p"),d=c("코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),h=i(),v=e("h3"),_=e("a"),E=c("The Three Laws of TDD"),O=i(),w=e("ol"),vn=e("li"),us=c("실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),is=i(),En=e("li"),ks=c("컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),rs=i(),dn=e("li"),fs=c("현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),gn=i(),X=e("p"),_s=c("위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),In=i(),L=e("h3"),$=e("a"),ms=c("깨끗한 테스트 코드 유지하기"),Dn=i(),T=e("p"),vs=c(`테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것.
테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다.
`),hn=e("strong"),Es=c("코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),ds=c(`
테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다.
테스트가 지저분하면 실제 코드도 망가진다`),Hn=i(),R=e("h3"),F=e("a"),hs=c("깨끗한 테스트 코드"),Cn=i(),y=e("p"),ws=c("깨끗한 코드를 만드려면 "),wn=e("strong"),Ps=c("가독성"),Ts=c(" 이 필요하다"),Mn=i(),S=e("h4"),B=e("a"),ys=c("BUILD-OPERATE-CHECK 패턴"),qn=i(),U=e("p"),bs=c("테스트 자료 만들기, 자료 조작, 결과 확인의 세단계로 나누자"),xn=i(),A=e("pre"),jn=i(),g=e("h3"),W=e("a"),Os=c("도메인에 특화된 테스트 언어"),Yn=i(),V=e("p"),Ls=c("시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),Gn=i(),I=e("h3"),K=e("a"),Rs=c("이중 표준"),Nn=i(),z=e("p"),Ss=c("테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),Xn=i(),D=e("pre"),$n=i(),H=e("pre"),Fn=i(),C=e("h3"),J=e("a"),As=c("테스트 당 assert 하나"),Bn=i(),M=e("pre"),Un=i(),Q=e("p"),gs=c("위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다. 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),Wn=i(),q=e("h3"),Z=e("a"),Is=c("테스트당 개념 하나"),Vn=i(),x=e("pre"),Kn=i(),j=e("h4"),nn=e("a"),Ds=c("위 테스트가 내포하는 의미"),zn=i(),sn=e("p"),Hs=c("(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),Jn=i(),b=e("ul"),Pn=e("li"),Cs=c("(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),Ms=i(),Tn=e("li"),qs=c("두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),Qn=i(),an=e("p"),xs=c("(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),Zn=i(),tn=e("ul"),yn=e("li"),js=c("31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),ns=i(),pn=e("p"),Ys=c("이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),ss=i(),Y=e("h3"),en=e("a"),bn=e("strong"),Gs=c("F.I.R.S.T"),as=i(),on=e("p"),Ns=c("테스트는 아래 5가지 요소를 충족해야 한다"),ts=i(),m=e("ol"),ln=e("li"),On=e("strong"),Xs=c("빠르게(Fast)"),$s=c(" 테스트는 빨라야 한다. 느리면 자주 돌리지 않게 된다. 느린 테스트는 개발자들의 생산성을 떨어뜨린다."),Fs=i(),cn=e("li"),Ln=e("strong"),Bs=c("독립적으로(Independent)"),Us=c(" 테스트간 의존관계가 있으면 안된다 테스트가 서로 의존하면 한 테스트가 실패하면 다른 테스트도 실패하게 된다."),Ws=i(),un=e("li"),Rn=e("strong"),Vs=c("반복가능하게(Repeatable)"),Ks=c(" 환경에 구애받지 않는 테스트를 작성하자 환경에 따라 테스트가 실패하면 안된다"),zs=i(),kn=e("li"),Sn=e("strong"),Js=c("자가검증하는(Self-Validating)"),Qs=c(" 테스트가 스스로 bool로 결론나야 한다 테스트가 성공하면 테스트가 실패하면 테스트가 실패하게 만든 문제를 찾아야 한다."),Zs=i(),rn=e("li"),An=e("strong"),na=c("적시에(Timely)"),sa=c(": 테스트 코드를 만들고 운영코드를 작성하라."),ps=i(),G=e("h3"),fn=e("a"),aa=c("결론"),es=i(),_n=e("p"),ta=c("깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다. 지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),this.h()},l(n){f=o(n,"P",{});var t=l(f);d=u(t,"코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),t.forEach(s),h=k(n),v=o(n,"H3",{id:!0});var ka=l(v);_=o(ka,"A",{href:!0});var ra=l(_);E=u(ra,"The Three Laws of TDD"),ra.forEach(s),ka.forEach(s),O=k(n),w=o(n,"OL",{});var mn=l(w);vn=o(mn,"LI",{});var fa=l(vn);us=u(fa,"실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),fa.forEach(s),is=k(mn),En=o(mn,"LI",{});var _a=l(En);ks=u(_a,"컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),_a.forEach(s),rs=k(mn),dn=o(mn,"LI",{});var ma=l(dn);fs=u(ma,"현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),ma.forEach(s),mn.forEach(s),gn=k(n),X=o(n,"P",{});var va=l(X);_s=u(va,"위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),va.forEach(s),In=k(n),L=o(n,"H3",{id:!0});var Ea=l(L);$=o(Ea,"A",{href:!0});var da=l($);ms=u(da,"깨끗한 테스트 코드 유지하기"),da.forEach(s),Ea.forEach(s),Dn=k(n),T=o(n,"P",{});var os=l(T);vs=u(os,`테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것.
테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다.
`),hn=o(os,"STRONG",{});var ha=l(hn);Es=u(ha,"코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),ha.forEach(s),ds=u(os,`
테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다.
테스트가 지저분하면 실제 코드도 망가진다`),os.forEach(s),Hn=k(n),R=o(n,"H3",{id:!0});var wa=l(R);F=o(wa,"A",{href:!0});var Pa=l(F);hs=u(Pa,"깨끗한 테스트 코드"),Pa.forEach(s),wa.forEach(s),Cn=k(n),y=o(n,"P",{});var ls=l(y);ws=u(ls,"깨끗한 코드를 만드려면 "),wn=o(ls,"STRONG",{});var Ta=l(wn);Ps=u(Ta,"가독성"),Ta.forEach(s),Ts=u(ls," 이 필요하다"),ls.forEach(s),Mn=k(n),S=o(n,"H4",{id:!0});var ya=l(S);B=o(ya,"A",{href:!0});var ba=l(B);ys=u(ba,"BUILD-OPERATE-CHECK 패턴"),ba.forEach(s),ya.forEach(s),qn=k(n),U=o(n,"P",{});var Oa=l(U);bs=u(Oa,"테스트 자료 만들기, 자료 조작, 결과 확인의 세단계로 나누자"),Oa.forEach(s),xn=k(n),A=o(n,"PRE",{class:!0});var kt=l(A);kt.forEach(s),jn=k(n),g=o(n,"H3",{id:!0});var La=l(g);W=o(La,"A",{href:!0});var Ra=l(W);Os=u(Ra,"도메인에 특화된 테스트 언어"),Ra.forEach(s),La.forEach(s),Yn=k(n),V=o(n,"P",{});var Sa=l(V);Ls=u(Sa,"시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),Sa.forEach(s),Gn=k(n),I=o(n,"H3",{id:!0});var Aa=l(I);K=o(Aa,"A",{href:!0});var ga=l(K);Rs=u(ga,"이중 표준"),ga.forEach(s),Aa.forEach(s),Nn=k(n),z=o(n,"P",{});var Ia=l(z);Ss=u(Ia,"테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),Ia.forEach(s),Xn=k(n),D=o(n,"PRE",{class:!0});var rt=l(D);rt.forEach(s),$n=k(n),H=o(n,"PRE",{class:!0});var ft=l(H);ft.forEach(s),Fn=k(n),C=o(n,"H3",{id:!0});var Da=l(C);J=o(Da,"A",{href:!0});var Ha=l(J);As=u(Ha,"테스트 당 assert 하나"),Ha.forEach(s),Da.forEach(s),Bn=k(n),M=o(n,"PRE",{class:!0});var _t=l(M);_t.forEach(s),Un=k(n),Q=o(n,"P",{});var Ca=l(Q);gs=u(Ca,"위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다. 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),Ca.forEach(s),Wn=k(n),q=o(n,"H3",{id:!0});var Ma=l(q);Z=o(Ma,"A",{href:!0});var qa=l(Z);Is=u(qa,"테스트당 개념 하나"),qa.forEach(s),Ma.forEach(s),Vn=k(n),x=o(n,"PRE",{class:!0});var mt=l(x);mt.forEach(s),Kn=k(n),j=o(n,"H4",{id:!0});var xa=l(j);nn=o(xa,"A",{href:!0});var ja=l(nn);Ds=u(ja,"위 테스트가 내포하는 의미"),ja.forEach(s),xa.forEach(s),zn=k(n),sn=o(n,"P",{});var Ya=l(sn);Hs=u(Ya,"(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),Ya.forEach(s),Jn=k(n),b=o(n,"UL",{});var cs=l(b);Pn=o(cs,"LI",{});var Ga=l(Pn);Cs=u(Ga,"(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),Ga.forEach(s),Ms=k(cs),Tn=o(cs,"LI",{});var Na=l(Tn);qs=u(Na,"두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),Na.forEach(s),cs.forEach(s),Qn=k(n),an=o(n,"P",{});var Xa=l(an);xs=u(Xa,"(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),Xa.forEach(s),Zn=k(n),tn=o(n,"UL",{});var $a=l(tn);yn=o($a,"LI",{});var Fa=l(yn);js=u(Fa,"31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),Fa.forEach(s),$a.forEach(s),ns=k(n),pn=o(n,"P",{});var Ba=l(pn);Ys=u(Ba,"이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),Ba.forEach(s),ss=k(n),Y=o(n,"H3",{id:!0});var Ua=l(Y);en=o(Ua,"A",{href:!0});var Wa=l(en);bn=o(Wa,"STRONG",{});var Va=l(bn);Gs=u(Va,"F.I.R.S.T"),Va.forEach(s),Wa.forEach(s),Ua.forEach(s),as=k(n),on=o(n,"P",{});var Ka=l(on);Ns=u(Ka,"테스트는 아래 5가지 요소를 충족해야 한다"),Ka.forEach(s),ts=k(n),m=o(n,"OL",{});var P=l(m);ln=o(P,"LI",{});var pa=l(ln);On=o(pa,"STRONG",{});var za=l(On);Xs=u(za,"빠르게(Fast)"),za.forEach(s),$s=u(pa," 테스트는 빨라야 한다. 느리면 자주 돌리지 않게 된다. 느린 테스트는 개발자들의 생산성을 떨어뜨린다."),pa.forEach(s),Fs=k(P),cn=o(P,"LI",{});var ea=l(cn);Ln=o(ea,"STRONG",{});var Ja=l(Ln);Bs=u(Ja,"독립적으로(Independent)"),Ja.forEach(s),Us=u(ea," 테스트간 의존관계가 있으면 안된다 테스트가 서로 의존하면 한 테스트가 실패하면 다른 테스트도 실패하게 된다."),ea.forEach(s),Ws=k(P),un=o(P,"LI",{});var oa=l(un);Rn=o(oa,"STRONG",{});var Qa=l(Rn);Vs=u(Qa,"반복가능하게(Repeatable)"),Qa.forEach(s),Ks=u(oa," 환경에 구애받지 않는 테스트를 작성하자 환경에 따라 테스트가 실패하면 안된다"),oa.forEach(s),zs=k(P),kn=o(P,"LI",{});var la=l(kn);Sn=o(la,"STRONG",{});var Za=l(Sn);Js=u(Za,"자가검증하는(Self-Validating)"),Za.forEach(s),Qs=u(la," 테스트가 스스로 bool로 결론나야 한다 테스트가 성공하면 테스트가 실패하면 테스트가 실패하게 만든 문제를 찾아야 한다."),la.forEach(s),Zs=k(P),rn=o(P,"LI",{});var ca=l(rn);An=o(ca,"STRONG",{});var nt=l(An);na=u(nt,"적시에(Timely)"),nt.forEach(s),sa=u(ca,": 테스트 코드를 만들고 운영코드를 작성하라."),ca.forEach(s),P.forEach(s),ps=k(n),G=o(n,"H3",{id:!0});var st=l(G);fn=o(st,"A",{href:!0});var at=l(fn);aa=u(at,"결론"),at.forEach(s),st.forEach(s),es=k(n),_n=o(n,"P",{});var tt=l(_n);ta=u(tt,"깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다. 지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),tt.forEach(s),this.h()},h(){r(_,"href","#the-three-laws-of-tdd"),r(v,"id","the-three-laws-of-tdd"),r($,"href","#깨끗한-테스트-코드-유지하기"),r(L,"id","깨끗한-테스트-코드-유지하기"),r(F,"href","#깨끗한-테스트-코드"),r(R,"id","깨끗한-테스트-코드"),r(B,"href","#build-operate-check-패턴"),r(S,"id","build-operate-check-패턴"),r(A,"class","language-java"),r(W,"href","#도메인에-특화된-테스트-언어"),r(g,"id","도메인에-특화된-테스트-언어"),r(K,"href","#이중-표준"),r(I,"id","이중-표준"),r(D,"class","language-java"),r(H,"class","language-java"),r(J,"href","#테스트-당-assert-하나"),r(C,"id","테스트-당-assert-하나"),r(M,"class","language-java"),r(Z,"href","#테스트당-개념-하나"),r(q,"id","테스트당-개념-하나"),r(x,"class","language-java"),r(nn,"href","#위-테스트가-내포하는-의미"),r(j,"id","위-테스트가-내포하는-의미"),r(en,"href","#first"),r(Y,"id","first"),r(fn,"href","#결론"),r(G,"id","결론")},m(n,t){p(n,f,t),a(f,d),p(n,h,t),p(n,v,t),a(v,_),a(_,E),p(n,O,t),p(n,w,t),a(w,vn),a(vn,us),a(w,is),a(w,En),a(En,ks),a(w,rs),a(w,dn),a(dn,fs),p(n,gn,t),p(n,X,t),a(X,_s),p(n,In,t),p(n,L,t),a(L,$),a($,ms),p(n,Dn,t),p(n,T,t),a(T,vs),a(T,hn),a(hn,Es),a(T,ds),p(n,Hn,t),p(n,R,t),a(R,F),a(F,hs),p(n,Cn,t),p(n,y,t),a(y,ws),a(y,wn),a(wn,Ps),a(y,Ts),p(n,Mn,t),p(n,S,t),a(S,B),a(B,ys),p(n,qn,t),p(n,U,t),a(U,bs),p(n,xn,t),p(n,A,t),A.innerHTML=ot,p(n,jn,t),p(n,g,t),a(g,W),a(W,Os),p(n,Yn,t),p(n,V,t),a(V,Ls),p(n,Gn,t),p(n,I,t),a(I,K),a(K,Rs),p(n,Nn,t),p(n,z,t),a(z,Ss),p(n,Xn,t),p(n,D,t),D.innerHTML=lt,p(n,$n,t),p(n,H,t),H.innerHTML=ct,p(n,Fn,t),p(n,C,t),a(C,J),a(J,As),p(n,Bn,t),p(n,M,t),M.innerHTML=ut,p(n,Un,t),p(n,Q,t),a(Q,gs),p(n,Wn,t),p(n,q,t),a(q,Z),a(Z,Is),p(n,Vn,t),p(n,x,t),x.innerHTML=it,p(n,Kn,t),p(n,j,t),a(j,nn),a(nn,Ds),p(n,zn,t),p(n,sn,t),a(sn,Hs),p(n,Jn,t),p(n,b,t),a(b,Pn),a(Pn,Cs),a(b,Ms),a(b,Tn),a(Tn,qs),p(n,Qn,t),p(n,an,t),a(an,xs),p(n,Zn,t),p(n,tn,t),a(tn,yn),a(yn,js),p(n,ns,t),p(n,pn,t),a(pn,Ys),p(n,ss,t),p(n,Y,t),a(Y,en),a(en,bn),a(bn,Gs),p(n,as,t),p(n,on,t),a(on,Ns),p(n,ts,t),p(n,m,t),a(m,ln),a(ln,On),a(On,Xs),a(ln,$s),a(m,Fs),a(m,cn),a(cn,Ln),a(Ln,Bs),a(cn,Us),a(m,Ws),a(m,un),a(un,Rn),a(Rn,Vs),a(un,Ks),a(m,zs),a(m,kn),a(kn,Sn),a(Sn,Js),a(kn,Qs),a(m,Zs),a(m,rn),a(rn,An),a(An,na),a(rn,sa),p(n,ps,t),p(n,G,t),a(G,fn),a(fn,aa),p(n,es,t),p(n,_n,t),a(_n,ta)},p:Lt,d(n){n&&s(f),n&&s(h),n&&s(v),n&&s(O),n&&s(w),n&&s(gn),n&&s(X),n&&s(In),n&&s(L),n&&s(Dn),n&&s(T),n&&s(Hn),n&&s(R),n&&s(Cn),n&&s(y),n&&s(Mn),n&&s(S),n&&s(qn),n&&s(U),n&&s(xn),n&&s(A),n&&s(jn),n&&s(g),n&&s(Yn),n&&s(V),n&&s(Gn),n&&s(I),n&&s(Nn),n&&s(z),n&&s(Xn),n&&s(D),n&&s($n),n&&s(H),n&&s(Fn),n&&s(C),n&&s(Bn),n&&s(M),n&&s(Un),n&&s(Q),n&&s(Wn),n&&s(q),n&&s(Vn),n&&s(x),n&&s(Kn),n&&s(j),n&&s(zn),n&&s(sn),n&&s(Jn),n&&s(b),n&&s(Qn),n&&s(an),n&&s(Zn),n&&s(tn),n&&s(ns),n&&s(pn),n&&s(ss),n&&s(Y),n&&s(as),n&&s(on),n&&s(ts),n&&s(m),n&&s(ps),n&&s(G),n&&s(es),n&&s(_n)}}}function At(N){let f,d;const h=[N[0],ia];let v={$$slots:{default:[St]},$$scope:{ctx:N}};for(let _=0;_<h.length;_+=1)v=ua(v,h[_]);return f=new Rt({props:v}),{c(){ht(f.$$.fragment)},l(_){wt(f.$$.fragment,_)},m(_,E){Pt(f,_,E),d=!0},p(_,[E]){const O=E&1?Tt(h,[E&1&&pt(_[0]),E&0&&pt(ia)]):{};E&2&&(O.$$scope={dirty:E,ctx:_}),f.$set(O)},i(_){d||(yt(f.$$.fragment,_),d=!0)},o(_){bt(f.$$.fragment,_),d=!1},d(_){Ot(f,_)}}}const ia={title:"9장 유닛 테스트",summary:"",date:"2024-02-05",published:!1};function gt(N,f,d){return N.$$set=h=>{d(0,f=ua(ua({},f),et(h)))},f=et(f),[f]}class It extends vt{constructor(f){super(),Et(this,f,gt,At,dt,{})}}const Ct=Object.freeze(Object.defineProperty({__proto__:null,default:It,metadata:ia},Symbol.toStringTag,{value:"Module"}));export{It as P,Ct as _};
