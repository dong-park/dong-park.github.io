import{S as ya,i as Pa,s as wa,U as Rs,B as da,C as ha,D as Aa,V as ba,W as ka,r as xa,p as Ha,E as Ca,X as fa,e as p,t as k,a as i,c as e,b as l,d as f,f as a,g as r,m as _,h as t,j as o,n as Ma}from"./index.c0b9c16e.js";import{A as La}from"./ArticleLayout.072337d2.js";function $a($){let c,E,y,v,u,m,P,j,ms,Q,w,D,Es,Y,T,ys,Z,F,Ps,g,d,R,ws,ss,N,ds,as,h,O,hs,ns,S,As,ts,A,X,bs,ps,G,xs,es,b,_a=`<code class="language-java"><span class="token class-name">LocalPort</span> port <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    port<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PortDeviceFailure</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reportPortError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Device error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GMXError</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reportError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"GMX error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reportError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Response error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ls,x,va=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalPort</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">ACMEPort</span> innerPort<span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token keyword">int</span> portNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		innerPort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ACMEPort</span><span class="token punctuation">(</span>portNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ATM1212UnlockedExcpetion</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,os,U,Hs,cs,H,q,Cs,us,z,Ms,is,C,B,Ls,rs,V,$s,ks,M,W,js,fs,I,Ds,_s,L,J,Ts,vs,K,Fs;return{c(){c=p("p"),E=k("깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),y=i(),v=p("h3"),u=p("a"),m=k("오류 코드보다 예외를 사용하라"),P=i(),j=p("p"),ms=k("과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),Q=i(),w=p("h3"),D=p("a"),Es=k("Try-Catch-Finally 문부터 작성하라"),Y=i(),T=p("p"),ys=k("예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),Z=i(),F=p("p"),Ps=k("강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),g=i(),d=p("h3"),R=p("a"),ws=k("미확인 예외를 사용하라"),ss=i(),N=p("p"),ds=k("확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),as=i(),h=p("h3"),O=p("a"),hs=k("예외에 의미를 제공하라"),ns=i(),S=p("p"),As=k("예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),ts=i(),A=p("h3"),X=p("a"),bs=k("호출자를 고려해 예외 클래스를 정의하라"),ps=i(),G=p("p"),xs=k("오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),es=i(),b=p("pre"),ls=i(),x=p("pre"),os=i(),U=p("p"),Hs=k("위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),cs=i(),H=p("h3"),q=p("a"),Cs=k("정상 흐름을 정의하라"),us=i(),z=p("p"),Ms=k("앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다. 특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다."),is=i(),C=p("h3"),B=p("a"),Ls=k("null을 반환하지 마라"),rs=i(),V=p("p"),$s=k("null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),ks=i(),M=p("h3"),W=p("a"),js=k("null을 전달하지 마라"),fs=i(),I=p("p"),Ds=k("NullpointException을 야기하는 코드는 만들지 말자"),_s=i(),L=p("h3"),J=p("a"),Ts=k("결론"),vs=i(),K=p("p"),Fs=k("깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),this.h()},l(s){c=e(s,"P",{});var n=l(c);E=f(n,"깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),n.forEach(a),y=r(s),v=e(s,"H3",{id:!0});var Os=l(v);u=e(Os,"A",{href:!0});var Ss=l(u);m=f(Ss,"오류 코드보다 예외를 사용하라"),Ss.forEach(a),Os.forEach(a),P=r(s),j=e(s,"P",{});var Xs=l(j);ms=f(Xs,"과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),Xs.forEach(a),Q=r(s),w=e(s,"H3",{id:!0});var Gs=l(w);D=e(Gs,"A",{href:!0});var Us=l(D);Es=f(Us,"Try-Catch-Finally 문부터 작성하라"),Us.forEach(a),Gs.forEach(a),Y=r(s),T=e(s,"P",{});var qs=l(T);ys=f(qs,"예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),qs.forEach(a),Z=r(s),F=e(s,"P",{});var zs=l(F);Ps=f(zs,"강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),zs.forEach(a),g=r(s),d=e(s,"H3",{id:!0});var Bs=l(d);R=e(Bs,"A",{href:!0});var Vs=l(R);ws=f(Vs,"미확인 예외를 사용하라"),Vs.forEach(a),Bs.forEach(a),ss=r(s),N=e(s,"P",{});var Ws=l(N);ds=f(Ws,"확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),Ws.forEach(a),as=r(s),h=e(s,"H3",{id:!0});var Is=l(h);O=e(Is,"A",{href:!0});var Js=l(O);hs=f(Js,"예외에 의미를 제공하라"),Js.forEach(a),Is.forEach(a),ns=r(s),S=e(s,"P",{});var Ks=l(S);As=f(Ks,"예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),Ks.forEach(a),ts=r(s),A=e(s,"H3",{id:!0});var Qs=l(A);X=e(Qs,"A",{href:!0});var Ys=l(X);bs=f(Ys,"호출자를 고려해 예외 클래스를 정의하라"),Ys.forEach(a),Qs.forEach(a),ps=r(s),G=e(s,"P",{});var Zs=l(G);xs=f(Zs,"오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),Zs.forEach(a),es=r(s),b=e(s,"PRE",{class:!0});var ma=l(b);ma.forEach(a),ls=r(s),x=e(s,"PRE",{class:!0});var Ea=l(x);Ea.forEach(a),os=r(s),U=e(s,"P",{});var gs=l(U);Hs=f(gs,"위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),gs.forEach(a),cs=r(s),H=e(s,"H3",{id:!0});var sa=l(H);q=e(sa,"A",{href:!0});var aa=l(q);Cs=f(aa,"정상 흐름을 정의하라"),aa.forEach(a),sa.forEach(a),us=r(s),z=e(s,"P",{});var na=l(z);Ms=f(na,"앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다. 특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다."),na.forEach(a),is=r(s),C=e(s,"H3",{id:!0});var ta=l(C);B=e(ta,"A",{href:!0});var pa=l(B);Ls=f(pa,"null을 반환하지 마라"),pa.forEach(a),ta.forEach(a),rs=r(s),V=e(s,"P",{});var ea=l(V);$s=f(ea,"null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),ea.forEach(a),ks=r(s),M=e(s,"H3",{id:!0});var la=l(M);W=e(la,"A",{href:!0});var oa=l(W);js=f(oa,"null을 전달하지 마라"),oa.forEach(a),la.forEach(a),fs=r(s),I=e(s,"P",{});var ca=l(I);Ds=f(ca,"NullpointException을 야기하는 코드는 만들지 말자"),ca.forEach(a),_s=r(s),L=e(s,"H3",{id:!0});var ua=l(L);J=e(ua,"A",{href:!0});var ia=l(J);Ts=f(ia,"결론"),ia.forEach(a),ua.forEach(a),vs=r(s),K=e(s,"P",{});var ra=l(K);Fs=f(ra,"깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),ra.forEach(a),this.h()},h(){_(u,"href","#오류-코드보다-예외를-사용하라"),_(v,"id","오류-코드보다-예외를-사용하라"),_(D,"href","#try-catch-finally-문부터-작성하라"),_(w,"id","try-catch-finally-문부터-작성하라"),_(R,"href","#미확인-예외를-사용하라"),_(d,"id","미확인-예외를-사용하라"),_(O,"href","#예외에-의미를-제공하라"),_(h,"id","예외에-의미를-제공하라"),_(X,"href","#호출자를-고려해-예외-클래스를-정의하라"),_(A,"id","호출자를-고려해-예외-클래스를-정의하라"),_(b,"class","language-java"),_(x,"class","language-java"),_(q,"href","#정상-흐름을-정의하라"),_(H,"id","정상-흐름을-정의하라"),_(B,"href","#null을-반환하지-마라"),_(C,"id","null을-반환하지-마라"),_(W,"href","#null을-전달하지-마라"),_(M,"id","null을-전달하지-마라"),_(J,"href","#결론"),_(L,"id","결론")},m(s,n){t(s,c,n),o(c,E),t(s,y,n),t(s,v,n),o(v,u),o(u,m),t(s,P,n),t(s,j,n),o(j,ms),t(s,Q,n),t(s,w,n),o(w,D),o(D,Es),t(s,Y,n),t(s,T,n),o(T,ys),t(s,Z,n),t(s,F,n),o(F,Ps),t(s,g,n),t(s,d,n),o(d,R),o(R,ws),t(s,ss,n),t(s,N,n),o(N,ds),t(s,as,n),t(s,h,n),o(h,O),o(O,hs),t(s,ns,n),t(s,S,n),o(S,As),t(s,ts,n),t(s,A,n),o(A,X),o(X,bs),t(s,ps,n),t(s,G,n),o(G,xs),t(s,es,n),t(s,b,n),b.innerHTML=_a,t(s,ls,n),t(s,x,n),x.innerHTML=va,t(s,os,n),t(s,U,n),o(U,Hs),t(s,cs,n),t(s,H,n),o(H,q),o(q,Cs),t(s,us,n),t(s,z,n),o(z,Ms),t(s,is,n),t(s,C,n),o(C,B),o(B,Ls),t(s,rs,n),t(s,V,n),o(V,$s),t(s,ks,n),t(s,M,n),o(M,W),o(W,js),t(s,fs,n),t(s,I,n),o(I,Ds),t(s,_s,n),t(s,L,n),o(L,J),o(J,Ts),t(s,vs,n),t(s,K,n),o(K,Fs)},p:Ma,d(s){s&&a(c),s&&a(y),s&&a(v),s&&a(P),s&&a(j),s&&a(Q),s&&a(w),s&&a(Y),s&&a(T),s&&a(Z),s&&a(F),s&&a(g),s&&a(d),s&&a(ss),s&&a(N),s&&a(as),s&&a(h),s&&a(ns),s&&a(S),s&&a(ts),s&&a(A),s&&a(ps),s&&a(G),s&&a(es),s&&a(b),s&&a(ls),s&&a(x),s&&a(os),s&&a(U),s&&a(cs),s&&a(H),s&&a(us),s&&a(z),s&&a(is),s&&a(C),s&&a(rs),s&&a(V),s&&a(ks),s&&a(M),s&&a(fs),s&&a(I),s&&a(_s),s&&a(L),s&&a(vs),s&&a(K)}}}function ja($){let c,E;const y=[$[0],Ns];let v={$$slots:{default:[$a]},$$scope:{ctx:$}};for(let u=0;u<y.length;u+=1)v=Rs(v,y[u]);return c=new La({props:v}),{c(){da(c.$$.fragment)},l(u){ha(c.$$.fragment,u)},m(u,m){Aa(c,u,m),E=!0},p(u,[m]){const P=m&1?ba(y,[m&1&&ka(u[0]),m&0&&ka(Ns)]):{};m&2&&(P.$$scope={dirty:m,ctx:u}),c.$set(P)},i(u){E||(xa(c.$$.fragment,u),E=!0)},o(u){Ha(c.$$.fragment,u),E=!1},d(u){Ca(c,u)}}}const Ns={title:"7장 오류처리",summary:"",date:"2024-01-25",published:!1};function Da($,c,E){return $.$$set=y=>{E(0,c=Rs(Rs({},c),fa(y)))},c=fa(c),[c]}class Ta extends ya{constructor(c){super(),Pa(this,c,Da,ja,wa,{})}}const Na=Object.freeze(Object.defineProperty({__proto__:null,default:Ta,metadata:Ns},Symbol.toStringTag,{value:"Module"}));export{Ta as P,Na as _};
