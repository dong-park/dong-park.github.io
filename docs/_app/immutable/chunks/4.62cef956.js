import{S as Ae,i as $e,s as he,m as fe,o as ye,p as Oe,q as Ce,r as je,u as Ie,v as ke,w as He,x as we,y as xe,e as r,t as u,a as v,c as _,b as o,d as m,f as t,g as P,z as n,h as f,j as i,n as Ve}from"./index.1abab4a2.js";import{A as Me}from"./ArticleLayout.0277d15d.js";function qe(A){let s,p,E,d,a,c,S,T,$,G,q,h,J,z,b,y,K,D,O,Q,F,C,X,N,j,Y,R,k,Z,U,I,H,g,W,w,ee,L,x,V,te,B,M,le;return{c(){s=r("h2"),p=r("a"),E=u("소켓, 그것이 알고 싶다!"),d=v(),a=r("p"),c=u("여러분, 소켓이 무엇인지 궁금해 하셨나요? 소켓은 마치 컴퓨터간의 악수와도 같아요. TCP/IP라는 우리가 인터넷을 통해 서로 소통할 수 있게 해주는 마법 같은 규약 위에서 일어나는 일입니다. 아, TCP/IP에 대해 잠깐 설명하자면, 이는 데이터를 주고받는 규칙의 집합이에요. 인터넷의 기본 언어라고 할 수 있죠. TCP, UDP, IP, PORT 모두 이 놀라운 프로토콜의 일부입니다."),S=v(),T=r("h2"),$=r("a"),G=u("그래서, 소켓은 어떻게 연결되는 거야?"),q=v(),h=r("p"),J=u("소켓은 마치 전기 콘센트처럼, 네트워크 연결에 필요한 규약을 따르는 연결부입니다. 여러분도 아시다시피, 전기도 110V, 220V처럼 규약이 필요하죠. 그리고 이 모든 건 면접에서 자주 언급되는 OSI 7계층과 깊은 관련이 있어요. 소켓은 주로 전송계층과 세션 계층에서 활약하는 별이죠."),z=v(),b=r("h2"),y=r("a"),K=u("소켓의 마법: 비즈니스 로직을 어떻게 적용하나?"),D=v(),O=r("p"),Q=u("이론은 좋지만, 실제로 소켓을 활용하는 건 마치 게임을 만드는 것과 유사해요. 서버와 클라이언트, 이 둘의 대화를 가능하게 하는 것이죠."),F=v(),C=r("p"),X=u("서버소켓(방장의 역할): 마치 게임 방을 만들고 참가자를 기다리는 방장처럼, 서버소켓은 연결을 준비하고 데이터를 주고받습니다. 방을 만들고(bind), 참가자를 기다리다(listen), 참가자가 들어오면 환영(accept)하고, 게임 데이터를 주고받는(send/recv) 즐거운 시간을 보내죠. 그리고 파티가 끝나면, 방장이 나가면서(close) 모두의 연결을 끊습니다."),N=v(),j=r("p"),Y=u("클라이언트소켓(참가자의 역할): 게임에 참여하기 위해 방장이 만든 방에 들어가(connect), 열심히 게임을 즐기며 데이터를 주고받습니다(send/recv). 그리고 플레이가 끝나면, 스스로 방을 나가죠(close)."),R=v(),k=r("p"),Z=u("이 모든 과정은 마치 게임 내에서의 상호작용과 다름없어요. 소켓의 세계는 복잡해 보이지만, 기본적인 원리를 이해하면 어렵지 않습니다."),U=v(),I=r("h2"),H=r("a"),g=u("그래서, 실제로 소켓 API는 어떤 것들이 있나?"),W=v(),w=r("p"),ee=u("제 경험에 비추어, Node.js에서는 socket.io가 있고, Spring Framework에서는 WebSocket, STOMP를 사용했습니다. 이 두 가지는 각각의 생태계에서 소켓 통신을 쉽고 효율적으로 만들어주는 훌륭한 도구입니다."),L=v(),x=r("h2"),V=r("a"),te=u("결론"),B=v(),M=r("p"),le=u("소켓 통신은 처음에는 복잡해 보일 수 있지만, 그 원리를 이해하고 나면 매우 강력한 통신 수단이 됩니다. 게임 방장과 참가자로 비유하듯, 서버와 클라이언트 간의 소통을 가능하게 해주는 소켓은 개발자들에게 무한한 가능성을 제공합니다. 저의 경험도 여러분에게 도움이 되길 바라며, 이 글이 소켓의 세계로 첫발을 내딛는 데 조금이나마 도움이 되었으면 합니다."),this.h()},l(e){s=_(e,"H2",{id:!0});var l=o(s);p=_(l,"A",{href:!0});var ae=o(p);E=m(ae,"소켓, 그것이 알고 싶다!"),ae.forEach(t),l.forEach(t),d=P(e),a=_(e,"P",{});var re=o(a);c=m(re,"여러분, 소켓이 무엇인지 궁금해 하셨나요? 소켓은 마치 컴퓨터간의 악수와도 같아요. TCP/IP라는 우리가 인터넷을 통해 서로 소통할 수 있게 해주는 마법 같은 규약 위에서 일어나는 일입니다. 아, TCP/IP에 대해 잠깐 설명하자면, 이는 데이터를 주고받는 규칙의 집합이에요. 인터넷의 기본 언어라고 할 수 있죠. TCP, UDP, IP, PORT 모두 이 놀라운 프로토콜의 일부입니다."),re.forEach(t),S=P(e),T=_(e,"H2",{id:!0});var _e=o(T);$=_(_e,"A",{href:!0});var oe=o($);G=m(oe,"그래서, 소켓은 어떻게 연결되는 거야?"),oe.forEach(t),_e.forEach(t),q=P(e),h=_(e,"P",{});var ie=o(h);J=m(ie,"소켓은 마치 전기 콘센트처럼, 네트워크 연결에 필요한 규약을 따르는 연결부입니다. 여러분도 아시다시피, 전기도 110V, 220V처럼 규약이 필요하죠. 그리고 이 모든 건 면접에서 자주 언급되는 OSI 7계층과 깊은 관련이 있어요. 소켓은 주로 전송계층과 세션 계층에서 활약하는 별이죠."),ie.forEach(t),z=P(e),b=_(e,"H2",{id:!0});var pe=o(b);y=_(pe,"A",{href:!0});var ue=o(y);K=m(ue,"소켓의 마법: 비즈니스 로직을 어떻게 적용하나?"),ue.forEach(t),pe.forEach(t),D=P(e),O=_(e,"P",{});var me=o(O);Q=m(me,"이론은 좋지만, 실제로 소켓을 활용하는 건 마치 게임을 만드는 것과 유사해요. 서버와 클라이언트, 이 둘의 대화를 가능하게 하는 것이죠."),me.forEach(t),F=P(e),C=_(e,"P",{});var ve=o(C);X=m(ve,"서버소켓(방장의 역할): 마치 게임 방을 만들고 참가자를 기다리는 방장처럼, 서버소켓은 연결을 준비하고 데이터를 주고받습니다. 방을 만들고(bind), 참가자를 기다리다(listen), 참가자가 들어오면 환영(accept)하고, 게임 데이터를 주고받는(send/recv) 즐거운 시간을 보내죠. 그리고 파티가 끝나면, 방장이 나가면서(close) 모두의 연결을 끊습니다."),ve.forEach(t),N=P(e),j=_(e,"P",{});var Pe=o(j);Y=m(Pe,"클라이언트소켓(참가자의 역할): 게임에 참여하기 위해 방장이 만든 방에 들어가(connect), 열심히 게임을 즐기며 데이터를 주고받습니다(send/recv). 그리고 플레이가 끝나면, 스스로 방을 나가죠(close)."),Pe.forEach(t),R=P(e),k=_(e,"P",{});var ce=o(k);Z=m(ce,"이 모든 과정은 마치 게임 내에서의 상호작용과 다름없어요. 소켓의 세계는 복잡해 보이지만, 기본적인 원리를 이해하면 어렵지 않습니다."),ce.forEach(t),U=P(e),I=_(e,"H2",{id:!0});var ne=o(I);H=_(ne,"A",{href:!0});var Ee=o(H);g=m(Ee,"그래서, 실제로 소켓 API는 어떤 것들이 있나?"),Ee.forEach(t),ne.forEach(t),W=P(e),w=_(e,"P",{});var de=o(w);ee=m(de,"제 경험에 비추어, Node.js에서는 socket.io가 있고, Spring Framework에서는 WebSocket, STOMP를 사용했습니다. 이 두 가지는 각각의 생태계에서 소켓 통신을 쉽고 효율적으로 만들어주는 훌륭한 도구입니다."),de.forEach(t),L=P(e),x=_(e,"H2",{id:!0});var Se=o(x);V=_(Se,"A",{href:!0});var Te=o(V);te=m(Te,"결론"),Te.forEach(t),Se.forEach(t),B=P(e),M=_(e,"P",{});var be=o(M);le=m(be,"소켓 통신은 처음에는 복잡해 보일 수 있지만, 그 원리를 이해하고 나면 매우 강력한 통신 수단이 됩니다. 게임 방장과 참가자로 비유하듯, 서버와 클라이언트 간의 소통을 가능하게 해주는 소켓은 개발자들에게 무한한 가능성을 제공합니다. 저의 경험도 여러분에게 도움이 되길 바라며, 이 글이 소켓의 세계로 첫발을 내딛는 데 조금이나마 도움이 되었으면 합니다."),be.forEach(t),this.h()},h(){n(p,"href","#소켓-그것이-알고-싶다"),n(s,"id","소켓-그것이-알고-싶다"),n($,"href","#그래서-소켓은-어떻게-연결되는-거야"),n(T,"id","그래서-소켓은-어떻게-연결되는-거야"),n(y,"href","#소켓의-마법-비즈니스-로직을-어떻게-적용하나"),n(b,"id","소켓의-마법-비즈니스-로직을-어떻게-적용하나"),n(H,"href","#그래서-실제로-소켓-api는-어떤-것들이-있나"),n(I,"id","그래서-실제로-소켓-api는-어떤-것들이-있나"),n(V,"href","#결론"),n(x,"id","결론")},m(e,l){f(e,s,l),i(s,p),i(p,E),f(e,d,l),f(e,a,l),i(a,c),f(e,S,l),f(e,T,l),i(T,$),i($,G),f(e,q,l),f(e,h,l),i(h,J),f(e,z,l),f(e,b,l),i(b,y),i(y,K),f(e,D,l),f(e,O,l),i(O,Q),f(e,F,l),f(e,C,l),i(C,X),f(e,N,l),f(e,j,l),i(j,Y),f(e,R,l),f(e,k,l),i(k,Z),f(e,U,l),f(e,I,l),i(I,H),i(H,g),f(e,W,l),f(e,w,l),i(w,ee),f(e,L,l),f(e,x,l),i(x,V),i(V,te),f(e,B,l),f(e,M,l),i(M,le)},p:Ve,d(e){e&&t(s),e&&t(d),e&&t(a),e&&t(S),e&&t(T),e&&t(q),e&&t(h),e&&t(z),e&&t(b),e&&t(D),e&&t(O),e&&t(F),e&&t(C),e&&t(N),e&&t(j),e&&t(R),e&&t(k),e&&t(U),e&&t(I),e&&t(W),e&&t(w),e&&t(L),e&&t(x),e&&t(B),e&&t(M)}}}function ze(A){let s,p;const E=[A[0],se];let d={$$slots:{default:[qe]},$$scope:{ctx:A}};for(let a=0;a<E.length;a+=1)d=fe(d,E[a]);return s=new Me({props:d}),{c(){ye(s.$$.fragment)},l(a){Oe(s.$$.fragment,a)},m(a,c){Ce(s,a,c),p=!0},p(a,[c]){const S=c&1?je(E,[c&1&&Ie(a[0]),c&0&&Ie(se)]):{};c&2&&(S.$$scope={dirty:c,ctx:a}),s.$set(S)},i(a){p||(ke(s.$$.fragment,a),p=!0)},o(a){He(s.$$.fragment,a),p=!1},d(a){we(s,a)}}}const se={title:"소켓통신 야매 클래스",summary:"사내 스터디에 썼던 소켓에 대한 간단한 정리물입니다.",date:"2020-09-21",tags:["개발"]};function De(A,s,p){return A.$$set=E=>{p(0,s=fe(fe({},s),xe(E)))},s=xe(s),[s]}class Fe extends Ae{constructor(s){super(),$e(this,s,De,ze,he,{})}}const Ue=Object.freeze(Object.defineProperty({__proto__:null,default:Fe,metadata:se},Symbol.toStringTag,{value:"Module"}));export{Fe as P,Ue as _};
