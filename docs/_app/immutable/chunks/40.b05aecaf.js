var gp=Object.defineProperty;var sl=(E,a,r)=>a in E?gp(E,a,{enumerable:!0,configurable:!0,writable:!0,value:r}):E[a]=r;var ct=(E,a,r)=>(sl(E,typeof a!="symbol"?a+"":a,r),r);import{S as Hn,i as jn,s as Rn,M as qp,e,a as i,c as p,b as o,f as s,g as f,o as m,h as l,j as n,N as Vp,O as Yp,P as Wp,x as Tn,y as On,C as le,n as Vn,p as Xp,t as u,d as c,r as Kp,k as pe,u as Cn,m as nl,v as Nn,w as Gn,z as Dn,l as al,G as tl,R as Os,T as Yn,U as Ks,V as Qs,J as Qp}from"./index.27664a63.js";import{j as Zp}from"./singletons.3f13203a.js";import{p as el}from"./stores.d55de527.js";function pl(E){let a,r,_,v;const t=E[1].default,k=qp(t,E,E[0],null);return{c(){a=e("div"),r=e("div"),_=i(),k&&k.c(),this.h()},l(d){a=p(d,"DIV",{class:!0});var L=o(a);r=p(L,"DIV",{class:!0}),o(r).forEach(s),_=f(L),k&&k.l(L),L.forEach(s),this.h()},h(){m(r,"class","mt-[1.5em]"),m(a,"class","post-content")},m(d,L){l(d,a,L),n(a,r),n(a,_),k&&k.m(a,null),v=!0},p(d,[L]){k&&k.p&&(!v||L&1)&&Vp(k,t,d,d[0],v?Wp(t,d[0],L,null):Yp(d[0]),null)},i(d){v||(Tn(k,d),v=!0)},o(d){On(k,d),v=!1},d(d){d&&s(a),k&&k.d(d)}}}function ll(){document.querySelectorAll(".post-content pre > code").forEach(E=>{const a=E.className.match(/language-(\w+)/);if(a){let r=a[1];r=r[0].toUpperCase()+r.slice(1);const _=document.createElement("div");_.className="language-name",_.textContent=r,E.parentElement&&E.parentElement.insertBefore(_,E)}})}function ol(){document.querySelectorAll(".post-content a").forEach(E=>{E.href===E.textContent&&E.remove()})}function ul(E,a,r){let{$$slots:_={},$$scope:v}=a;return le(()=>{ll(),ol()}),E.$$set=t=>{"$$scope"in t&&r(0,v=t.$$scope)},[v,_]}class cl extends Hn{constructor(a){super(),jn(this,a,ul,pl,Rn,{})}}function Gp(E){return new Date(E).toLocaleDateString("en-US",{year:"numeric",month:"short",day:"numeric"})}function Dp(E,a,r){const _=E.slice();return _[3]=a[r].id,_[4]=a[r].text,_[5]=a[r].text_,_[6]=a[r].tagName,_[7]=a[r].top,_[8]=a[r].el,_}function Up(E){let a,r,_=E[4]+"",v,t,k,d,L,M;function us(){return E[1](E[8])}return{c(){a=e("li"),r=e("button"),v=u(_),k=i(),this.h()},l(C){a=p(C,"LI",{class:!0});var I=o(a);r=p(I,"BUTTON",{class:!0});var es=o(r);v=c(es,_),es.forEach(s),k=f(I),I.forEach(s),this.h()},h(){m(r,"class",t="hover:bg-gray-100 w-full text-left "+E[6]+" svelte-lumvm8"),m(a,"class",d="truncate font-sans cursor-pointer "+(Bp===E[5]?"font-bold":""))},m(C,I){l(C,a,I),n(a,r),n(r,v),n(a,k),L||(M=Kp(r,"click",us),L=!0)},p(C,I){E=C,I&1&&_!==(_=E[4]+"")&&pe(v,_),I&1&&t!==(t="hover:bg-gray-100 w-full text-left "+E[6]+" svelte-lumvm8")&&m(r,"class",t),I&1&&d!==(d="truncate font-sans cursor-pointer "+(Bp===E[5]?"font-bold":""))&&m(a,"class",d)},d(C){C&&s(a),L=!1,M()}}}function rl(E){let a,r,_=E[0],v=[];for(let t=0;t<_.length;t+=1)v[t]=Up(Dp(E,_,t));return{c(){a=e("nav"),r=e("ul");for(let t=0;t<v.length;t+=1)v[t].c();this.h()},l(t){a=p(t,"NAV",{class:!0});var k=o(a);r=p(k,"UL",{class:!0});var d=o(r);for(let L=0;L<v.length;L+=1)v[L].l(d);d.forEach(s),k.forEach(s),this.h()},h(){m(r,"class","mt-1 space-y-1 text-sm underline"),m(a,"class","relative z-20 mt-6")},m(t,k){l(t,a,k),n(a,r);for(let d=0;d<v.length;d+=1)v[d]&&v[d].m(r,null)},p(t,[k]){if(k&1){_=t[0];let d;for(d=0;d<_.length;d+=1){const L=Dp(t,_,d);v[d]?v[d].p(L,k):(v[d]=Up(L),v[d].c(),v[d].m(r,null))}for(;d<v.length;d+=1)v[d].d(1);v.length=_.length}},i:Vn,o:Vn,d(t){t&&s(a),Xp(v,t)}}}let Bp="";function il(E,a,r){let _=[];function v(){const k=Array.from(document.querySelectorAll("h2, h3"));r(0,_=k.map((d,L)=>({id:`heading-${L}`,text:d.innerText,text_:d.innerText.toLowerCase().replace(/ /g,"-"),tagName:d.tagName,el:d}))),console.log(_)}return le(()=>{v()}),[_,k=>{k.scrollIntoView({behavior:"smooth"})}]}class fl extends Hn{constructor(a){super(),jn(this,a,il,rl,Rn,{})}}function kl(E){let a;return{c(){a=e("div"),this.h()},l(r){a=p(r,"DIV",{id:!0,class:!0}),o(a).forEach(s),this.h()},h(){m(a,"id","utterances-comments"),m(a,"class","content-wrapper mt-auto")},m(r,_){l(r,a,_)},p:Vn,i:Vn,o:Vn,d(r){r&&s(a)}}}function _l(E){const a={src:"https://utteranc.es/client.js",repo:"dong-park/dong-park.github.io","issue-term":"pathname",theme:"github-light",crossOrigin:"anonymous"};return le(()=>{const r=document.createElement("script"),_=document.getElementById("utterances-comments");for(const v in a)r.setAttribute(v,a[v]);_.appendChild(r)}),[]}class ml extends Hn{constructor(a){super(),jn(this,a,_l,kl,Rn,{})}}const vl=Zp("goto"),El=Zp("after_navigate");function Fp(E,a,r){const _=E.slice();return _[18]=a[r],_}function dl(E){let a;const r=E[12].default,_=qp(r,E,E[15],null);return{c(){_&&_.c()},l(v){_&&_.l(v)},m(v,t){_&&_.m(v,t),a=!0},p(v,t){_&&_.p&&(!a||t&32768)&&Vp(_,r,v,v[15],a?Wp(r,v[15],t,null):Yp(v[15]),null)},i(v){a||(Tn(_,v),a=!0)},o(v){On(_,v),a=!1},d(v){_&&_.d(v)}}}function Jp(E){let a,r,_=E[18].title+"",v,t,k,d;function L(){return E[14](E[18])}return{c(){a=e("li"),r=e("button"),v=u(_),t=i(),this.h()},l(M){a=p(M,"LI",{});var us=o(a);r=p(us,"BUTTON",{class:!0});var C=o(r);v=c(C,_),C.forEach(s),t=f(us),us.forEach(s),this.h()},h(){m(r,"class","link w-full text-left cursor-pointer hover:bg-gray-100 svelte-d38ujb")},m(M,us){l(M,a,us),n(a,r),n(r,v),n(a,t),k||(d=Kp(r,"click",L),k=!0)},p(M,us){E=M,us&32&&_!==(_=E[18].title+"")&&pe(v,_)},d(M){M&&s(a),k=!1,d()}}}function hl(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps=Gp(E[2])+"",V,z,K,_s,rs,ss,Es,fs,Y,ts;document.title=a="개발자 썰 모음집 : "+E[0],K=new fl({}),rs=new cl({props:{$$slots:{default:[dl]},$$scope:{ctx:E}}});let Z=E[5],D=[];for(let F=0;F<Z.length;F+=1)D[F]=Jp(Fp(E,Z,F));return Y=new ml({}),{c(){r=e("meta"),_=e("meta"),v=e("link"),t=e("meta"),k=e("meta"),d=e("meta"),L=e("meta"),M=e("meta"),us=e("meta"),C=e("meta"),I=i(),es=e("main"),X=e("article"),A=e("h1"),Q=u(E[0]),B=i(),q=e("div"),V=u(ps),z=i(),Cn(K.$$.fragment),_s=i(),Cn(rs.$$.fragment),ss=i(),Es=e("ul");for(let F=0;F<D.length;F+=1)D[F].c();fs=i(),Cn(Y.$$.fragment),this.h()},l(F){const ns=nl("svelte-i0rv3r",document.head);r=p(ns,"META",{name:!0,content:!0}),_=p(ns,"META",{name:!0,content:!0}),v=p(ns,"LINK",{rel:!0,href:!0}),t=p(ns,"META",{property:!0,content:!0}),k=p(ns,"META",{property:!0,content:!0}),d=p(ns,"META",{property:!0,content:!0}),L=p(ns,"META",{property:!0,content:!0}),M=p(ns,"META",{property:!0,content:!0}),us=p(ns,"META",{property:!0,content:!0}),C=p(ns,"META",{name:!0,content:!0}),ns.forEach(s),I=f(F),es=p(F,"MAIN",{class:!0});var x=o(es);X=p(x,"ARTICLE",{id:!0,class:!0});var b=o(X);A=p(b,"H1",{class:!0});var g=o(A);Q=c(g,E[0]),g.forEach(s),B=f(b),q=p(b,"DIV",{class:!0});var ms=o(q);V=c(ms,ps),ms.forEach(s),z=f(b),Nn(K.$$.fragment,b),_s=f(b),Nn(rs.$$.fragment,b),ss=f(b),Es=p(b,"UL",{class:!0});var hs=o(Es);for(let ds=0;ds<D.length;ds+=1)D[ds].l(hs);hs.forEach(s),b.forEach(s),fs=f(x),Nn(Y.$$.fragment,x),x.forEach(s),this.h()},h(){m(r,"name","description"),m(r,"content",E[1]),m(_,"name","keyword"),m(_,"content",E[3]),m(v,"rel","canonical"),m(v,"href",E[6]),m(t,"property","og:title"),m(t,"content",E[0]),m(k,"property","og:description"),m(k,"content",E[1]),m(d,"property","og:url"),m(d,"content",E[6]),m(L,"property","og:type"),m(L,"content","article"),m(M,"property","og:site_name"),m(M,"content","dongpark.land"),m(us,"property","og:image"),m(us,"content",E[7]),m(C,"name","twitter:card"),m(C,"content","summary"),m(A,"class","svelte-d38ujb"),m(q,"class",""),m(Es,"class","children space-y-1 mt-4"),m(X,"id","slot"),m(X,"class","relative bg-white"),m(es,"class","flex flex-col main-height svelte-d38ujb")},m(F,ns){n(document.head,r),n(document.head,_),n(document.head,v),n(document.head,t),n(document.head,k),n(document.head,d),n(document.head,L),n(document.head,M),n(document.head,us),n(document.head,C),l(F,I,ns),l(F,es,ns),n(es,X),n(X,A),n(A,Q),E[13](A),n(X,B),n(X,q),n(q,V),n(X,z),Gn(K,X,null),n(X,_s),Gn(rs,X,null),n(X,ss),n(X,Es);for(let x=0;x<D.length;x+=1)D[x]&&D[x].m(Es,null);n(es,fs),Gn(Y,es,null),ts=!0},p(F,[ns]){(!ts||ns&1)&&a!==(a="개발자 썰 모음집 : "+F[0])&&(document.title=a),(!ts||ns&2)&&m(r,"content",F[1]),(!ts||ns&8)&&m(_,"content",F[3]),(!ts||ns&64)&&m(v,"href",F[6]),(!ts||ns&1)&&m(t,"content",F[0]),(!ts||ns&2)&&m(k,"content",F[1]),(!ts||ns&64)&&m(d,"content",F[6]),(!ts||ns&1)&&pe(Q,F[0]),(!ts||ns&4)&&ps!==(ps=Gp(F[2])+"")&&pe(V,ps);const x={};if(ns&32768&&(x.$$scope={dirty:ns,ctx:F}),rs.$set(x),ns&32){Z=F[5];let b;for(b=0;b<Z.length;b+=1){const g=Fp(F,Z,b);D[b]?D[b].p(g,ns):(D[b]=Jp(g),D[b].c(),D[b].m(Es,null))}for(;b<D.length;b+=1)D[b].d(1);D.length=Z.length}},i(F){ts||(Tn(K.$$.fragment,F),Tn(rs.$$.fragment,F),Tn(Y.$$.fragment,F),ts=!0)},o(F){On(K.$$.fragment,F),On(rs.$$.fragment,F),On(Y.$$.fragment,F),ts=!1},d(F){s(r),s(_),s(v),s(t),s(k),s(d),s(L),s(M),s(us),s(C),F&&s(I),F&&s(es),E[13](null),Dn(K),Dn(rs),Xp(D,F),Dn(Y)}}}function yl(E,a,r){let _,v;al(E,el,V=>r(11,v=V));let{$$slots:t={},$$scope:k}=a,{title:d,summary:L,date:M,data:us,form:C,tags:I,path:es}=a;const X="https://dong-park.github.io";let A,Q=X+"/imgs/favicon.png",B=[];El(()=>{A.scrollIntoView({behavior:"smooth"}),r(5,B=new zp().loadPostsChildren(es))}),le(()=>{r(5,B=new zp().loadPostsChildren(es))});function q(V){tl[V?"unshift":"push"](()=>{A=V,r(4,A)})}const ps=V=>vl("/wikis/"+V.path);return E.$$set=V=>{"title"in V&&r(0,d=V.title),"summary"in V&&r(1,L=V.summary),"date"in V&&r(2,M=V.date),"data"in V&&r(8,us=V.data),"form"in V&&r(9,C=V.form),"tags"in V&&r(3,I=V.tags),"path"in V&&r(10,es=V.path),"$$scope"in V&&r(15,k=V.$$scope)},E.$$.update=()=>{E.$$.dirty&2048&&r(6,_=X+decodeURIComponent(v.url.pathname)),E.$$.dirty&1024&&es.split("/").slice(0,-1).join("/")},[d,L,M,I,A,B,_,Q,us,C,es,v,t,q,ps,k]}class Wn extends Hn{constructor(a){super(),jn(this,a,yl,hl,Rn,{title:0,summary:1,date:2,data:8,form:9,tags:3,path:10})}}function Pl(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X;return{c(){a=e("p"),r=u(`세월과 함께 달리기는 나에게 무엇보다도 꾸준한 동반자가 되었다. 벌써 세 해가 지났다. 첫 해의 그 열정은 이제 조금 잦아들었고, 대신 마음이 무겁거나 생각이 많아질 때, 나는 자연스럽게 운동화를 찾게 된다.
달리기의 매력 중 하나는 바로 시작의 부담이 거의 없다는 것이다. 운동화 한 켤레와 조금의 의지만 있다면, 누구든지 그 첫 발을 내딛을 수 있다. 이 단순함이 어쩌면 다른 운동에서 찾기 힘든, 달리기만의 특별한
매력일지도 모른다.`),_=i(),v=e("p"),t=u(`달리기를 통해 내가 얻게 된 것들은 생각보다 많다. 메달 수집은 그 중 하나이다. 춘천마라톤, JTBC 마라톤과 같은 대회는 물론, 메이저 대회에서의 경험까지. 나는 이제 10km 마라톤을 달릴 수 있는 체력을
갖추게 되었다. 이전의 나는 1km를 뛰는 것조차 버거워했던 사람이었다. 하지만 지금은 10km 정도라면, 조금의 노력만으로도 충분히 달릴 수 있는 체력을 갖게 되었다. 이러한 변화는 내게 매우 큰 자부심을 준다.`),k=i(),d=e("p"),L=u(`체중 관리에 있어서 달리기는 나에게 없어서는 안 될 존재가 되었다. 적절한 강도의 유산소 운동은 체중을 감량하는 데 큰 도움이 되었고, 1년 차에는 거의 10kg에 가까운 체중을 줄일 수 있었다. 물론 식단 관리도
함께 했지만, 한 번 체중을 줄인 이후에는 유지하는 데 큰 어려움이 없었다. 체중이 조금 늘어나는 것 같을 때면, 다시 달리기를 통해 체중을 조절할 수 있었다. 달리기는 그런 면에서 체중 관리에 아주 훌륭한
도구이다.`),M=i(),us=e("p"),C=u(`그럼에도 불구하고, 요즘 들어 달리기에 대한 열정이 예전만 못하다는 것을 느끼곤 한다. 몇 주 동안 열심히 달리다가도, 갑자기 의욕을 잃어버리는 순간들이 있다. 매년 나에게 주어진 도전은 하프 마라톤이나 풀 코스
마라톤을 완주하는 것이다. 그러나 올해는 과연 어떨지, 스스로에게 다른 방식의 동기부여가 필요한 것은 아닌지 고민하고 있다.`),I=i(),es=e("p"),X=u(`달리기는 나에게 단순한 운동을 넘어서, 삶의 일부가 되었다. 언제든지 시작할 수 있고, 무엇보다도 나를 변화시켜온 힘이 되었다. 달리면서 나는 내면의 목소리에 귀 기울이고, 때로는 나 자신을 돌아볼 수 있는 시간을
갖게 된다. 그리고 가끔은, 달리기가 나에게 새로운 목표를 제시하기도 한다. 이 길을 따라 얼마나 더 갈 수 있을지, 앞으로 나와 달리기가 함께할 이야기가 기대된다.`)},l(A){a=p(A,"P",{});var Q=o(a);r=c(Q,`세월과 함께 달리기는 나에게 무엇보다도 꾸준한 동반자가 되었다. 벌써 세 해가 지났다. 첫 해의 그 열정은 이제 조금 잦아들었고, 대신 마음이 무겁거나 생각이 많아질 때, 나는 자연스럽게 운동화를 찾게 된다.
달리기의 매력 중 하나는 바로 시작의 부담이 거의 없다는 것이다. 운동화 한 켤레와 조금의 의지만 있다면, 누구든지 그 첫 발을 내딛을 수 있다. 이 단순함이 어쩌면 다른 운동에서 찾기 힘든, 달리기만의 특별한
매력일지도 모른다.`),Q.forEach(s),_=f(A),v=p(A,"P",{});var B=o(v);t=c(B,`달리기를 통해 내가 얻게 된 것들은 생각보다 많다. 메달 수집은 그 중 하나이다. 춘천마라톤, JTBC 마라톤과 같은 대회는 물론, 메이저 대회에서의 경험까지. 나는 이제 10km 마라톤을 달릴 수 있는 체력을
갖추게 되었다. 이전의 나는 1km를 뛰는 것조차 버거워했던 사람이었다. 하지만 지금은 10km 정도라면, 조금의 노력만으로도 충분히 달릴 수 있는 체력을 갖게 되었다. 이러한 변화는 내게 매우 큰 자부심을 준다.`),B.forEach(s),k=f(A),d=p(A,"P",{});var q=o(d);L=c(q,`체중 관리에 있어서 달리기는 나에게 없어서는 안 될 존재가 되었다. 적절한 강도의 유산소 운동은 체중을 감량하는 데 큰 도움이 되었고, 1년 차에는 거의 10kg에 가까운 체중을 줄일 수 있었다. 물론 식단 관리도
함께 했지만, 한 번 체중을 줄인 이후에는 유지하는 데 큰 어려움이 없었다. 체중이 조금 늘어나는 것 같을 때면, 다시 달리기를 통해 체중을 조절할 수 있었다. 달리기는 그런 면에서 체중 관리에 아주 훌륭한
도구이다.`),q.forEach(s),M=f(A),us=p(A,"P",{});var ps=o(us);C=c(ps,`그럼에도 불구하고, 요즘 들어 달리기에 대한 열정이 예전만 못하다는 것을 느끼곤 한다. 몇 주 동안 열심히 달리다가도, 갑자기 의욕을 잃어버리는 순간들이 있다. 매년 나에게 주어진 도전은 하프 마라톤이나 풀 코스
마라톤을 완주하는 것이다. 그러나 올해는 과연 어떨지, 스스로에게 다른 방식의 동기부여가 필요한 것은 아닌지 고민하고 있다.`),ps.forEach(s),I=f(A),es=p(A,"P",{});var V=o(es);X=c(V,`달리기는 나에게 단순한 운동을 넘어서, 삶의 일부가 되었다. 언제든지 시작할 수 있고, 무엇보다도 나를 변화시켜온 힘이 되었다. 달리면서 나는 내면의 목소리에 귀 기울이고, 때로는 나 자신을 돌아볼 수 있는 시간을
갖게 된다. 그리고 가끔은, 달리기가 나에게 새로운 목표를 제시하기도 한다. 이 길을 따라 얼마나 더 갈 수 있을지, 앞으로 나와 달리기가 함께할 이야기가 기대된다.`),V.forEach(s)},m(A,Q){l(A,a,Q),n(a,r),l(A,_,Q),l(A,v,Q),n(v,t),l(A,k,Q),l(A,d,Q),n(d,L),l(A,M,Q),l(A,us,Q),n(us,C),l(A,I,Q),l(A,es,Q),n(es,X)},p:Vn,d(A){A&&s(a),A&&s(_),A&&s(v),A&&s(k),A&&s(d),A&&s(M),A&&s(us),A&&s(I),A&&s(es)}}}function wl(E){let a,r;const _=[E[0],ie];let v={$$slots:{default:[Pl]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(ie)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const ie={title:"런린이 3년차 푸념",summary:"달리기와 나태함 그 사이에 통찰",date:"2024-03-13",tags:["일기"]};function bl(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let $l=class extends Hn{constructor(a){super(),jn(this,a,bl,wl,Rn,{})}};const Ll=Object.freeze(Object.defineProperty({__proto__:null,default:$l,metadata:ie},Symbol.toStringTag,{value:"Module"}));function Sl(E){let a,r;const _=[E[0],fe];let v={};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(fe)]):{};a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const fe={title:"C/S",summary:"",date:"2020-09-21",tags:["개발"]};function Al(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Tl=class extends Hn{constructor(a){super(),jn(this,a,Al,Sl,Rn,{})}};const Ol=Object.freeze(Object.defineProperty({__proto__:null,default:Tl,metadata:fe},Symbol.toStringTag,{value:"Module"}));function Il(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs,Fs,As,Ys,Ws,os,N,Rs,nn,Vs,gs;return{c(){a=e("h1"),r=e("a"),_=u("OOP"),v=i(),t=e("p"),k=u(`객체지향프로그래밍은 컴퓨터프로그래밍 패러다임중 하나이다. 컴퓨터 프로그래밍을 명령어의 집합에서 보는 시각에서 벗어나 독립된 단위 즉 객체의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고 데이터를
처리할 수 있다.`),d=i(),L=e("p"),M=u(`객체지향 프로그래밍은 프로그램의 유연하고 변경을 쉽게하는것을 지향하기 때문에 개발과 보수를 좀더 간편하게 할수 있다는 장점이 있지만 지나친 객체화의 경향은 실제 세계의 모습을 반대로 그대로 반영하지 못하게 한다는
단점이 있다.`),us=i(),C=e("h2"),I=e("a"),es=u("OOP 설계원칙"),X=i(),A=e("h3"),Q=e("a"),B=u("단일 책임의 원칙(SRP Single Responsibility Principle)"),q=i(),ps=e("p"),V=u(`해당 모듈이 여러 대상 또는 엑터들에 대해 책임을 가져서는 안되고, 오직 하나의 엑터에 대해서만 책임을 져야한다. 단일 책임의 원칙을 지키게 되면 변경이 필요할 때 수정할 대상이 명확해진다는 장점이 있다. 수정에
대해서 서로 영향을 받지 않아 어플리케이션 변화에 좀더 과감하게 대응할수 있다.`),z=i(),K=e("h3"),_s=e("a"),rs=u("개방 폐쇄의 원칙(OCP Open-Closed Principle)"),ss=i(),Es=e("p"),fs=u("확장에 대해 열려있고 수정에 대해서는 닫혀 있어야 한다."),Y=i(),ts=e("ul"),Z=e("li"),D=u("확장에 대해 열려있다: 요구사항이 변경될 때 새로운 동작을 추가하여 애플리케이션의 기능을 확장할 수 있다."),F=i(),ns=e("li"),x=u("수정에 대해 닫혀있다: 기존의 코드를 수정하지 않고 애플리케이션의 동작을 추가하거나 변경할 수 있다."),b=i(),g=e("p"),ms=u(`객체가 알아야 하는 지식이나 참조가 많아지면 객체간 결합도가 높아지고, 결합도가 높아질수록 위 원칙에 위배되는 설계가 된다. 변하는 것들은 숨기고 변하지 않는 것들에 의존하게 되면 기존 클래스를 수정하지 않고
어플리케이션 개발을 할 수 있게 된다.`),hs=i(),ds=e("h3"),as=e("a"),is=u("리스코프의 치환 법칙(LSP Liskov Substitution Principle)"),S=i(),ys=e("p"),O=u("하위 타입은 상위 타입을 대체할 수 있어야 한다."),ks=i(),bs=e("p"),j=u("해당 객체를 사용하는 클라이언트가 상위 타입을 상속하는 하위 타입을 사용해도 차이점을 인식하지 못하고 계속 사용할수 있어야 한다는 것이다."),vs=i(),ls=e("p"),Ps=u("자식 클래스가 부모클래스를 대체하기 위해서는 부모 클래스의 가정을 준수해야 한다는 점을 강조"),Is=i(),Ls=e("h3"),xs=e("a"),W=u("의존 역전 원칙(DIP Dependency Inversion Principle)"),ws=i(),Ss=e("p"),Ms=u("고수준 모듈은 저수준 모듈의 구현에 의존해서는 안되고 저수준 모듈이 고수준의 모듈에 의존해야 한다."),Ns=i(),Hs=e("p"),Gs=u("상위 계층(정책결정)이 하위 계층(세부 사항)에 의존하는 전통적인 의존관계를 반전시킨것 상위 계층이 하위 계층의 구현으로부터 독립하고 추상화에 의존할수 있게 해야한다."),w=i(),h=e("ul"),$s=e("li"),Zs=u("고수준의 모듈: 비즈니스 로직에 가까운 어떤 의미 있는 단일 기능을 제공하는 모듈"),Fs=i(),As=e("li"),Ys=u("저수준 모듈: 고수준 모듈의 기능을 구현하기 위한 하위 기능들을 실제로 구현한것"),Ws=i(),os=e("h3"),N=e("a"),Rs=u("인터페이스 분리 원칙(ISP Interface segregation Principe)"),nn=i(),Vs=e("p"),gs=u("클라이언트가 실제로 사용하는 인터페이스대로 분리를 해야 한다. 한번 인터페이스로 분리했다면 다시 인터페이스를 쪼개는 일은 지양해야 한다. 기존에 인터페이스를 받은 기존의 구현체에 문제가 생길수도 있기 때문이다."),this.h()},l(G){a=p(G,"H1",{id:!0});var Ts=o(a);r=p(Ts,"A",{href:!0});var Xs=o(r);_=c(Xs,"OOP"),Xs.forEach(s),Ts.forEach(s),v=f(G),t=p(G,"P",{});var H=o(t);k=c(H,`객체지향프로그래밍은 컴퓨터프로그래밍 패러다임중 하나이다. 컴퓨터 프로그래밍을 명령어의 집합에서 보는 시각에서 벗어나 독립된 단위 즉 객체의 모임으로 파악하고자 하는 것이다. 각각의 객체는 메시지를 주고받고 데이터를
처리할 수 있다.`),H.forEach(s),d=f(G),L=p(G,"P",{});var P=o(L);M=c(P,`객체지향 프로그래밍은 프로그램의 유연하고 변경을 쉽게하는것을 지향하기 때문에 개발과 보수를 좀더 간편하게 할수 있다는 장점이 있지만 지나친 객체화의 경향은 실제 세계의 모습을 반대로 그대로 반영하지 못하게 한다는
단점이 있다.`),P.forEach(s),us=f(G),C=p(G,"H2",{id:!0});var js=o(C);I=p(js,"A",{href:!0});var sn=o(I);es=c(sn,"OOP 설계원칙"),sn.forEach(s),js.forEach(s),X=f(G),A=p(G,"H3",{id:!0});var qs=o(A);Q=p(qs,"A",{href:!0});var cs=o(Q);B=c(cs,"단일 책임의 원칙(SRP Single Responsibility Principle)"),cs.forEach(s),qs.forEach(s),q=f(G),ps=p(G,"P",{});var Us=o(ps);V=c(Us,`해당 모듈이 여러 대상 또는 엑터들에 대해 책임을 가져서는 안되고, 오직 하나의 엑터에 대해서만 책임을 져야한다. 단일 책임의 원칙을 지키게 되면 변경이 필요할 때 수정할 대상이 명확해진다는 장점이 있다. 수정에
대해서 서로 영향을 받지 않아 어플리케이션 변화에 좀더 과감하게 대응할수 있다.`),Us.forEach(s),z=f(G),K=p(G,"H3",{id:!0});var an=o(K);_s=p(an,"A",{href:!0});var ln=o(_s);rs=c(ln,"개방 폐쇄의 원칙(OCP Open-Closed Principle)"),ln.forEach(s),an.forEach(s),ss=f(G),Es=p(G,"P",{});var fn=o(Es);fs=c(fn,"확장에 대해 열려있고 수정에 대해서는 닫혀 있어야 한다."),fn.forEach(s),Y=f(G),ts=p(G,"UL",{});var un=o(ts);Z=p(un,"LI",{});var pn=o(Z);D=c(pn,"확장에 대해 열려있다: 요구사항이 변경될 때 새로운 동작을 추가하여 애플리케이션의 기능을 확장할 수 있다."),pn.forEach(s),F=f(un),ns=p(un,"LI",{});var kn=o(ns);x=c(kn,"수정에 대해 닫혀있다: 기존의 코드를 수정하지 않고 애플리케이션의 동작을 추가하거나 변경할 수 있다."),kn.forEach(s),un.forEach(s),b=f(G),g=p(G,"P",{});var on=o(g);ms=c(on,`객체가 알아야 하는 지식이나 참조가 많아지면 객체간 결합도가 높아지고, 결합도가 높아질수록 위 원칙에 위배되는 설계가 된다. 변하는 것들은 숨기고 변하지 않는 것들에 의존하게 되면 기존 클래스를 수정하지 않고
어플리케이션 개발을 할 수 있게 된다.`),on.forEach(s),hs=f(G),ds=p(G,"H3",{id:!0});var En=o(ds);as=p(En,"A",{href:!0});var dn=o(as);is=c(dn,"리스코프의 치환 법칙(LSP Liskov Substitution Principle)"),dn.forEach(s),En.forEach(s),S=f(G),ys=p(G,"P",{});var mn=o(ys);O=c(mn,"하위 타입은 상위 타입을 대체할 수 있어야 한다."),mn.forEach(s),ks=f(G),bs=p(G,"P",{});var en=o(bs);j=c(en,"해당 객체를 사용하는 클라이언트가 상위 타입을 상속하는 하위 타입을 사용해도 차이점을 인식하지 못하고 계속 사용할수 있어야 한다는 것이다."),en.forEach(s),vs=f(G),ls=p(G,"P",{});var hn=o(ls);Ps=c(hn,"자식 클래스가 부모클래스를 대체하기 위해서는 부모 클래스의 가정을 준수해야 한다는 점을 강조"),hn.forEach(s),Is=f(G),Ls=p(G,"H3",{id:!0});var rn=o(Ls);xs=p(rn,"A",{href:!0});var Ln=o(xs);W=c(Ln,"의존 역전 원칙(DIP Dependency Inversion Principle)"),Ln.forEach(s),rn.forEach(s),ws=f(G),Ss=p(G,"P",{});var Pn=o(Ss);Ms=c(Pn,"고수준 모듈은 저수준 모듈의 구현에 의존해서는 안되고 저수준 모듈이 고수준의 모듈에 의존해야 한다."),Pn.forEach(s),Ns=f(G),Hs=p(G,"P",{});var wn=o(Hs);Gs=c(wn,"상위 계층(정책결정)이 하위 계층(세부 사항)에 의존하는 전통적인 의존관계를 반전시킨것 상위 계층이 하위 계층의 구현으로부터 독립하고 추상화에 의존할수 있게 해야한다."),wn.forEach(s),w=f(G),h=p(G,"UL",{});var cn=o(h);$s=p(cn,"LI",{});var yn=o($s);Zs=c(yn,"고수준의 모듈: 비즈니스 로직에 가까운 어떤 의미 있는 단일 기능을 제공하는 모듈"),yn.forEach(s),Fs=f(cn),As=p(cn,"LI",{});var Jn=o(As);Ys=c(Jn,"저수준 모듈: 고수준 모듈의 기능을 구현하기 위한 하위 기능들을 실제로 구현한것"),Jn.forEach(s),cn.forEach(s),Ws=f(G),os=p(G,"H3",{id:!0});var vn=o(os);N=p(vn,"A",{href:!0});var _n=o(N);Rs=c(_n,"인터페이스 분리 원칙(ISP Interface segregation Principe)"),_n.forEach(s),vn.forEach(s),nn=f(G),Vs=p(G,"P",{});var bn=o(Vs);gs=c(bn,"클라이언트가 실제로 사용하는 인터페이스대로 분리를 해야 한다. 한번 인터페이스로 분리했다면 다시 인터페이스를 쪼개는 일은 지양해야 한다. 기존에 인터페이스를 받은 기존의 구현체에 문제가 생길수도 있기 때문이다."),bn.forEach(s),this.h()},h(){m(r,"href","#oop"),m(a,"id","oop"),m(I,"href","#oop-설계원칙"),m(C,"id","oop-설계원칙"),m(Q,"href","#단일-책임의-원칙srp-single-responsibility-principle"),m(A,"id","단일-책임의-원칙srp-single-responsibility-principle"),m(_s,"href","#개방-폐쇄의-원칙ocp-open-closed-principle"),m(K,"id","개방-폐쇄의-원칙ocp-open-closed-principle"),m(as,"href","#리스코프의-치환-법칙lsp-liskov-substitution-principle"),m(ds,"id","리스코프의-치환-법칙lsp-liskov-substitution-principle"),m(xs,"href","#의존-역전-원칙dip-dependency-inversion-principle"),m(Ls,"id","의존-역전-원칙dip-dependency-inversion-principle"),m(N,"href","#인터페이스-분리-원칙isp-interface-segregation-principe"),m(os,"id","인터페이스-분리-원칙isp-interface-segregation-principe")},m(G,Ts){l(G,a,Ts),n(a,r),n(r,_),l(G,v,Ts),l(G,t,Ts),n(t,k),l(G,d,Ts),l(G,L,Ts),n(L,M),l(G,us,Ts),l(G,C,Ts),n(C,I),n(I,es),l(G,X,Ts),l(G,A,Ts),n(A,Q),n(Q,B),l(G,q,Ts),l(G,ps,Ts),n(ps,V),l(G,z,Ts),l(G,K,Ts),n(K,_s),n(_s,rs),l(G,ss,Ts),l(G,Es,Ts),n(Es,fs),l(G,Y,Ts),l(G,ts,Ts),n(ts,Z),n(Z,D),n(ts,F),n(ts,ns),n(ns,x),l(G,b,Ts),l(G,g,Ts),n(g,ms),l(G,hs,Ts),l(G,ds,Ts),n(ds,as),n(as,is),l(G,S,Ts),l(G,ys,Ts),n(ys,O),l(G,ks,Ts),l(G,bs,Ts),n(bs,j),l(G,vs,Ts),l(G,ls,Ts),n(ls,Ps),l(G,Is,Ts),l(G,Ls,Ts),n(Ls,xs),n(xs,W),l(G,ws,Ts),l(G,Ss,Ts),n(Ss,Ms),l(G,Ns,Ts),l(G,Hs,Ts),n(Hs,Gs),l(G,w,Ts),l(G,h,Ts),n(h,$s),n($s,Zs),n(h,Fs),n(h,As),n(As,Ys),l(G,Ws,Ts),l(G,os,Ts),n(os,N),n(N,Rs),l(G,nn,Ts),l(G,Vs,Ts),n(Vs,gs)},p:Vn,d(G){G&&s(a),G&&s(v),G&&s(t),G&&s(d),G&&s(L),G&&s(us),G&&s(C),G&&s(X),G&&s(A),G&&s(q),G&&s(ps),G&&s(z),G&&s(K),G&&s(ss),G&&s(Es),G&&s(Y),G&&s(ts),G&&s(b),G&&s(g),G&&s(hs),G&&s(ds),G&&s(S),G&&s(ys),G&&s(ks),G&&s(bs),G&&s(vs),G&&s(ls),G&&s(Is),G&&s(Ls),G&&s(ws),G&&s(Ss),G&&s(Ns),G&&s(Hs),G&&s(w),G&&s(h),G&&s(Ws),G&&s(os),G&&s(nn),G&&s(Vs)}}}function xl(E){let a,r;const _=[E[0],ke];let v={$$slots:{default:[Il]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(ke)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const ke={title:"OOP",summary:"객체지향 프로그래밍의 핵심 원칙과 이를 통한 효율적인 소프트웨어 개발 방법을 설명합니다. SRP, OCP, LSP, DIP, ISP 원칙 탐구.",date:"2020-09-21",tags:["개발"]};function Hl(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let jl=class extends Hn{constructor(a){super(),jn(this,a,Hl,xl,Rn,{})}};const Rl=Object.freeze(Object.defineProperty({__proto__:null,default:jl,metadata:ke},Symbol.toStringTag,{value:"Module"}));function Ml(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts;return{c(){a=e("h2"),r=e("a"),_=u("정의"),v=i(),t=e("p"),k=u("REST (Representational State Transfer)는 WEB 시스템의 "),d=e("strong"),L=u("아키텍처 스타일 중 하나"),M=u("입니다. RESTful API는 REST 아키텍처에 따라 설계된 API를 의미합니다."),us=i(),C=e("p"),I=u("RESTful API는 자원을 표현하고 상태를 전달하기 위해 HTTP 메서드("),es=e("strong"),X=u("GET, POST, PUT, DELETE"),A=u(" 등)를 사용합니다. 이를 통해 클라이언트와 서버 간의 통신이 단순하고 유연하며 확장 가능하게 됩니다."),Q=i(),B=e("h2"),q=e("a"),ps=u("특징"),V=i(),z=e("ul"),K=e("li"),_s=u("자원(URI)를 통해 표현하고, HTTP 메서드를 통해 조작합니다."),rs=i(),ss=e("li"),Es=u("Stateless한 특성을 가지며, 각 요청은 독립적으로 처리됩니다."),fs=i(),Y=e("li"),ts=u("자원의 표현 방식은 다양한 형태로 제공될 수 있습니다 (예: JSON, XML 등)."),this.h()},l(Z){a=p(Z,"H2",{id:!0});var D=o(a);r=p(D,"A",{href:!0});var F=o(r);_=c(F,"정의"),F.forEach(s),D.forEach(s),v=f(Z),t=p(Z,"P",{});var ns=o(t);k=c(ns,"REST (Representational State Transfer)는 WEB 시스템의 "),d=p(ns,"STRONG",{});var x=o(d);L=c(x,"아키텍처 스타일 중 하나"),x.forEach(s),M=c(ns,"입니다. RESTful API는 REST 아키텍처에 따라 설계된 API를 의미합니다."),ns.forEach(s),us=f(Z),C=p(Z,"P",{});var b=o(C);I=c(b,"RESTful API는 자원을 표현하고 상태를 전달하기 위해 HTTP 메서드("),es=p(b,"STRONG",{});var g=o(es);X=c(g,"GET, POST, PUT, DELETE"),g.forEach(s),A=c(b," 등)를 사용합니다. 이를 통해 클라이언트와 서버 간의 통신이 단순하고 유연하며 확장 가능하게 됩니다."),b.forEach(s),Q=f(Z),B=p(Z,"H2",{id:!0});var ms=o(B);q=p(ms,"A",{href:!0});var hs=o(q);ps=c(hs,"특징"),hs.forEach(s),ms.forEach(s),V=f(Z),z=p(Z,"UL",{});var ds=o(z);K=p(ds,"LI",{});var as=o(K);_s=c(as,"자원(URI)를 통해 표현하고, HTTP 메서드를 통해 조작합니다."),as.forEach(s),rs=f(ds),ss=p(ds,"LI",{});var is=o(ss);Es=c(is,"Stateless한 특성을 가지며, 각 요청은 독립적으로 처리됩니다."),is.forEach(s),fs=f(ds),Y=p(ds,"LI",{});var S=o(Y);ts=c(S,"자원의 표현 방식은 다양한 형태로 제공될 수 있습니다 (예: JSON, XML 등)."),S.forEach(s),ds.forEach(s),this.h()},h(){m(r,"href","#정의"),m(a,"id","정의"),m(q,"href","#특징"),m(B,"id","특징")},m(Z,D){l(Z,a,D),n(a,r),n(r,_),l(Z,v,D),l(Z,t,D),n(t,k),n(t,d),n(d,L),n(t,M),l(Z,us,D),l(Z,C,D),n(C,I),n(C,es),n(es,X),n(C,A),l(Z,Q,D),l(Z,B,D),n(B,q),n(q,ps),l(Z,V,D),l(Z,z,D),n(z,K),n(K,_s),n(z,rs),n(z,ss),n(ss,Es),n(z,fs),n(z,Y),n(Y,ts)},p:Vn,d(Z){Z&&s(a),Z&&s(v),Z&&s(t),Z&&s(us),Z&&s(C),Z&&s(Q),Z&&s(B),Z&&s(V),Z&&s(z)}}}function Cl(E){let a,r;const _=[E[0],_e];let v={$$slots:{default:[Ml]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(_e)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const _e={title:"Restful API",summary:"",date:"2020-09-21",tags:["CS"]};function Nl(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Gl=class extends Hn{constructor(a){super(),jn(this,a,Nl,Cl,Rn,{})}};const Dl=Object.freeze(Object.defineProperty({__proto__:null,default:Gl,metadata:_e},Symbol.toStringTag,{value:"Module"}));function Ul(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys;return{c(){a=e("h2"),r=e("a"),_=u("소켓, 그것이 알고 싶다!"),v=i(),t=e("p"),k=u(`여러분, 소켓이 무엇인지 궁금해 하셨나요? 소켓은 마치 컴퓨터간의 악수와도 같아요. TCP/IP라는 우리가 인터넷을 통해 서로 소통할 수 있게 해주는 마법 같은 규약 위에서 일어나는 일입니다. 아, TCP/IP에
대해 잠깐 설명하자면, 이는 데이터를 주고받는 규칙의 집합이에요. 인터넷의 기본 언어라고 할 수 있죠. TCP, UDP, IP, PORT 모두 이 놀라운 프로토콜의 일부입니다.`),d=i(),L=e("h2"),M=e("a"),us=u("그래서, 소켓은 어떻게 연결되는 거야?"),C=i(),I=e("p"),es=u(`소켓은 마치 전기 콘센트처럼, 네트워크 연결에 필요한 규약을 따르는 연결부입니다. 여러분도 아시다시피, 전기도 110V, 220V처럼 규약이 필요하죠. 그리고 이 모든 건 면접에서 자주 언급되는 OSI 7계층과 깊은
관련이 있어요. 소켓은 주로 전송계층과 세션 계층에서 활약하는 별이죠.`),X=i(),A=e("h2"),Q=e("a"),B=u("소켓의 마법: 비즈니스 로직을 어떻게 적용하나?"),q=i(),ps=e("p"),V=u("이론은 좋지만, 실제로 소켓을 활용하는 건 마치 게임을 만드는 것과 유사해요. 서버와 클라이언트, 이 둘의 대화를 가능하게 하는 것이죠."),z=i(),K=e("p"),_s=u(`서버소켓(방장의 역할): 마치 게임 방을 만들고 참가자를 기다리는 방장처럼, 서버소켓은 연결을 준비하고 데이터를 주고받습니다. 방을 만들고(bind), 참가자를 기다리다(listen), 참가자가 들어오면 환영(
accept)하고, 게임 데이터를 주고받는(send/recv) 즐거운 시간을 보내죠. 그리고 파티가 끝나면, 방장이 나가면서(close) 모두의 연결을 끊습니다.`),rs=i(),ss=e("p"),Es=u(`클라이언트소켓(참가자의 역할): 게임에 참여하기 위해 방장이 만든 방에 들어가(connect), 열심히 게임을 즐기며 데이터를 주고받습니다(send/recv). 그리고 플레이가 끝나면, 스스로 방을 나가죠(
close).`),fs=i(),Y=e("p"),ts=u("이 모든 과정은 마치 게임 내에서의 상호작용과 다름없어요. 소켓의 세계는 복잡해 보이지만, 기본적인 원리를 이해하면 어렵지 않습니다."),Z=i(),D=e("h2"),F=e("a"),ns=u("그래서, 실제로 소켓 API는 어떤 것들이 있나?"),x=i(),b=e("p"),g=u(`제 경험에 비추어, Node.js에서는 socket.io가 있고, Spring Framework에서는 WebSocket, STOMP를 사용했습니다. 이 두 가지는 각각의 생태계에서 소켓 통신을 쉽고 효율적으로
만들어주는 훌륭한 도구입니다.`),ms=i(),hs=e("h2"),ds=e("a"),as=u("결론"),is=i(),S=e("p"),ys=u(`소켓 통신은 처음에는 복잡해 보일 수 있지만, 그 원리를 이해하고 나면 매우 강력한 통신 수단이 됩니다. 게임 방장과 참가자로 비유하듯, 서버와 클라이언트 간의 소통을 가능하게 해주는 소켓은 개발자들에게 무한한
가능성을 제공합니다. 저의 경험도 여러분에게 도움이 되길 바라며, 이 글이 소켓의 세계로 첫발을 내딛는 데 조금이나마 도움이 되었으면 합니다.`),this.h()},l(O){a=p(O,"H2",{id:!0});var ks=o(a);r=p(ks,"A",{href:!0});var bs=o(r);_=c(bs,"소켓, 그것이 알고 싶다!"),bs.forEach(s),ks.forEach(s),v=f(O),t=p(O,"P",{});var j=o(t);k=c(j,`여러분, 소켓이 무엇인지 궁금해 하셨나요? 소켓은 마치 컴퓨터간의 악수와도 같아요. TCP/IP라는 우리가 인터넷을 통해 서로 소통할 수 있게 해주는 마법 같은 규약 위에서 일어나는 일입니다. 아, TCP/IP에
대해 잠깐 설명하자면, 이는 데이터를 주고받는 규칙의 집합이에요. 인터넷의 기본 언어라고 할 수 있죠. TCP, UDP, IP, PORT 모두 이 놀라운 프로토콜의 일부입니다.`),j.forEach(s),d=f(O),L=p(O,"H2",{id:!0});var vs=o(L);M=p(vs,"A",{href:!0});var ls=o(M);us=c(ls,"그래서, 소켓은 어떻게 연결되는 거야?"),ls.forEach(s),vs.forEach(s),C=f(O),I=p(O,"P",{});var Ps=o(I);es=c(Ps,`소켓은 마치 전기 콘센트처럼, 네트워크 연결에 필요한 규약을 따르는 연결부입니다. 여러분도 아시다시피, 전기도 110V, 220V처럼 규약이 필요하죠. 그리고 이 모든 건 면접에서 자주 언급되는 OSI 7계층과 깊은
관련이 있어요. 소켓은 주로 전송계층과 세션 계층에서 활약하는 별이죠.`),Ps.forEach(s),X=f(O),A=p(O,"H2",{id:!0});var Is=o(A);Q=p(Is,"A",{href:!0});var Ls=o(Q);B=c(Ls,"소켓의 마법: 비즈니스 로직을 어떻게 적용하나?"),Ls.forEach(s),Is.forEach(s),q=f(O),ps=p(O,"P",{});var xs=o(ps);V=c(xs,"이론은 좋지만, 실제로 소켓을 활용하는 건 마치 게임을 만드는 것과 유사해요. 서버와 클라이언트, 이 둘의 대화를 가능하게 하는 것이죠."),xs.forEach(s),z=f(O),K=p(O,"P",{});var W=o(K);_s=c(W,`서버소켓(방장의 역할): 마치 게임 방을 만들고 참가자를 기다리는 방장처럼, 서버소켓은 연결을 준비하고 데이터를 주고받습니다. 방을 만들고(bind), 참가자를 기다리다(listen), 참가자가 들어오면 환영(
accept)하고, 게임 데이터를 주고받는(send/recv) 즐거운 시간을 보내죠. 그리고 파티가 끝나면, 방장이 나가면서(close) 모두의 연결을 끊습니다.`),W.forEach(s),rs=f(O),ss=p(O,"P",{});var ws=o(ss);Es=c(ws,`클라이언트소켓(참가자의 역할): 게임에 참여하기 위해 방장이 만든 방에 들어가(connect), 열심히 게임을 즐기며 데이터를 주고받습니다(send/recv). 그리고 플레이가 끝나면, 스스로 방을 나가죠(
close).`),ws.forEach(s),fs=f(O),Y=p(O,"P",{});var Ss=o(Y);ts=c(Ss,"이 모든 과정은 마치 게임 내에서의 상호작용과 다름없어요. 소켓의 세계는 복잡해 보이지만, 기본적인 원리를 이해하면 어렵지 않습니다."),Ss.forEach(s),Z=f(O),D=p(O,"H2",{id:!0});var Ms=o(D);F=p(Ms,"A",{href:!0});var Ns=o(F);ns=c(Ns,"그래서, 실제로 소켓 API는 어떤 것들이 있나?"),Ns.forEach(s),Ms.forEach(s),x=f(O),b=p(O,"P",{});var Hs=o(b);g=c(Hs,`제 경험에 비추어, Node.js에서는 socket.io가 있고, Spring Framework에서는 WebSocket, STOMP를 사용했습니다. 이 두 가지는 각각의 생태계에서 소켓 통신을 쉽고 효율적으로
만들어주는 훌륭한 도구입니다.`),Hs.forEach(s),ms=f(O),hs=p(O,"H2",{id:!0});var Gs=o(hs);ds=p(Gs,"A",{href:!0});var w=o(ds);as=c(w,"결론"),w.forEach(s),Gs.forEach(s),is=f(O),S=p(O,"P",{});var h=o(S);ys=c(h,`소켓 통신은 처음에는 복잡해 보일 수 있지만, 그 원리를 이해하고 나면 매우 강력한 통신 수단이 됩니다. 게임 방장과 참가자로 비유하듯, 서버와 클라이언트 간의 소통을 가능하게 해주는 소켓은 개발자들에게 무한한
가능성을 제공합니다. 저의 경험도 여러분에게 도움이 되길 바라며, 이 글이 소켓의 세계로 첫발을 내딛는 데 조금이나마 도움이 되었으면 합니다.`),h.forEach(s),this.h()},h(){m(r,"href","#소켓-그것이-알고-싶다"),m(a,"id","소켓-그것이-알고-싶다"),m(M,"href","#그래서-소켓은-어떻게-연결되는-거야"),m(L,"id","그래서-소켓은-어떻게-연결되는-거야"),m(Q,"href","#소켓의-마법-비즈니스-로직을-어떻게-적용하나"),m(A,"id","소켓의-마법-비즈니스-로직을-어떻게-적용하나"),m(F,"href","#그래서-실제로-소켓-api는-어떤-것들이-있나"),m(D,"id","그래서-실제로-소켓-api는-어떤-것들이-있나"),m(ds,"href","#결론"),m(hs,"id","결론")},m(O,ks){l(O,a,ks),n(a,r),n(r,_),l(O,v,ks),l(O,t,ks),n(t,k),l(O,d,ks),l(O,L,ks),n(L,M),n(M,us),l(O,C,ks),l(O,I,ks),n(I,es),l(O,X,ks),l(O,A,ks),n(A,Q),n(Q,B),l(O,q,ks),l(O,ps,ks),n(ps,V),l(O,z,ks),l(O,K,ks),n(K,_s),l(O,rs,ks),l(O,ss,ks),n(ss,Es),l(O,fs,ks),l(O,Y,ks),n(Y,ts),l(O,Z,ks),l(O,D,ks),n(D,F),n(F,ns),l(O,x,ks),l(O,b,ks),n(b,g),l(O,ms,ks),l(O,hs,ks),n(hs,ds),n(ds,as),l(O,is,ks),l(O,S,ks),n(S,ys)},p:Vn,d(O){O&&s(a),O&&s(v),O&&s(t),O&&s(d),O&&s(L),O&&s(C),O&&s(I),O&&s(X),O&&s(A),O&&s(q),O&&s(ps),O&&s(z),O&&s(K),O&&s(rs),O&&s(ss),O&&s(fs),O&&s(Y),O&&s(Z),O&&s(D),O&&s(x),O&&s(b),O&&s(ms),O&&s(hs),O&&s(is),O&&s(S)}}}function Bl(E){let a,r;const _=[E[0],me];let v={$$slots:{default:[Ul]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(me)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const me={title:"소켓통신",summary:"소켓 통신의 기본 원리와 그 활용 방법을 소개합니다. TCP/IP, OSI 7계층의 역할을 이해하고, 서버소켓과 클라이언트소켓 간의 인터랙션을 설명합니다.",date:"2020-09-21",tags:["개발"]};function Fl(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Jl=class extends Hn{constructor(a){super(),jn(this,a,Fl,Bl,Rn,{})}};const zl=Object.freeze(Object.defineProperty({__proto__:null,default:Jl,metadata:me},Symbol.toStringTag,{value:"Module"}));function ql(E){let a,r;const _=[E[0],ve];let v={};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(ve)]):{};a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const ve={title:"Infra",summary:"",date:"2024-05-14",tags:[]};function Vl(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Yl=class extends Hn{constructor(a){super(),jn(this,a,Vl,ql,Rn,{})}};const Wl=Object.freeze(Object.defineProperty({__proto__:null,default:Yl,metadata:ve},Symbol.toStringTag,{value:"Module"}));function Xl(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds;return{c(){a=e("p"),r=u(`메시지큐는 프로세스나 스레드 간에 비동기적으로 메시지를 교환하기 위한 통식 방식입니다. 메시지큐를 사용하면 메시지 생성자는 메시지를 큐에 보내고. 메시지 수신자는 큐를 통해 메시지를 수신합니다. 이를 통해 시스템간의
결합도를 낮추고, 확장성과 유연도를 높일 수 있습니다.`),_=i(),v=e("h2"),t=e("a"),k=u("메시지큐를 사용할 때 주의해야 할 점"),d=i(),L=e("p"),M=u("이러한 비동기식 구현에는 전달된 요청 메시지가 잘 수신되었는지 확인해야 하는데, 이러한 비동기 컴포넌트 구현에는 에러처리를 잘 해야 한다."),us=i(),C=e("ol"),I=e("li"),es=u(`재처리: 메시지 처리 중 에러가 발생 했을때, 다른 발신 처리를 시도하는 방법, 메시지 처리기가 일시적인 문제가 발생하여 장애를 일으켰을때 효과적인 대처가 가능하다. 통상적으로 재처리 횟수를 3에서 5회정도
시도하는것으로 알려져 있다.`),X=i(),A=e("li"),Q=u("무시: 보통 중요하지 않은 메세지의 경우 에러처리를 하지 않고 지나간다. 보통 중요하지 않은 로그정보인 경우"),B=i(),q=e("li"),ps=u("알림: 메시지 처리중 에러가 발생했을때 관리자에게 알림 메시지를 날리는 경우"),V=i(),z=e("li"),K=u("사람이 처리함: 에러가 발생했을때 관리자가 직접 처리한다. 에러 재처리 부분이 복잡한 경우에 이 경우도 고려할 수 있다."),_s=i(),rs=e("h2"),ss=e("a"),Es=u("메시지 큐 구성 시 고려해야할 사항"),fs=i(),Y=e("ol"),ts=e("li"),Z=u("성능 및 페일 오버를 고려한 Persistence 선택"),D=i(),F=e("li"),ns=u("펜딩으로한 인한 Out of Memory"),x=i(),b=e("li"),g=u("트랜잭션 지원 기능"),ms=i(),hs=e("li"),ds=u("클러스터링 기능"),this.h()},l(as){a=p(as,"P",{});var is=o(a);r=c(is,`메시지큐는 프로세스나 스레드 간에 비동기적으로 메시지를 교환하기 위한 통식 방식입니다. 메시지큐를 사용하면 메시지 생성자는 메시지를 큐에 보내고. 메시지 수신자는 큐를 통해 메시지를 수신합니다. 이를 통해 시스템간의
결합도를 낮추고, 확장성과 유연도를 높일 수 있습니다.`),is.forEach(s),_=f(as),v=p(as,"H2",{id:!0});var S=o(v);t=p(S,"A",{href:!0});var ys=o(t);k=c(ys,"메시지큐를 사용할 때 주의해야 할 점"),ys.forEach(s),S.forEach(s),d=f(as),L=p(as,"P",{});var O=o(L);M=c(O,"이러한 비동기식 구현에는 전달된 요청 메시지가 잘 수신되었는지 확인해야 하는데, 이러한 비동기 컴포넌트 구현에는 에러처리를 잘 해야 한다."),O.forEach(s),us=f(as),C=p(as,"OL",{});var ks=o(C);I=p(ks,"LI",{});var bs=o(I);es=c(bs,`재처리: 메시지 처리 중 에러가 발생 했을때, 다른 발신 처리를 시도하는 방법, 메시지 처리기가 일시적인 문제가 발생하여 장애를 일으켰을때 효과적인 대처가 가능하다. 통상적으로 재처리 횟수를 3에서 5회정도
시도하는것으로 알려져 있다.`),bs.forEach(s),X=f(ks),A=p(ks,"LI",{});var j=o(A);Q=c(j,"무시: 보통 중요하지 않은 메세지의 경우 에러처리를 하지 않고 지나간다. 보통 중요하지 않은 로그정보인 경우"),j.forEach(s),B=f(ks),q=p(ks,"LI",{});var vs=o(q);ps=c(vs,"알림: 메시지 처리중 에러가 발생했을때 관리자에게 알림 메시지를 날리는 경우"),vs.forEach(s),V=f(ks),z=p(ks,"LI",{});var ls=o(z);K=c(ls,"사람이 처리함: 에러가 발생했을때 관리자가 직접 처리한다. 에러 재처리 부분이 복잡한 경우에 이 경우도 고려할 수 있다."),ls.forEach(s),ks.forEach(s),_s=f(as),rs=p(as,"H2",{id:!0});var Ps=o(rs);ss=p(Ps,"A",{href:!0});var Is=o(ss);Es=c(Is,"메시지 큐 구성 시 고려해야할 사항"),Is.forEach(s),Ps.forEach(s),fs=f(as),Y=p(as,"OL",{});var Ls=o(Y);ts=p(Ls,"LI",{});var xs=o(ts);Z=c(xs,"성능 및 페일 오버를 고려한 Persistence 선택"),xs.forEach(s),D=f(Ls),F=p(Ls,"LI",{});var W=o(F);ns=c(W,"펜딩으로한 인한 Out of Memory"),W.forEach(s),x=f(Ls),b=p(Ls,"LI",{});var ws=o(b);g=c(ws,"트랜잭션 지원 기능"),ws.forEach(s),ms=f(Ls),hs=p(Ls,"LI",{});var Ss=o(hs);ds=c(Ss,"클러스터링 기능"),Ss.forEach(s),Ls.forEach(s),this.h()},h(){m(t,"href","#메시지큐를-사용할-때-주의해야-할-점"),m(v,"id","메시지큐를-사용할-때-주의해야-할-점"),m(ss,"href","#메시지-큐-구성-시-고려해야할-사항"),m(rs,"id","메시지-큐-구성-시-고려해야할-사항")},m(as,is){l(as,a,is),n(a,r),l(as,_,is),l(as,v,is),n(v,t),n(t,k),l(as,d,is),l(as,L,is),n(L,M),l(as,us,is),l(as,C,is),n(C,I),n(I,es),n(C,X),n(C,A),n(A,Q),n(C,B),n(C,q),n(q,ps),n(C,V),n(C,z),n(z,K),l(as,_s,is),l(as,rs,is),n(rs,ss),n(ss,Es),l(as,fs,is),l(as,Y,is),n(Y,ts),n(ts,Z),n(Y,D),n(Y,F),n(F,ns),n(Y,x),n(Y,b),n(b,g),n(Y,ms),n(Y,hs),n(hs,ds)},p:Vn,d(as){as&&s(a),as&&s(_),as&&s(v),as&&s(d),as&&s(L),as&&s(us),as&&s(C),as&&s(_s),as&&s(rs),as&&s(fs),as&&s(Y)}}}function Kl(E){let a,r;const _=[E[0],Ee];let v={$$slots:{default:[Xl]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Ee)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Ee={title:"메시지 큐",summary:"메시지큐는 프로세스나 스레드 간에 비동기적으로 메시지를 교환하기 위한 통식 방식입니다. 메시지큐를 사용하면 메시지 생성자는 메시지를 큐에 보내고. 메시지 수신자는 큐를 통해 메시지를 수신합니다. 이를 통해 시스템간의 결합도를 낮추고, 확장성과 유연도를 높일 수 있습니다.",date:"2024-05-14",tags:["Infra"]};function Ql(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Zl=class extends Hn{constructor(a){super(),jn(this,a,Ql,Kl,Rn,{})}};const gl=Object.freeze(Object.defineProperty({__proto__:null,default:Zl,metadata:Ee},Symbol.toStringTag,{value:"Module"}));function so(E){let a,r;const _=[E[0],de];let v={};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(de)]):{};a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const de={title:"JAVA",summary:"",date:"2024-05-13",tags:["개발","JAVA"]};function no(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let ao=class extends Hn{constructor(a){super(),jn(this,a,no,so,Rn,{})}};const to=Object.freeze(Object.defineProperty({__proto__:null,default:ao,metadata:de},Symbol.toStringTag,{value:"Module"}));function eo(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs;return{c(){a=e("h2"),r=e("a"),_=u("Java Beans"),v=i(),t=e("p"),k=u(`Java Beans는 Java로 작성된 소프트웨어 컴포넌트이다.
자바빈즈의 사양은 썬 마이크로시스템즈에서 다음과 같이 정의되었다. 빌더 형식의 개발도구에서 가시적으로 조작이 가능하고 또한 재사용이 가능한 소프트웨어 컴포넌트이다.
EJB와 혼동하지 말아야 할것이 Java EE의 일부로서 서버 계열의 컴포넌트 이다.`),d=i(),L=e("h2"),M=e("a"),us=u("일반적인 관례"),C=i(),I=e("p"),es=u(`Java Beans 클래스로서 작동하기 위해서, 객체 클래스는 명명법, 생성법 그리고 행동에 관련된 일련의 관례를 따라야만 한다. 이러한 관례는 (빌더 형식의) 개발 도구에서 자바빈즈와의 연결을 통해 클래스의 사용과
재사용 그리고 클래스의 재배치를 가능하게 한다.`),X=i(),A=e("ul"),Q=e("li"),B=u("클래스는 직렬화되어야 한다."),q=i(),ps=e("li"),V=u("클래스는 기본 생성자를 가지고 있어야 한다."),z=i(),K=e("li"),_s=u("클래스의 속성들을 get, set 혹은 표준 명명법을 따르는 메서드들을 사용해 접근할 수 있어야 한다."),rs=i(),ss=e("li"),Es=u("클래스는 필요한 이벤트 처리 메서드들을 포함하고 있어야 한다."),fs=i(),Y=e("p"),ts=u("오히려 인터페이스의 구현보다 다양한 관례로서 표현된 요구 사항들로 인해 일부 개발자들은 자바빈즈를 확실한"),Z=i(),D=e("p"),F=u("출처: "),ns=e("a"),x=u("위키피디아"),b=i(),g=e("h2"),ms=e("a"),hs=u("키워드"),ds=i(),as=e("ul"),is=e("li"),S=u("Java로 작성된 소프트웨어 컴포넌트"),ys=i(),O=e("li"),ks=u("명명법, 생성법, 메서드"),bs=i(),j=e("li"),vs=u("직렬화, 생성자, get/set 명명법을 따른 접근자, 이벤트 처리를 위한 메서드"),this.h()},l(ls){a=p(ls,"H2",{id:!0});var Ps=o(a);r=p(Ps,"A",{href:!0});var Is=o(r);_=c(Is,"Java Beans"),Is.forEach(s),Ps.forEach(s),v=f(ls),t=p(ls,"P",{});var Ls=o(t);k=c(Ls,`Java Beans는 Java로 작성된 소프트웨어 컴포넌트이다.
자바빈즈의 사양은 썬 마이크로시스템즈에서 다음과 같이 정의되었다. 빌더 형식의 개발도구에서 가시적으로 조작이 가능하고 또한 재사용이 가능한 소프트웨어 컴포넌트이다.
EJB와 혼동하지 말아야 할것이 Java EE의 일부로서 서버 계열의 컴포넌트 이다.`),Ls.forEach(s),d=f(ls),L=p(ls,"H2",{id:!0});var xs=o(L);M=p(xs,"A",{href:!0});var W=o(M);us=c(W,"일반적인 관례"),W.forEach(s),xs.forEach(s),C=f(ls),I=p(ls,"P",{});var ws=o(I);es=c(ws,`Java Beans 클래스로서 작동하기 위해서, 객체 클래스는 명명법, 생성법 그리고 행동에 관련된 일련의 관례를 따라야만 한다. 이러한 관례는 (빌더 형식의) 개발 도구에서 자바빈즈와의 연결을 통해 클래스의 사용과
재사용 그리고 클래스의 재배치를 가능하게 한다.`),ws.forEach(s),X=f(ls),A=p(ls,"UL",{});var Ss=o(A);Q=p(Ss,"LI",{});var Ms=o(Q);B=c(Ms,"클래스는 직렬화되어야 한다."),Ms.forEach(s),q=f(Ss),ps=p(Ss,"LI",{});var Ns=o(ps);V=c(Ns,"클래스는 기본 생성자를 가지고 있어야 한다."),Ns.forEach(s),z=f(Ss),K=p(Ss,"LI",{});var Hs=o(K);_s=c(Hs,"클래스의 속성들을 get, set 혹은 표준 명명법을 따르는 메서드들을 사용해 접근할 수 있어야 한다."),Hs.forEach(s),rs=f(Ss),ss=p(Ss,"LI",{});var Gs=o(ss);Es=c(Gs,"클래스는 필요한 이벤트 처리 메서드들을 포함하고 있어야 한다."),Gs.forEach(s),Ss.forEach(s),fs=f(ls),Y=p(ls,"P",{});var w=o(Y);ts=c(w,"오히려 인터페이스의 구현보다 다양한 관례로서 표현된 요구 사항들로 인해 일부 개발자들은 자바빈즈를 확실한"),w.forEach(s),Z=f(ls),D=p(ls,"P",{});var h=o(D);F=c(h,"출처: "),ns=p(h,"A",{href:!0,rel:!0});var $s=o(ns);x=c($s,"위키피디아"),$s.forEach(s),h.forEach(s),b=f(ls),g=p(ls,"H2",{id:!0});var Zs=o(g);ms=p(Zs,"A",{href:!0});var Fs=o(ms);hs=c(Fs,"키워드"),Fs.forEach(s),Zs.forEach(s),ds=f(ls),as=p(ls,"UL",{});var As=o(as);is=p(As,"LI",{});var Ys=o(is);S=c(Ys,"Java로 작성된 소프트웨어 컴포넌트"),Ys.forEach(s),ys=f(As),O=p(As,"LI",{});var Ws=o(O);ks=c(Ws,"명명법, 생성법, 메서드"),Ws.forEach(s),bs=f(As),j=p(As,"LI",{});var os=o(j);vs=c(os,"직렬화, 생성자, get/set 명명법을 따른 접근자, 이벤트 처리를 위한 메서드"),os.forEach(s),As.forEach(s),this.h()},h(){m(r,"href","#java-beans"),m(a,"id","java-beans"),m(M,"href","#일반적인-관례"),m(L,"id","일반적인-관례"),m(ns,"href","https://ko.wikipedia.org/wiki/%EC%9E%90%EB%B0%94%EB%B9%88%EC%A6%88"),m(ns,"rel","nofollow"),m(ms,"href","#키워드"),m(g,"id","키워드")},m(ls,Ps){l(ls,a,Ps),n(a,r),n(r,_),l(ls,v,Ps),l(ls,t,Ps),n(t,k),l(ls,d,Ps),l(ls,L,Ps),n(L,M),n(M,us),l(ls,C,Ps),l(ls,I,Ps),n(I,es),l(ls,X,Ps),l(ls,A,Ps),n(A,Q),n(Q,B),n(A,q),n(A,ps),n(ps,V),n(A,z),n(A,K),n(K,_s),n(A,rs),n(A,ss),n(ss,Es),l(ls,fs,Ps),l(ls,Y,Ps),n(Y,ts),l(ls,Z,Ps),l(ls,D,Ps),n(D,F),n(D,ns),n(ns,x),l(ls,b,Ps),l(ls,g,Ps),n(g,ms),n(ms,hs),l(ls,ds,Ps),l(ls,as,Ps),n(as,is),n(is,S),n(as,ys),n(as,O),n(O,ks),n(as,bs),n(as,j),n(j,vs)},p:Vn,d(ls){ls&&s(a),ls&&s(v),ls&&s(t),ls&&s(d),ls&&s(L),ls&&s(C),ls&&s(I),ls&&s(X),ls&&s(A),ls&&s(fs),ls&&s(Y),ls&&s(Z),ls&&s(D),ls&&s(b),ls&&s(g),ls&&s(ds),ls&&s(as)}}}function po(E){let a,r;const _=[E[0],he];let v={$$slots:{default:[eo]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(he)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const he={title:"Bean",summary:"",date:"2024-05-13",tags:["JAVA"]};function lo(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let oo=class extends Hn{constructor(a){super(),jn(this,a,lo,po,Rn,{})}};const uo=Object.freeze(Object.defineProperty({__proto__:null,default:oo,metadata:he},Symbol.toStringTag,{value:"Module"}));function co(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs;return{c(){a=e("h2"),r=e("a"),_=u("키워드 정리"),v=i(),t=e("ul"),k=e("li"),d=u("가비지 컬렉션은 메모리 관리방법, 이것을 수행하는게 가비지 컬렉터"),L=i(),M=e("li"),us=u("할당된 메모리가 더이상 참조되지 않을때 가비지 형태로 남는다"),C=i(),I=e("li"),es=u("자바의 경우 메모리를 더이상 할당할수 없을때 쓰레드가 잠시 멈춘후 GC를 실행한다"),X=i(),A=e("li"),Q=u("JVM 메모리는 클래스, 힙, 스택, 네이티브 메서드 스택 영역중 GC는 힙 메모리 영역 청소"),B=i(),q=e("li"),ps=u("힙 메모리는 Young, Old, Perm 영역으로 나뉜다. Eden - Survivor - Old 영역순으로 객체의 메모리가 이동되고 청소"),V=i(),z=e("hr"),K=i(),_s=e("h2"),rs=e("a"),ss=u("GC란?"),Es=i(),fs=e("p"),Y=u(`가비지 컬렉션 줄여서 GC라고 불린다. 메모리 관리 방법 중 하나로, 시스템에서 더이상 사용하지 않는 동적 할당된 메모리 블럭을 찾아 자동으로 다시 회수하는 것이다.
시스템에서 가비지 컬렉션을 수행하는 부분을 가비지 컬렉터라 부른다.
GC를 지원하지 않는 언어는 메모리 해제까지 직접 해야한다. 이로인해 메모리 누수, 해제 했던 메모리를 재사용하는 버그가 양산된다.`),ts=i(),Z=e("p"),D=u("할당된 메모리가 형변환 하거나 새롭게 선언되었을때 다른 곳을 가리키게 되면서 ‘가비지’ 라는게 발생한다. 이때 가비지 컬렉터의 역할은 사용되지 않는 메모리를 해제 시킨다."),F=i(),ns=e("p"),x=u(`자바의 경우 메모리가 부족해지는 순간이 오면 GC가 실행된다. 이때 Stop-the-world가 발생하는데 GC가 실행됐을때, 나머지 쓰레드는 작업을 일단 멈추는 현상이다. GC튜닝은 바로 이 시간을 줄이는 것을
뜻한다.`),b=i(),g=e("h2"),ms=e("a"),hs=u("JVM 메모리 영역"),ds=i(),as=e("p"),is=u("JVM의 메모리는 클래스 영역, 자바 스택, 힙, 네이티브 메소드 스택 이렇게 4개 영역으로 나뉜다. 자바에서의 GC는 "),S=e("strong"),ys=u("힙 메모리"),O=u("를 다루게 된다."),ks=i(),bs=e("h2"),j=e("a"),vs=u("힙메모리 영역 청소 과정"),ls=i(),Ps=e("p"),Is=e("img"),xs=u(`
힙메모리는 또 Young, Old, Perm 영역으로 나뉜다. Young 영역에서 발생한 GC를 Minor GC, 두 영역에서 발생한 GC를 Major GC라고 한다.
메모리에 객체가 생성되면 eden 영역에 객체가 지정된다. 데이터가 어느 정도 쌓이면 이 영역에 있던 객체가 다른 곳으로 옮겨지거나 삭제된다. 이때 옮겨가는 위치가 survivor space라 고 불린다. 그러다가
더 큰 객체가 생성되어 Young 영역에 공간이 남지 않으면 객체들은 Old 영역으로 이동하게 된다.`),this.h()},l(W){a=p(W,"H2",{id:!0});var ws=o(a);r=p(ws,"A",{href:!0});var Ss=o(r);_=c(Ss,"키워드 정리"),Ss.forEach(s),ws.forEach(s),v=f(W),t=p(W,"UL",{});var Ms=o(t);k=p(Ms,"LI",{});var Ns=o(k);d=c(Ns,"가비지 컬렉션은 메모리 관리방법, 이것을 수행하는게 가비지 컬렉터"),Ns.forEach(s),L=f(Ms),M=p(Ms,"LI",{});var Hs=o(M);us=c(Hs,"할당된 메모리가 더이상 참조되지 않을때 가비지 형태로 남는다"),Hs.forEach(s),C=f(Ms),I=p(Ms,"LI",{});var Gs=o(I);es=c(Gs,"자바의 경우 메모리를 더이상 할당할수 없을때 쓰레드가 잠시 멈춘후 GC를 실행한다"),Gs.forEach(s),X=f(Ms),A=p(Ms,"LI",{});var w=o(A);Q=c(w,"JVM 메모리는 클래스, 힙, 스택, 네이티브 메서드 스택 영역중 GC는 힙 메모리 영역 청소"),w.forEach(s),B=f(Ms),q=p(Ms,"LI",{});var h=o(q);ps=c(h,"힙 메모리는 Young, Old, Perm 영역으로 나뉜다. Eden - Survivor - Old 영역순으로 객체의 메모리가 이동되고 청소"),h.forEach(s),Ms.forEach(s),V=f(W),z=p(W,"HR",{}),K=f(W),_s=p(W,"H2",{id:!0});var $s=o(_s);rs=p($s,"A",{href:!0});var Zs=o(rs);ss=c(Zs,"GC란?"),Zs.forEach(s),$s.forEach(s),Es=f(W),fs=p(W,"P",{});var Fs=o(fs);Y=c(Fs,`가비지 컬렉션 줄여서 GC라고 불린다. 메모리 관리 방법 중 하나로, 시스템에서 더이상 사용하지 않는 동적 할당된 메모리 블럭을 찾아 자동으로 다시 회수하는 것이다.
시스템에서 가비지 컬렉션을 수행하는 부분을 가비지 컬렉터라 부른다.
GC를 지원하지 않는 언어는 메모리 해제까지 직접 해야한다. 이로인해 메모리 누수, 해제 했던 메모리를 재사용하는 버그가 양산된다.`),Fs.forEach(s),ts=f(W),Z=p(W,"P",{});var As=o(Z);D=c(As,"할당된 메모리가 형변환 하거나 새롭게 선언되었을때 다른 곳을 가리키게 되면서 ‘가비지’ 라는게 발생한다. 이때 가비지 컬렉터의 역할은 사용되지 않는 메모리를 해제 시킨다."),As.forEach(s),F=f(W),ns=p(W,"P",{});var Ys=o(ns);x=c(Ys,`자바의 경우 메모리가 부족해지는 순간이 오면 GC가 실행된다. 이때 Stop-the-world가 발생하는데 GC가 실행됐을때, 나머지 쓰레드는 작업을 일단 멈추는 현상이다. GC튜닝은 바로 이 시간을 줄이는 것을
뜻한다.`),Ys.forEach(s),b=f(W),g=p(W,"H2",{id:!0});var Ws=o(g);ms=p(Ws,"A",{href:!0});var os=o(ms);hs=c(os,"JVM 메모리 영역"),os.forEach(s),Ws.forEach(s),ds=f(W),as=p(W,"P",{});var N=o(as);is=c(N,"JVM의 메모리는 클래스 영역, 자바 스택, 힙, 네이티브 메소드 스택 이렇게 4개 영역으로 나뉜다. 자바에서의 GC는 "),S=p(N,"STRONG",{});var Rs=o(S);ys=c(Rs,"힙 메모리"),Rs.forEach(s),O=c(N,"를 다루게 된다."),N.forEach(s),ks=f(W),bs=p(W,"H2",{id:!0});var nn=o(bs);j=p(nn,"A",{href:!0});var Vs=o(j);vs=c(Vs,"힙메모리 영역 청소 과정"),Vs.forEach(s),nn.forEach(s),ls=f(W),Ps=p(W,"P",{});var gs=o(Ps);Is=p(gs,"IMG",{src:!0,alt:!0}),xs=c(gs,`
힙메모리는 또 Young, Old, Perm 영역으로 나뉜다. Young 영역에서 발생한 GC를 Minor GC, 두 영역에서 발생한 GC를 Major GC라고 한다.
메모리에 객체가 생성되면 eden 영역에 객체가 지정된다. 데이터가 어느 정도 쌓이면 이 영역에 있던 객체가 다른 곳으로 옮겨지거나 삭제된다. 이때 옮겨가는 위치가 survivor space라 고 불린다. 그러다가
더 큰 객체가 생성되어 Young 영역에 공간이 남지 않으면 객체들은 Old 영역으로 이동하게 된다.`),gs.forEach(s),this.h()},h(){m(r,"href","#키워드-정리"),m(a,"id","키워드-정리"),m(rs,"href","#gc란"),m(_s,"id","gc란"),m(ms,"href","#jvm-메모리-영역"),m(g,"id","jvm-메모리-영역"),m(j,"href","#힙메모리-영역-청소-과정"),m(bs,"id","힙메모리-영역-청소-과정"),Qp(Is.src,Ls="/imgs/hear_structure.png")||m(Is,"src",Ls),m(Is,"alt","hear_structure")},m(W,ws){l(W,a,ws),n(a,r),n(r,_),l(W,v,ws),l(W,t,ws),n(t,k),n(k,d),n(t,L),n(t,M),n(M,us),n(t,C),n(t,I),n(I,es),n(t,X),n(t,A),n(A,Q),n(t,B),n(t,q),n(q,ps),l(W,V,ws),l(W,z,ws),l(W,K,ws),l(W,_s,ws),n(_s,rs),n(rs,ss),l(W,Es,ws),l(W,fs,ws),n(fs,Y),l(W,ts,ws),l(W,Z,ws),n(Z,D),l(W,F,ws),l(W,ns,ws),n(ns,x),l(W,b,ws),l(W,g,ws),n(g,ms),n(ms,hs),l(W,ds,ws),l(W,as,ws),n(as,is),n(as,S),n(S,ys),n(as,O),l(W,ks,ws),l(W,bs,ws),n(bs,j),n(j,vs),l(W,ls,ws),l(W,Ps,ws),n(Ps,Is),n(Ps,xs)},p:Vn,d(W){W&&s(a),W&&s(v),W&&s(t),W&&s(V),W&&s(z),W&&s(K),W&&s(_s),W&&s(Es),W&&s(fs),W&&s(ts),W&&s(Z),W&&s(F),W&&s(ns),W&&s(b),W&&s(g),W&&s(ds),W&&s(as),W&&s(ks),W&&s(bs),W&&s(ls),W&&s(Ps)}}}function ro(E){let a,r;const _=[E[0],ye];let v={$$slots:{default:[co]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(ye)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const ye={title:"가비지 컬렉션",summary:"",date:"2024-05-13",tags:["개발","JAVA"]};function io(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let fo=class extends Hn{constructor(a){super(),jn(this,a,io,ro,Rn,{})}};const ko=Object.freeze(Object.defineProperty({__proto__:null,default:fo,metadata:ye},Symbol.toStringTag,{value:"Module"}));function _o(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss=`<code class="language-java"><span class="token comment">/* 
짝수 값만 선택하고 입력을 두 배로 늘려서 리스트로 반환하는 스트림 적용 
*/</span>
<span class="token class-name">List</span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span> result <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>e <span class="token operator">-></span> <span class="token punctuation">(</span>e <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>e <span class="token operator">-></span> e <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns=`<code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">Gender</span> gender<span class="token punctuation">;</span>
	<span class="token class-name">String</span> name<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token class-name">Gender</span> <span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> gender<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> name<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">enum</span> <span class="token class-name">Gender</span> <span class="token punctuation">&#123;</span> <span class="token constant">MALE</span><span class="token punctuation">,</span> <span class="token constant">FEMALE</span><span class="token punctuation">,</span> <span class="token constant">OTHER</span> <span class="token punctuation">&#125;</span> </code>`,Hs,Gs,w,h,$s,Zs,Fs,As,Ys=`<code class="language-java"><span class="token class-name">List</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">List</span> people <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
people<span class="token punctuation">.</span><span class="token function">steam</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Gender</span><span class="token punctuation">.</span><span class="token constant">FEMALE</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>
<span class="token operator">*</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>name <span class="token operator">-></span> names<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">*</span></code>`,Ws,os,N,Rs,nn,Vs,gs,G,Ts,Xs,H,P,js,sn,qs,cs,Us,an,ln=`<code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Cathy"</span><span class="token punctuation">,</span> <span class="token string">"Alba"</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,fn,un,pn,kn,on,En=`<code class="language-java"><span class="token class-name">Stream</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token string">"Cathy"</span><span class="token punctuation">,</span> <span class="token string">"Alba"</span><span class="token punctuation">,</span> <span class="token string">"Beth"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token function">filter</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token punctuation">&#123;</span>
<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"filter: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>s <span class="token operator">-></span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"forEach: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,dn,mn,en,hn,rn,Ln=`<code class="language-java">filter<span class="token operator">:</span> <span class="token class-name">Cathy</span>
forEach<span class="token operator">:</span> <span class="token class-name">Cathy</span>
filter<span class="token operator">:</span> <span class="token class-name">Alba</span>
forEach<span class="token operator">:</span> <span class="token class-name">Alba</span>
filter<span class="token operator">:</span> <span class="token class-name">Beth</span>
forEach<span class="token operator">:</span> <span class="token class-name">Beth</span></code>`,Pn,wn,cn,yn,Jn,vn,_n,bn,Un,Mn=`<code class="language-java"><span class="token class-name">List</span> people <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token class-name">List</span> name <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Gender</span><span class="token punctuation">.</span><span class="token constant">FEMALE</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,Sn,An,Xn,$n,zn,gn,Bn,Fn,sa=`<code class="language-java"><span class="token class-name">List</span> people <span class="token operator">=</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">></span></span> names <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">-></span> p<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,J,Js,In,ta,xn,qn,T,Ds,ra,ka,_a,ma,Aa,ya,pa,Ia=`<code class="language-java"><span class="token class-name">Stream</span> names <span class="token operator">=</span> people<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>p <span class="token operator">-></span> p<span class="token punctuation">.</span><span class="token function">getGender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Gender</span><span class="token punctuation">.</span><span class="token constant">FEMALE</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">toUpperCase</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,va,oa,na,ia,ea,ua,Ea,Zn,Ta,Pa,Kn,ca,da,R,zs,ja,wa,la,$,Bs,Ra,Ma,ba,ha,Oa,Da,aa,$a,Ua,La,Sa,Ba,Ca,fa,Na,Fa,xa,Qn;return{c(){a=e("h2"),r=e("a"),_=u("Stream 이란?"),v=i(),t=e("p"),k=u("자바 "),d=e("strong"),L=u("스트림은 순서로 적용되고 변경할 수 없는 함수 모음을 추상화한 것"),M=u("입니다. 스트림과 스트럭처에 가장 중요한 차이점은 "),us=e("strong"),C=u("스트림이 데이터를 보유하지 않는다는 것"),I=u(`입니다.
해당 데이터에 대해 작동하는 기능만 지정할 수 있고, 스트림에서 작업을 수행하면 원본 스트림에 영향을 미칩니다.`),es=i(),X=e("h2"),A=e("a"),Q=u("스트림을 사용하는 경우"),B=i(),q=e("p"),ps=u("스트림은 데이터가 흐르는 파이프라인과 데이터에서 작동하는 기능을 나타냅니다. 이 파이프라인은 "),V=e("strong"),z=u("스트림 소스, 0개 이상의 중간작업, 터미널 작업"),K=u(`으로 구성됩니다.
따라서 스트림은 데이터 기반 기능과 관련된 다양한 애플리케이션에서 사용할 수 있습니다.`),_s=i(),rs=e("pre"),Es=i(),fs=e("h2"),Y=e("a"),ts=u("Java 스트림의 일반적인 작업"),Z=i(),D=e("p"),F=u("java 8 이상에서는 stream() 메서드를 호출하여 모든 컬렉션에서 스트림을 쉽게 얻을 수 있습니다. 다음에는 항상 접하게 될 몇 가지 기본 기능이 있습니다."),ns=i(),x=e("ul"),b=e("li"),g=u("filter(): 원본의 일부 요소를 포함하는 새 스트림을 반환합니다. 새 스트림에 반환되어야 하는 요소를 계산하기 위해 "),ms=e("strong"),hs=u("조건자를 수락하고 나머지는 제거"),ds=u("합니다."),as=i(),is=e("li"),S=u("map(): 스트림 요소를 다른 것으로 변환하고, 스트림의 모든 요소에 적용할 함수를 받아들이고, 매개변수 함수가 생성한 값의 스트림을 반환합니다. Map을 사용하면 스트림 내부의 데이터에 대한 계산을 수행할 수 있습니다."),ys=i(),O=e("li"),ks=u("reduce(): 스트림을 단일 요소로 축소합니다. 모든 정수 값을 합산하려면 이 기능을 사용하면 됩니다."),bs=i(),j=e("li"),vs=u("collect(): 스트림에서 벗어나 List와 같은 구체적인 값 컬렉션을 얻는 방법입니다."),ls=i(),Ps=e("h2"),Is=e("a"),Ls=u("스트림 예: 피해야 할 잠재적인 문제"),xs=i(),W=e("p"),ws=u("java streaming api를 사용할 때 몇 가지 주의 사항이 있으며 때로는 스트림 처리가 불가능해질 수 있습니다."),Ss=i(),Ms=e("pre"),Hs=i(),Gs=e("p"),w=u("이는 필드에 일부 게터가 있는 일반적인 "),h=e("a"),$s=u("Java Bean"),Zs=u("입니다. 이제 이러한 사람의 목록이 있고 해당 목록에 있는 모든 “Female” 사람의 대문자 이름 목록을 가져오고 싶다고 가정해 보겠습니다."),Fs=i(),As=e("pre"),Ws=i(),os=e("p"),N=u("우리는 모든 단계에서 수행해야 할 작업의 사양을 따르지만 문제는 공유 상태의 변형에 있습니다. 우리는 스트림의 성격에 대해 전혀 알지 못하며 "),Rs=e("strong"),nn=u("스트림이 병렬인 경우 스트림에 요소를 동시에 추가하면 오류가 발생"),Vs=u("할 수 있습니다."),gs=i(),G=e("h3"),Ts=e("a"),Xs=u("피해야 할 또 다른문제"),H=i(),P=e("p"),js=u("중간 작업만 지정되고 터미널 작업이 실수로 누락된 경우 출력에 아무것도 표시되지 않습니다. 이는 터미널 작업이 있을 때만 중간 작업이 실행되기 때문입니다."),sn=i(),qs=e("p"),cs=u("예를 들어 다음 코드는 출력을 인쇄하지 않습니다."),Us=i(),an=e("pre"),fn=i(),un=e("p"),pn=u("각 요소가 모든 작업을 통과하기 때문에 출력 순서는 다소 놀랍습니다. 일부 프로그래머가 가정하는 것과는 달리 모든 요소는 먼저 filter()를 통과한 다음 forEach()를 통과합니다). 예를 들어"),kn=i(),on=e("pre"),dn=i(),mn=e("p"),en=u("출력은 다음과 같습니다."),hn=i(),rn=e("pre"),Pn=i(),wn=e("h2"),cn=e("a"),yn=u("동시성 오류를 방지하기 위해 Java Stream Collect 사용"),Jn=i(),vn=e("p"),_n=u("대신 스트림을 결과 목록으로 수집하여 동시성과 가변성이 스트림 프레임워크의 책임이 되도록 해야 합니다. 이를 수행하는 방법의 예는 다음과 같습니다."),bn=i(),Un=e("pre"),Sn=i(),An=e("p"),Xn=u("일반적으로 Collectors 클래스는 스트림을 구체적인 컬렉션으로 변환하는 데 필요한 거의 모든 기본 요소를 제공합니다. 한 가지 예는 toMap() 수집기 입니다. 요소를 맵에 필요한 키-쌍 값으로 변환하는 방법에 대해 혼란스러울 수 있습니다."),$n=i(),zn=e("p"),gn=u("이렇게 하려면 요소를 키로 변환하는 함수와 값을 생성하는 또 다른 함수를 지정합니다. 다음은 동일한 사람들의 흐름을 지도에 수집하는 예입니다."),Bn=i(),Fn=e("pre"),J=i(),Js=e("p"),In=u("toMap 메소드에 제공된 첫 번째 함수는 요소를 키로 변환하고 두 번째 함수는 맵의 값으로 변환합니다."),ta=i(),xn=e("h2"),qn=e("a"),T=u("Java Stream Intermediate 및 터미널 작업"),Ds=i(),ra=e("p"),ka=u("java 스트림의 장점 중 하나는 느리게 평가된다는 것입니다.스트림에 대한 일부 작업, 특히 스트림의 인스턴스를 반환하는 함수인 filter, map을 Middle 이라고 합니다. 이는 지정 시 평가되지 않음을 의미합니다. 이는 지정 시 평가되지 않음을 의미합니다. 대신 해당 작업의 결과가 필요할 때 계산이 수행됩니다."),_a=i(),ma=e("p"),Aa=u("즉, 다음과 같이 코드를 지정하면 됩니다."),ya=i(),pa=e("pre"),va=i(),oa=e("p"),na=u("어떤 이름도 즉시 수집되어 대문자로 표시되지 않습니다. 그렇다면 계산은 언제 이루어질까요? 터미널 작업이 호출 될 때 작동됩니다."),ia=i(),ea=e("p"),ua=u("스트림 이외의 것을 반환하는 모든 작업은 터미널 입니다. forEach, Collect, Reduce와 같은 작업은 터미널입니다. 이는 대량의 데이터를 처리할 때 스트림을 특히 효율적으로 만듭니다."),Ea=i(),Zn=e("p"),Ta=u("성능 관점에서 중간 작업의 순서는 매우 중요합니다."),Pa=i(),Kn=e("p"),ca=u("예를 들어, map()이 filter()보다 먼저 지정되면 map()이 여러 번 호출됩니다. 그러나 map()보다 먼저 filter()를 지정하면 map()이 한 번만 호출되므로 성능이 향상됩니다."),da=i(),R=e("h2"),zs=e("a"),ja=u("키워드"),wa=i(),la=e("ul"),$=e("li"),Bs=u("순서로 적용되고 변경할수 없는 함수들을 추상화한것"),Ra=i(),Ma=e("li"),ba=u("데이터에 대해 작동하는 기능에 대해 적용"),ha=i(),Oa=e("li"),Da=u("일반적인 작업"),aa=e("ul"),$a=e("li"),Ua=u("filter"),La=i(),Sa=e("li"),Ba=u("map"),Ca=i(),fa=e("li"),Na=u("reduce"),Fa=i(),xa=e("li"),Qn=u("collect"),this.h()},l(y){a=p(y,"H2",{id:!0});var Cs=o(a);r=p(Cs,"A",{href:!0});var Qa=o(r);_=c(Qa,"Stream 이란?"),Qa.forEach(s),Cs.forEach(s),v=f(y),t=p(y,"P",{});var Ga=o(t);k=c(Ga,"자바 "),d=p(Ga,"STRONG",{});var Za=o(d);L=c(Za,"스트림은 순서로 적용되고 변경할 수 없는 함수 모음을 추상화한 것"),Za.forEach(s),M=c(Ga,"입니다. 스트림과 스트럭처에 가장 중요한 차이점은 "),us=p(Ga,"STRONG",{});var Ja=o(us);C=c(Ja,"스트림이 데이터를 보유하지 않는다는 것"),Ja.forEach(s),I=c(Ga,`입니다.
해당 데이터에 대해 작동하는 기능만 지정할 수 있고, 스트림에서 작업을 수행하면 원본 스트림에 영향을 미칩니다.`),Ga.forEach(s),es=f(y),X=p(y,"H2",{id:!0});var Wa=o(X);A=p(Wa,"A",{href:!0});var Pt=o(A);Q=c(Pt,"스트림을 사용하는 경우"),Pt.forEach(s),Wa.forEach(s),B=f(y),q=p(y,"P",{});var kt=o(q);ps=c(kt,"스트림은 데이터가 흐르는 파이프라인과 데이터에서 작동하는 기능을 나타냅니다. 이 파이프라인은 "),V=p(kt,"STRONG",{});var at=o(V);z=c(at,"스트림 소스, 0개 이상의 중간작업, 터미널 작업"),at.forEach(s),K=c(kt,`으로 구성됩니다.
따라서 스트림은 데이터 기반 기능과 관련된 다양한 애플리케이션에서 사용할 수 있습니다.`),kt.forEach(s),_s=f(y),rs=p(y,"PRE",{class:!0});var wt=o(rs);wt.forEach(s),Es=f(y),fs=p(y,"H2",{id:!0});var ga=o(fs);Y=p(ga,"A",{href:!0});var tt=o(Y);ts=c(tt,"Java 스트림의 일반적인 작업"),tt.forEach(s),ga.forEach(s),Z=f(y),D=p(y,"P",{});var _t=o(D);F=c(_t,"java 8 이상에서는 stream() 메서드를 호출하여 모든 컬렉션에서 스트림을 쉽게 얻을 수 있습니다. 다음에는 항상 접하게 될 몇 가지 기본 기능이 있습니다."),_t.forEach(s),ns=f(y),x=p(y,"UL",{});var Va=o(x);b=p(Va,"LI",{});var Xa=o(b);g=c(Xa,"filter(): 원본의 일부 요소를 포함하는 새 스트림을 반환합니다. 새 스트림에 반환되어야 하는 요소를 계산하기 위해 "),ms=p(Xa,"STRONG",{});var mt=o(ms);hs=c(mt,"조건자를 수락하고 나머지는 제거"),mt.forEach(s),ds=c(Xa,"합니다."),Xa.forEach(s),as=f(Va),is=p(Va,"LI",{});var Ya=o(is);S=c(Ya,"map(): 스트림 요소를 다른 것으로 변환하고, 스트림의 모든 요소에 적용할 함수를 받아들이고, 매개변수 함수가 생성한 값의 스트림을 반환합니다. Map을 사용하면 스트림 내부의 데이터에 대한 계산을 수행할 수 있습니다."),Ya.forEach(s),ys=f(Va),O=p(Va,"LI",{});var et=o(O);ks=c(et,"reduce(): 스트림을 단일 요소로 축소합니다. 모든 정수 값을 합산하려면 이 기능을 사용하면 됩니다."),et.forEach(s),bs=f(Va),j=p(Va,"LI",{});var pt=o(j);vs=c(pt,"collect(): 스트림에서 벗어나 List와 같은 구체적인 값 컬렉션을 얻는 방법입니다."),pt.forEach(s),Va.forEach(s),ls=f(y),Ps=p(y,"H2",{id:!0});var vt=o(Ps);Is=p(vt,"A",{href:!0});var st=o(Is);Ls=c(st,"스트림 예: 피해야 할 잠재적인 문제"),st.forEach(s),vt.forEach(s),xs=f(y),W=p(y,"P",{});var Et=o(W);ws=c(Et,"java streaming api를 사용할 때 몇 가지 주의 사항이 있으며 때로는 스트림 처리가 불가능해질 수 있습니다."),Et.forEach(s),Ss=f(y),Ms=p(y,"PRE",{class:!0});var rt=o(Ms);rt.forEach(s),Hs=f(y),Gs=p(y,"P",{});var Ka=o(Gs);w=c(Ka,"이는 필드에 일부 게터가 있는 일반적인 "),h=p(Ka,"A",{href:!0});var dt=o(h);$s=c(dt,"Java Bean"),dt.forEach(s),Zs=c(Ka,"입니다. 이제 이러한 사람의 목록이 있고 해당 목록에 있는 모든 “Female” 사람의 대문자 이름 목록을 가져오고 싶다고 가정해 보겠습니다."),Ka.forEach(s),Fs=f(y),As=p(y,"PRE",{class:!0});var bt=o(As);bt.forEach(s),Ws=f(y),os=p(y,"P",{});var za=o(os);N=c(za,"우리는 모든 단계에서 수행해야 할 작업의 사양을 따르지만 문제는 공유 상태의 변형에 있습니다. 우리는 스트림의 성격에 대해 전혀 알지 못하며 "),Rs=p(za,"STRONG",{});var ht=o(Rs);nn=c(ht,"스트림이 병렬인 경우 스트림에 요소를 동시에 추가하면 오류가 발생"),ht.forEach(s),Vs=c(za,"할 수 있습니다."),za.forEach(s),gs=f(y),G=p(y,"H3",{id:!0});var qa=o(G);Ts=p(qa,"A",{href:!0});var Ha=o(Ts);Xs=c(Ha,"피해야 할 또 다른문제"),Ha.forEach(s),qa.forEach(s),H=f(y),P=p(y,"P",{});var it=o(P);js=c(it,"중간 작업만 지정되고 터미널 작업이 실수로 누락된 경우 출력에 아무것도 표시되지 않습니다. 이는 터미널 작업이 있을 때만 중간 작업이 실행되기 때문입니다."),it.forEach(s),sn=f(y),qs=p(y,"P",{});var yt=o(qs);cs=c(yt,"예를 들어 다음 코드는 출력을 인쇄하지 않습니다."),yt.forEach(s),Us=f(y),an=p(y,"PRE",{class:!0});var lt=o(an);lt.forEach(s),fn=f(y),un=p(y,"P",{});var ot=o(un);pn=c(ot,"각 요소가 모든 작업을 통과하기 때문에 출력 순서는 다소 놀랍습니다. 일부 프로그래머가 가정하는 것과는 달리 모든 요소는 먼저 filter()를 통과한 다음 forEach()를 통과합니다). 예를 들어"),ot.forEach(s),kn=f(y),on=p(y,"PRE",{class:!0});var ft=o(on);ft.forEach(s),dn=f(y),mn=p(y,"P",{});var nt=o(mn);en=c(nt,"출력은 다음과 같습니다."),nt.forEach(s),hn=f(y),rn=p(y,"PRE",{class:!0});var Tt=o(rn);Tt.forEach(s),Pn=f(y),wn=p(y,"H2",{id:!0});var U=o(wn);cn=p(U,"A",{href:!0});var tn=o(cn);yn=c(tn,"동시성 오류를 방지하기 위해 Java Stream Collect 사용"),tn.forEach(s),U.forEach(s),Jn=f(y),vn=p(y,"P",{});var It=o(vn);_n=c(It,"대신 스트림을 결과 목록으로 수집하여 동시성과 가변성이 스트림 프레임워크의 책임이 되도록 해야 합니다. 이를 수행하는 방법의 예는 다음과 같습니다."),It.forEach(s),bn=f(y),Un=p(y,"PRE",{class:!0});var Ct=o(Un);Ct.forEach(s),Sn=f(y),An=p(y,"P",{});var xt=o(An);Xn=c(xt,"일반적으로 Collectors 클래스는 스트림을 구체적인 컬렉션으로 변환하는 데 필요한 거의 모든 기본 요소를 제공합니다. 한 가지 예는 toMap() 수집기 입니다. 요소를 맵에 필요한 키-쌍 값으로 변환하는 방법에 대해 혼란스러울 수 있습니다."),xt.forEach(s),$n=f(y),zn=p(y,"P",{});var Ht=o(zn);gn=c(Ht,"이렇게 하려면 요소를 키로 변환하는 함수와 값을 생성하는 또 다른 함수를 지정합니다. 다음은 동일한 사람들의 흐름을 지도에 수집하는 예입니다."),Ht.forEach(s),Bn=f(y),Fn=p(y,"PRE",{class:!0});var ut=o(Fn);ut.forEach(s),J=f(y),Js=p(y,"P",{});var Bt=o(Js);In=c(Bt,"toMap 메소드에 제공된 첫 번째 함수는 요소를 키로 변환하고 두 번째 함수는 맵의 값으로 변환합니다."),Bt.forEach(s),ta=f(y),xn=p(y,"H2",{id:!0});var Ft=o(xn);qn=p(Ft,"A",{href:!0});var Jt=o(qn);T=c(Jt,"Java Stream Intermediate 및 터미널 작업"),Jt.forEach(s),Ft.forEach(s),Ds=f(y),ra=p(y,"P",{});var zt=o(ra);ka=c(zt,"java 스트림의 장점 중 하나는 느리게 평가된다는 것입니다.스트림에 대한 일부 작업, 특히 스트림의 인스턴스를 반환하는 함수인 filter, map을 Middle 이라고 합니다. 이는 지정 시 평가되지 않음을 의미합니다. 이는 지정 시 평가되지 않음을 의미합니다. 대신 해당 작업의 결과가 필요할 때 계산이 수행됩니다."),zt.forEach(s),_a=f(y),ma=p(y,"P",{});var qt=o(ma);Aa=c(qt,"즉, 다음과 같이 코드를 지정하면 됩니다."),qt.forEach(s),ya=f(y),pa=p(y,"PRE",{class:!0});var te=o(pa);te.forEach(s),va=f(y),oa=p(y,"P",{});var Vt=o(oa);na=c(Vt,"어떤 이름도 즉시 수집되어 대문자로 표시되지 않습니다. 그렇다면 계산은 언제 이루어질까요? 터미널 작업이 호출 될 때 작동됩니다."),Vt.forEach(s),ia=f(y),ea=p(y,"P",{});var Yt=o(ea);ua=c(Yt,"스트림 이외의 것을 반환하는 모든 작업은 터미널 입니다. forEach, Collect, Reduce와 같은 작업은 터미널입니다. 이는 대량의 데이터를 처리할 때 스트림을 특히 효율적으로 만듭니다."),Yt.forEach(s),Ea=f(y),Zn=p(y,"P",{});var Wt=o(Zn);Ta=c(Wt,"성능 관점에서 중간 작업의 순서는 매우 중요합니다."),Wt.forEach(s),Pa=f(y),Kn=p(y,"P",{});var Xt=o(Kn);ca=c(Xt,"예를 들어, map()이 filter()보다 먼저 지정되면 map()이 여러 번 호출됩니다. 그러나 map()보다 먼저 filter()를 지정하면 map()이 한 번만 호출되므로 성능이 향상됩니다."),Xt.forEach(s),da=f(y),R=p(y,"H2",{id:!0});var Kt=o(R);zs=p(Kt,"A",{href:!0});var $t=o(zs);ja=c($t,"키워드"),$t.forEach(s),Kt.forEach(s),wa=f(y),la=p(y,"UL",{});var Ot=o(la);$=p(Ot,"LI",{});var Qt=o($);Bs=c(Qt,"순서로 적용되고 변경할수 없는 함수들을 추상화한것"),Qt.forEach(s),Ra=f(Ot),Ma=p(Ot,"LI",{});var Zt=o(Ma);ba=c(Zt,"데이터에 대해 작동하는 기능에 대해 적용"),Zt.forEach(s),ha=f(Ot),Oa=p(Ot,"LI",{});var Nt=o(Oa);Da=c(Nt,"일반적인 작업"),aa=p(Nt,"UL",{});var Lt=o(aa);$a=p(Lt,"LI",{});var gt=o($a);Ua=c(gt,"filter"),gt.forEach(s),La=f(Lt),Sa=p(Lt,"LI",{});var se=o(Sa);Ba=c(se,"map"),se.forEach(s),Ca=f(Lt),fa=p(Lt,"LI",{});var ne=o(fa);Na=c(ne,"reduce"),ne.forEach(s),Fa=f(Lt),xa=p(Lt,"LI",{});var ae=o(xa);Qn=c(ae,"collect"),ae.forEach(s),Lt.forEach(s),Nt.forEach(s),Ot.forEach(s),this.h()},h(){m(r,"href","#stream-이란"),m(a,"id","stream-이란"),m(A,"href","#스트림을-사용하는-경우"),m(X,"id","스트림을-사용하는-경우"),m(rs,"class","language-java"),m(Y,"href","#java-스트림의-일반적인-작업"),m(fs,"id","java-스트림의-일반적인-작업"),m(Is,"href","#스트림-예-피해야-할-잠재적인-문제"),m(Ps,"id","스트림-예-피해야-할-잠재적인-문제"),m(Ms,"class","language-java"),m(h,"href","/wikis/JAVA/Bean"),m(As,"class","language-java"),m(Ts,"href","#피해야-할-또-다른문제"),m(G,"id","피해야-할-또-다른문제"),m(an,"class","language-java"),m(on,"class","language-java"),m(rn,"class","language-java"),m(cn,"href","#동시성-오류를-방지하기-위해-java-stream-collect-사용"),m(wn,"id","동시성-오류를-방지하기-위해-java-stream-collect-사용"),m(Un,"class","language-java"),m(Fn,"class","language-java"),m(qn,"href","#java-stream-intermediate-및-터미널-작업"),m(xn,"id","java-stream-intermediate-및-터미널-작업"),m(pa,"class","language-java"),m(zs,"href","#키워드"),m(R,"id","키워드")},m(y,Cs){l(y,a,Cs),n(a,r),n(r,_),l(y,v,Cs),l(y,t,Cs),n(t,k),n(t,d),n(d,L),n(t,M),n(t,us),n(us,C),n(t,I),l(y,es,Cs),l(y,X,Cs),n(X,A),n(A,Q),l(y,B,Cs),l(y,q,Cs),n(q,ps),n(q,V),n(V,z),n(q,K),l(y,_s,Cs),l(y,rs,Cs),rs.innerHTML=ss,l(y,Es,Cs),l(y,fs,Cs),n(fs,Y),n(Y,ts),l(y,Z,Cs),l(y,D,Cs),n(D,F),l(y,ns,Cs),l(y,x,Cs),n(x,b),n(b,g),n(b,ms),n(ms,hs),n(b,ds),n(x,as),n(x,is),n(is,S),n(x,ys),n(x,O),n(O,ks),n(x,bs),n(x,j),n(j,vs),l(y,ls,Cs),l(y,Ps,Cs),n(Ps,Is),n(Is,Ls),l(y,xs,Cs),l(y,W,Cs),n(W,ws),l(y,Ss,Cs),l(y,Ms,Cs),Ms.innerHTML=Ns,l(y,Hs,Cs),l(y,Gs,Cs),n(Gs,w),n(Gs,h),n(h,$s),n(Gs,Zs),l(y,Fs,Cs),l(y,As,Cs),As.innerHTML=Ys,l(y,Ws,Cs),l(y,os,Cs),n(os,N),n(os,Rs),n(Rs,nn),n(os,Vs),l(y,gs,Cs),l(y,G,Cs),n(G,Ts),n(Ts,Xs),l(y,H,Cs),l(y,P,Cs),n(P,js),l(y,sn,Cs),l(y,qs,Cs),n(qs,cs),l(y,Us,Cs),l(y,an,Cs),an.innerHTML=ln,l(y,fn,Cs),l(y,un,Cs),n(un,pn),l(y,kn,Cs),l(y,on,Cs),on.innerHTML=En,l(y,dn,Cs),l(y,mn,Cs),n(mn,en),l(y,hn,Cs),l(y,rn,Cs),rn.innerHTML=Ln,l(y,Pn,Cs),l(y,wn,Cs),n(wn,cn),n(cn,yn),l(y,Jn,Cs),l(y,vn,Cs),n(vn,_n),l(y,bn,Cs),l(y,Un,Cs),Un.innerHTML=Mn,l(y,Sn,Cs),l(y,An,Cs),n(An,Xn),l(y,$n,Cs),l(y,zn,Cs),n(zn,gn),l(y,Bn,Cs),l(y,Fn,Cs),Fn.innerHTML=sa,l(y,J,Cs),l(y,Js,Cs),n(Js,In),l(y,ta,Cs),l(y,xn,Cs),n(xn,qn),n(qn,T),l(y,Ds,Cs),l(y,ra,Cs),n(ra,ka),l(y,_a,Cs),l(y,ma,Cs),n(ma,Aa),l(y,ya,Cs),l(y,pa,Cs),pa.innerHTML=Ia,l(y,va,Cs),l(y,oa,Cs),n(oa,na),l(y,ia,Cs),l(y,ea,Cs),n(ea,ua),l(y,Ea,Cs),l(y,Zn,Cs),n(Zn,Ta),l(y,Pa,Cs),l(y,Kn,Cs),n(Kn,ca),l(y,da,Cs),l(y,R,Cs),n(R,zs),n(zs,ja),l(y,wa,Cs),l(y,la,Cs),n(la,$),n($,Bs),n(la,Ra),n(la,Ma),n(Ma,ba),n(la,ha),n(la,Oa),n(Oa,Da),n(Oa,aa),n(aa,$a),n($a,Ua),n(aa,La),n(aa,Sa),n(Sa,Ba),n(aa,Ca),n(aa,fa),n(fa,Na),n(aa,Fa),n(aa,xa),n(xa,Qn)},p:Vn,d(y){y&&s(a),y&&s(v),y&&s(t),y&&s(es),y&&s(X),y&&s(B),y&&s(q),y&&s(_s),y&&s(rs),y&&s(Es),y&&s(fs),y&&s(Z),y&&s(D),y&&s(ns),y&&s(x),y&&s(ls),y&&s(Ps),y&&s(xs),y&&s(W),y&&s(Ss),y&&s(Ms),y&&s(Hs),y&&s(Gs),y&&s(Fs),y&&s(As),y&&s(Ws),y&&s(os),y&&s(gs),y&&s(G),y&&s(H),y&&s(P),y&&s(sn),y&&s(qs),y&&s(Us),y&&s(an),y&&s(fn),y&&s(un),y&&s(kn),y&&s(on),y&&s(dn),y&&s(mn),y&&s(hn),y&&s(rn),y&&s(Pn),y&&s(wn),y&&s(Jn),y&&s(vn),y&&s(bn),y&&s(Un),y&&s(Sn),y&&s(An),y&&s($n),y&&s(zn),y&&s(Bn),y&&s(Fn),y&&s(J),y&&s(Js),y&&s(ta),y&&s(xn),y&&s(Ds),y&&s(ra),y&&s(_a),y&&s(ma),y&&s(ya),y&&s(pa),y&&s(va),y&&s(oa),y&&s(ia),y&&s(ea),y&&s(Ea),y&&s(Zn),y&&s(Pa),y&&s(Kn),y&&s(da),y&&s(R),y&&s(wa),y&&s(la)}}}function mo(E){let a,r;const _=[E[0],Pe];let v={$$slots:{default:[_o]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Pe)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Pe={title:"Stream",summary:"",date:"2024-05-13",tags:["JAVA"]};function vo(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Eo=class extends Hn{constructor(a){super(),jn(this,a,vo,mo,Rn,{})}};const ho=Object.freeze(Object.defineProperty({__proto__:null,default:Eo,metadata:Pe},Symbol.toStringTag,{value:"Module"}));function yo(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as;return{c(){a=e("h2"),r=e("a"),_=u("코딩테스트를 위한 주요 알고리즘"),v=i(),t=e("ul"),k=e("li"),d=e("input"),L=u(" 코딩 테스트 팁"),M=i(),us=e("li"),C=e("input"),I=u(" 정렬"),es=i(),X=e("li"),A=e("input"),Q=u(" 배열"),B=i(),q=e("li"),ps=e("input"),V=u(" DFS"),z=i(),K=e("li"),_s=e("input"),rs=u(" BFS"),ss=i(),Es=e("li"),fs=e("input"),Y=u(" 탐색"),ts=i(),Z=e("li"),D=e("input"),F=u(" 스택, 큐, 우선순위 큐"),ns=i(),x=e("li"),b=e("input"),g=u(" LRO, LFO"),ms=i(),hs=e("li"),ds=e("input"),as=u(" LinkedList, LinkedHashMap"),this.h()},l(is){a=p(is,"H2",{id:!0});var S=o(a);r=p(S,"A",{href:!0});var ys=o(r);_=c(ys,"코딩테스트를 위한 주요 알고리즘"),ys.forEach(s),S.forEach(s),v=f(is),t=p(is,"UL",{class:!0});var O=o(t);k=p(O,"LI",{class:!0});var ks=o(k);d=p(ks,"INPUT",{type:!0}),L=c(ks," 코딩 테스트 팁"),ks.forEach(s),M=f(O),us=p(O,"LI",{class:!0});var bs=o(us);C=p(bs,"INPUT",{type:!0}),I=c(bs," 정렬"),bs.forEach(s),es=f(O),X=p(O,"LI",{class:!0});var j=o(X);A=p(j,"INPUT",{type:!0}),Q=c(j," 배열"),j.forEach(s),B=f(O),q=p(O,"LI",{class:!0});var vs=o(q);ps=p(vs,"INPUT",{type:!0}),V=c(vs," DFS"),vs.forEach(s),z=f(O),K=p(O,"LI",{class:!0});var ls=o(K);_s=p(ls,"INPUT",{type:!0}),rs=c(ls," BFS"),ls.forEach(s),ss=f(O),Es=p(O,"LI",{class:!0});var Ps=o(Es);fs=p(Ps,"INPUT",{type:!0}),Y=c(Ps," 탐색"),Ps.forEach(s),ts=f(O),Z=p(O,"LI",{class:!0});var Is=o(Z);D=p(Is,"INPUT",{type:!0}),F=c(Is," 스택, 큐, 우선순위 큐"),Is.forEach(s),ns=f(O),x=p(O,"LI",{class:!0});var Ls=o(x);b=p(Ls,"INPUT",{type:!0}),g=c(Ls," LRO, LFO"),Ls.forEach(s),ms=f(O),hs=p(O,"LI",{class:!0});var xs=o(hs);ds=p(xs,"INPUT",{type:!0}),as=c(xs," LinkedList, LinkedHashMap"),xs.forEach(s),O.forEach(s),this.h()},h(){m(r,"href","#코딩테스트를-위한-주요-알고리즘"),m(a,"id","코딩테스트를-위한-주요-알고리즘"),m(d,"type","checkbox"),d.checked=!0,d.disabled=!0,m(k,"class","task-list-item"),m(C,"type","checkbox"),C.checked=!0,C.disabled=!0,m(us,"class","task-list-item"),m(A,"type","checkbox"),A.disabled=!0,m(X,"class","task-list-item"),m(ps,"type","checkbox"),ps.disabled=!0,m(q,"class","task-list-item"),m(_s,"type","checkbox"),_s.disabled=!0,m(K,"class","task-list-item"),m(fs,"type","checkbox"),fs.disabled=!0,m(Es,"class","task-list-item"),m(D,"type","checkbox"),D.disabled=!0,m(Z,"class","task-list-item"),m(b,"type","checkbox"),b.disabled=!0,m(x,"class","task-list-item"),m(ds,"type","checkbox"),ds.disabled=!0,m(hs,"class","task-list-item"),m(t,"class","contains-task-list")},m(is,S){l(is,a,S),n(a,r),n(r,_),l(is,v,S),l(is,t,S),n(t,k),n(k,d),n(k,L),n(t,M),n(t,us),n(us,C),n(us,I),n(t,es),n(t,X),n(X,A),n(X,Q),n(t,B),n(t,q),n(q,ps),n(q,V),n(t,z),n(t,K),n(K,_s),n(K,rs),n(t,ss),n(t,Es),n(Es,fs),n(Es,Y),n(t,ts),n(t,Z),n(Z,D),n(Z,F),n(t,ns),n(t,x),n(x,b),n(x,g),n(t,ms),n(t,hs),n(hs,ds),n(hs,as)},p:Vn,d(is){is&&s(a),is&&s(v),is&&s(t)}}}function Po(E){let a,r;const _=[E[0],we];let v={$$slots:{default:[yo]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(we)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const we={title:"알고리즘",summary:"코딩 테스트를 준비하는 데 필수적인 주요 알고리즘과 자료구조에 대해 알아봅니다. 정렬, 배열, DFS, BFS, 탐색 방법 및 스택, 큐, 우선순위 큐, 연결 리스트 및 연결 해시 맵의 사용을 포함합니다. 이 지식은 효율적인 소프트웨어 개발을 위한 기초를 마련합니다.",date:"2024-03-20",tags:["코딩테스트"]};function wo(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let bo=class extends Hn{constructor(a){super(),jn(this,a,wo,Po,Rn,{})}};const $o=Object.freeze(Object.defineProperty({__proto__:null,default:bo,metadata:we},Symbol.toStringTag,{value:"Module"}));function Lo(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 여기에 코드를 작성하세요.</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>

    <span class="token keyword">return</span> nums


<span class="token comment"># 테스트 케이스</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bubble_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 예상 출력: [2, 3, 4, 5, 8]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>bubble_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 예상 출력: [-5, 2, 3, 20]</span></code>`,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>

    <span class="token keyword">return</span> nums


<span class="token comment"># 테스트 케이스</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>selection_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 예상 출력: [10, 13, 14, 29, 37]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>selection_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 예상 출력: [2, 3, 4, 5, 8]</span></code>`,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is=`<code class="language-python"><span class="token keyword">def</span> <span class="token function">insertion_sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 여기에 코드를 작성하세요.</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        key <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token comment"># 현재 요소(key)보다 큰 요소들을 한 칸씩 오른쪽으로 이동</span>
        <span class="token keyword">while</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> key <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token comment"># 현재 요소를 적절한 위치에 삽입</span>
        nums<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key

    <span class="token keyword">return</span> nums


<span class="token comment"># 테스트 케이스</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>insertion_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 예상 출력: [2, 4, 5, 6, 8]</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>insertion_sort<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 예상 출력: [1, 2, 3, 7, 9]</span></code>`;return{c(){a=e("h3"),r=e("a"),_=u("버블소트"),v=i(),t=e("p"),k=u(`버블 정렬(Bubble Sort)은 가장 간단하고 기초적인 정렬 알고리즘 중 하나로, 인접한 두 요소를 비교해서 잘못된 순서(예: 오름차순 정렬에서 큰 수가 앞에 오는 경우)가 있을 때 위치를 바꾸는 방식으로
작동해. 이 과정을 배열의 모든 요소가 올바른 순서로 정렬될 때까지 반복하며, 이름은 이 과정 중에 큰 값들이 배열의 끝으로 ‘떠오른다(bubble up)‘는 데서 유래했어.`),d=i(),L=e("p"),M=u(`버블 정렬의 핵심은 두 가지 단계로 요약할 수 있어
비교 단계: 배열을 처음부터 끝까지 순회하면서, 각각의 인접한 요소 쌍을 비교한다.
교환 단계: 비교하는 두 요소가 잘못된 순서로 있으면, 이들의 위치를 서로 바꾼다.`),us=i(),C=e("p"),I=u(`이 알고리즘의 시간 복잡도는 평균과 최악의 경우 모두 n의 제곱으로 n은 배열의 길이를 나타낸다. 배열이 이미 정렬되어 있거나 거의 정렬된 상태인 경우에는 상대적으로 빠르게 작동할 수 있지만, 대체로 크기가 큰
데이터셋에는 비효율적이야. 그럼에도 불구하고, 이해하기 쉽고 구현하기 간단해서 알고리즘 학습의 첫 단계로 자주 소개되곤 해.`),es=i(),X=e("pre"),Q=i(),B=e("h3"),q=e("a"),ps=u("선택정렬"),V=i(),z=e("p"),K=u(`선택 정렬도 기본적인 정렬 알고리즘 중 하나로, 각 단계에서 정렬되지 않은 부분에서 최소값(또는 최대값)을 찾아 선택한 뒤, 그 값을 정렬된 부분의 다음 위치로 이동시키는 방식으로 동작해. 선택 정렬은 구현이
간단하며, 안정 정렬이 아니라는 특징을 가지고 있어.`),_s=i(),rs=e("p"),ss=u(`선택 정렬 알고리즘 구현 방법
배열 전체를 순회하며, 각 단계에서 현재 위치를 기준으로 가장 작은 요소를 찾아.
가장 작은 요소를 현재 위치의 요소와 교환해.
모든 요소가 올바르게 정렬될 때까지 이 과정을 반복해.`),Es=i(),fs=e("pre"),ts=i(),Z=e("h3"),D=e("a"),F=u("삽입정렬"),ns=i(),x=e("p"),b=u(`삽입 정렬도 기본적인 정렬 방법 중 하나로, 각 반복에서 요소를 적절한 위치에 ‘삽입’하여 전체 배열을 정렬하는 방식이야. 이 알고리즘은 작은 데이터 세트에 효율적이며, 특히 거의 정렬된 배열에 대해서는 매우 빠르게
동작해.`),g=i(),ms=e("p"),hs=u(`배열의 모든 요소를 차례대로 순회한다.
각 요소를, 이미 정렬된 배열 부분(요소의 왼쪽 부분)의 적절한 위치에 삽입한다.
필요하면, 삽입될 위치를 찾기 위해 정렬된 부분의 요소들을 오른쪽으로 이동시킨다.`),ds=i(),as=e("pre"),this.h()},l(S){a=p(S,"H3",{id:!0});var ys=o(a);r=p(ys,"A",{href:!0});var O=o(r);_=c(O,"버블소트"),O.forEach(s),ys.forEach(s),v=f(S),t=p(S,"P",{});var ks=o(t);k=c(ks,`버블 정렬(Bubble Sort)은 가장 간단하고 기초적인 정렬 알고리즘 중 하나로, 인접한 두 요소를 비교해서 잘못된 순서(예: 오름차순 정렬에서 큰 수가 앞에 오는 경우)가 있을 때 위치를 바꾸는 방식으로
작동해. 이 과정을 배열의 모든 요소가 올바른 순서로 정렬될 때까지 반복하며, 이름은 이 과정 중에 큰 값들이 배열의 끝으로 ‘떠오른다(bubble up)‘는 데서 유래했어.`),ks.forEach(s),d=f(S),L=p(S,"P",{});var bs=o(L);M=c(bs,`버블 정렬의 핵심은 두 가지 단계로 요약할 수 있어
비교 단계: 배열을 처음부터 끝까지 순회하면서, 각각의 인접한 요소 쌍을 비교한다.
교환 단계: 비교하는 두 요소가 잘못된 순서로 있으면, 이들의 위치를 서로 바꾼다.`),bs.forEach(s),us=f(S),C=p(S,"P",{});var j=o(C);I=c(j,`이 알고리즘의 시간 복잡도는 평균과 최악의 경우 모두 n의 제곱으로 n은 배열의 길이를 나타낸다. 배열이 이미 정렬되어 있거나 거의 정렬된 상태인 경우에는 상대적으로 빠르게 작동할 수 있지만, 대체로 크기가 큰
데이터셋에는 비효율적이야. 그럼에도 불구하고, 이해하기 쉽고 구현하기 간단해서 알고리즘 학습의 첫 단계로 자주 소개되곤 해.`),j.forEach(s),es=f(S),X=p(S,"PRE",{class:!0});var vs=o(X);vs.forEach(s),Q=f(S),B=p(S,"H3",{id:!0});var ls=o(B);q=p(ls,"A",{href:!0});var Ps=o(q);ps=c(Ps,"선택정렬"),Ps.forEach(s),ls.forEach(s),V=f(S),z=p(S,"P",{});var Is=o(z);K=c(Is,`선택 정렬도 기본적인 정렬 알고리즘 중 하나로, 각 단계에서 정렬되지 않은 부분에서 최소값(또는 최대값)을 찾아 선택한 뒤, 그 값을 정렬된 부분의 다음 위치로 이동시키는 방식으로 동작해. 선택 정렬은 구현이
간단하며, 안정 정렬이 아니라는 특징을 가지고 있어.`),Is.forEach(s),_s=f(S),rs=p(S,"P",{});var Ls=o(rs);ss=c(Ls,`선택 정렬 알고리즘 구현 방법
배열 전체를 순회하며, 각 단계에서 현재 위치를 기준으로 가장 작은 요소를 찾아.
가장 작은 요소를 현재 위치의 요소와 교환해.
모든 요소가 올바르게 정렬될 때까지 이 과정을 반복해.`),Ls.forEach(s),Es=f(S),fs=p(S,"PRE",{class:!0});var xs=o(fs);xs.forEach(s),ts=f(S),Z=p(S,"H3",{id:!0});var W=o(Z);D=p(W,"A",{href:!0});var ws=o(D);F=c(ws,"삽입정렬"),ws.forEach(s),W.forEach(s),ns=f(S),x=p(S,"P",{});var Ss=o(x);b=c(Ss,`삽입 정렬도 기본적인 정렬 방법 중 하나로, 각 반복에서 요소를 적절한 위치에 ‘삽입’하여 전체 배열을 정렬하는 방식이야. 이 알고리즘은 작은 데이터 세트에 효율적이며, 특히 거의 정렬된 배열에 대해서는 매우 빠르게
동작해.`),Ss.forEach(s),g=f(S),ms=p(S,"P",{});var Ms=o(ms);hs=c(Ms,`배열의 모든 요소를 차례대로 순회한다.
각 요소를, 이미 정렬된 배열 부분(요소의 왼쪽 부분)의 적절한 위치에 삽입한다.
필요하면, 삽입될 위치를 찾기 위해 정렬된 부분의 요소들을 오른쪽으로 이동시킨다.`),Ms.forEach(s),ds=f(S),as=p(S,"PRE",{class:!0});var Ns=o(as);Ns.forEach(s),this.h()},h(){m(r,"href","#버블소트"),m(a,"id","버블소트"),m(X,"class","language-python"),m(q,"href","#선택정렬"),m(B,"id","선택정렬"),m(fs,"class","language-python"),m(D,"href","#삽입정렬"),m(Z,"id","삽입정렬"),m(as,"class","language-python")},m(S,ys){l(S,a,ys),n(a,r),n(r,_),l(S,v,ys),l(S,t,ys),n(t,k),l(S,d,ys),l(S,L,ys),n(L,M),l(S,us,ys),l(S,C,ys),n(C,I),l(S,es,ys),l(S,X,ys),X.innerHTML=A,l(S,Q,ys),l(S,B,ys),n(B,q),n(q,ps),l(S,V,ys),l(S,z,ys),n(z,K),l(S,_s,ys),l(S,rs,ys),n(rs,ss),l(S,Es,ys),l(S,fs,ys),fs.innerHTML=Y,l(S,ts,ys),l(S,Z,ys),n(Z,D),n(D,F),l(S,ns,ys),l(S,x,ys),n(x,b),l(S,g,ys),l(S,ms,ys),n(ms,hs),l(S,ds,ys),l(S,as,ys),as.innerHTML=is},p:Vn,d(S){S&&s(a),S&&s(v),S&&s(t),S&&s(d),S&&s(L),S&&s(us),S&&s(C),S&&s(es),S&&s(X),S&&s(Q),S&&s(B),S&&s(V),S&&s(z),S&&s(_s),S&&s(rs),S&&s(Es),S&&s(fs),S&&s(ts),S&&s(Z),S&&s(ns),S&&s(x),S&&s(g),S&&s(ms),S&&s(ds),S&&s(as)}}}function So(E){let a,r;const _=[E[0],be];let v={$$slots:{default:[Lo]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(be)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const be={title:"정렬",summary:"버블 정렬, 선택 정렬, 삽입 정렬 등 기본적인 정렬 알고리즘의 원리와 구현 방법을 설명합니다. 각 알고리즘의 특성과 Python 코드 예시를 제공하여 이해를 돕습니다.",date:"2024-03-20",tags:["코딩테스트"]};function Ao(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let To=class extends Hn{constructor(a){super(),jn(this,a,Ao,So,Rn,{})}};const Oo=Object.freeze(Object.defineProperty({__proto__:null,default:To,metadata:be},Symbol.toStringTag,{value:"Module"}));function Io(E){let a,r,_,v,t,k,d,L,M,us=`<code class="language-java"><span class="token operator">-</span> 배열 선언<span class="token operator">:</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token operator">-</span> 배열 길이<span class="token operator">:</span> arr<span class="token punctuation">.</span>length
<span class="token operator">-</span> 배열 출력<span class="token operator">:</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Arrays</span> 클래스의 toString 메소드 사용<span class="token punctuation">)</span>
<span class="token operator">-</span> 배열 복사<span class="token operator">:</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">)</span> 또는 <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span>sourceArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> destArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> sourceArr<span class="token punctuation">,</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> 다차원 배열 출력<span class="token operator">:</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">deepToString</span><span class="token punctuation">(</span>multiDimArr<span class="token punctuation">)</span></code>`,C,I,es,X,A,Q,B=`<code class="language-java"><span class="token operator">-</span> 리스트 선언<span class="token operator">:</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> 요소 추가<span class="token operator">:</span> list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> 요소 제거<span class="token operator">:</span> list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span> 또는 객체 제거 list<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> 리스트 크기<span class="token operator">:</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-</span> 리스트 정렬<span class="token operator">:</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> 리스트 출력<span class="token operator">:</span> 리스트를 그대로 출력하면 됨 <span class="token punctuation">(</span>예<span class="token operator">:</span> <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span></code>`,q,ps,V,z,K,_s,rs=`<code class="language-java"><span class="token operator">-</span> 문자열 길이<span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-</span> 부분 문자열<span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span> endIndex<span class="token punctuation">)</span> <span class="token punctuation">(</span>startIndex부터 endIndex 전까지의 문자열 반환<span class="token punctuation">)</span>
<span class="token operator">-</span> 문자열 비교<span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>otherStr<span class="token punctuation">)</span>
<span class="token operator">-</span> 문자열을 문자 배열로<span class="token operator">:</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> charArray <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token operator">-</span> 문자 찾기<span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token char">'a'</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>문자나 문자열이 처음으로 등장하는 인덱스 반환<span class="token punctuation">,</span> 없으면 <span class="token operator">-</span><span class="token number">1</span> 반환<span class="token punctuation">)</span>
<span class="token operator">-</span> 문자열 분할<span class="token operator">:</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> parts <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">"delim"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ss,Es,fs,Y,ts,Z,D,F,ns,x,b=`<code class="language-java"><span class="token class-name">Copy</span> code
<span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> number <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> str <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,g,ms,hs,ds,as,is,S=`<code class="language-java"><span class="token class-name">Copy</span> code
<span class="token class-name">StringBuilder</span> sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"Hello, "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
sb<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> result <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,ys,O,ks,bs;return{c(){a=e("h1"),r=e("a"),_=u("코딩 테스트에서 자주 쓰이는 함수"),v=i(),t=e("h3"),k=e("a"),d=u("배열(Array)"),L=i(),M=e("pre"),C=i(),I=e("h3"),es=e("a"),X=u("리스트(List)"),A=i(),Q=e("pre"),q=i(),ps=e("h3"),V=e("a"),z=u("문자열(String)"),K=i(),_s=e("pre"),ss=i(),Es=e("h3"),fs=e("a"),Y=u("기타 유용한 자바 팁"),ts=i(),Z=e("ul"),D=e("li"),F=u("Scanner 클래스를 사용한 입력 처리:"),ns=i(),x=e("pre"),g=i(),ms=e("ul"),hs=e("li"),ds=u("StringBuilder를 사용해 문자열을 더 효율적으로 다룸 (반복적인 문자열 연산에 유용):"),as=i(),is=e("pre"),ys=i(),O=e("ul"),ks=e("li"),bs=u(`반복문과 조건문에서의 continue와 break 사용:
continue는 반복문의 현재 반복을 건너뛰고 다음 반복으로 넘어가고,
break는 반복문을 완전히 종료시킴.`),this.h()},l(j){a=p(j,"H1",{id:!0});var vs=o(a);r=p(vs,"A",{href:!0});var ls=o(r);_=c(ls,"코딩 테스트에서 자주 쓰이는 함수"),ls.forEach(s),vs.forEach(s),v=f(j),t=p(j,"H3",{id:!0});var Ps=o(t);k=p(Ps,"A",{href:!0});var Is=o(k);d=c(Is,"배열(Array)"),Is.forEach(s),Ps.forEach(s),L=f(j),M=p(j,"PRE",{class:!0});var Ls=o(M);Ls.forEach(s),C=f(j),I=p(j,"H3",{id:!0});var xs=o(I);es=p(xs,"A",{href:!0});var W=o(es);X=c(W,"리스트(List)"),W.forEach(s),xs.forEach(s),A=f(j),Q=p(j,"PRE",{class:!0});var ws=o(Q);ws.forEach(s),q=f(j),ps=p(j,"H3",{id:!0});var Ss=o(ps);V=p(Ss,"A",{href:!0});var Ms=o(V);z=c(Ms,"문자열(String)"),Ms.forEach(s),Ss.forEach(s),K=f(j),_s=p(j,"PRE",{class:!0});var Ns=o(_s);Ns.forEach(s),ss=f(j),Es=p(j,"H3",{id:!0});var Hs=o(Es);fs=p(Hs,"A",{href:!0});var Gs=o(fs);Y=c(Gs,"기타 유용한 자바 팁"),Gs.forEach(s),Hs.forEach(s),ts=f(j),Z=p(j,"UL",{});var w=o(Z);D=p(w,"LI",{});var h=o(D);F=c(h,"Scanner 클래스를 사용한 입력 처리:"),h.forEach(s),w.forEach(s),ns=f(j),x=p(j,"PRE",{class:!0});var $s=o(x);$s.forEach(s),g=f(j),ms=p(j,"UL",{});var Zs=o(ms);hs=p(Zs,"LI",{});var Fs=o(hs);ds=c(Fs,"StringBuilder를 사용해 문자열을 더 효율적으로 다룸 (반복적인 문자열 연산에 유용):"),Fs.forEach(s),Zs.forEach(s),as=f(j),is=p(j,"PRE",{class:!0});var As=o(is);As.forEach(s),ys=f(j),O=p(j,"UL",{});var Ys=o(O);ks=p(Ys,"LI",{});var Ws=o(ks);bs=c(Ws,`반복문과 조건문에서의 continue와 break 사용:
continue는 반복문의 현재 반복을 건너뛰고 다음 반복으로 넘어가고,
break는 반복문을 완전히 종료시킴.`),Ws.forEach(s),Ys.forEach(s),this.h()},h(){m(r,"href","#코딩-테스트에서-자주-쓰이는-함수"),m(a,"id","코딩-테스트에서-자주-쓰이는-함수"),m(k,"href","#배열array"),m(t,"id","배열array"),m(M,"class","language-java"),m(es,"href","#리스트list"),m(I,"id","리스트list"),m(Q,"class","language-java"),m(V,"href","#문자열string"),m(ps,"id","문자열string"),m(_s,"class","language-java"),m(fs,"href","#기타-유용한-자바-팁"),m(Es,"id","기타-유용한-자바-팁"),m(x,"class","language-java"),m(is,"class","language-java")},m(j,vs){l(j,a,vs),n(a,r),n(r,_),l(j,v,vs),l(j,t,vs),n(t,k),n(k,d),l(j,L,vs),l(j,M,vs),M.innerHTML=us,l(j,C,vs),l(j,I,vs),n(I,es),n(es,X),l(j,A,vs),l(j,Q,vs),Q.innerHTML=B,l(j,q,vs),l(j,ps,vs),n(ps,V),n(V,z),l(j,K,vs),l(j,_s,vs),_s.innerHTML=rs,l(j,ss,vs),l(j,Es,vs),n(Es,fs),n(fs,Y),l(j,ts,vs),l(j,Z,vs),n(Z,D),n(D,F),l(j,ns,vs),l(j,x,vs),x.innerHTML=b,l(j,g,vs),l(j,ms,vs),n(ms,hs),n(hs,ds),l(j,as,vs),l(j,is,vs),is.innerHTML=S,l(j,ys,vs),l(j,O,vs),n(O,ks),n(ks,bs)},p:Vn,d(j){j&&s(a),j&&s(v),j&&s(t),j&&s(L),j&&s(M),j&&s(C),j&&s(I),j&&s(A),j&&s(Q),j&&s(q),j&&s(ps),j&&s(K),j&&s(_s),j&&s(ss),j&&s(Es),j&&s(ts),j&&s(Z),j&&s(ns),j&&s(x),j&&s(g),j&&s(ms),j&&s(as),j&&s(is),j&&s(ys),j&&s(O)}}}function xo(E){let a,r;const _=[E[0],$e];let v={$$slots:{default:[Io]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks($e)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const $e={title:"코딩테스트 팁",summary:"자주 사용되는 Java 코딩 테스트 함수와 메소드를 설명합니다. 배열, 리스트, 문자열 관리와 Scanner, StringBuilder 클래스의 활용법을 포함하여 Java 프로그래밍의 기본을 다룹니다.",date:"2024-03-20",tags:["코딩테스트"]};function Ho(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let jo=class extends Hn{constructor(a){super(),jn(this,a,Ho,xo,Rn,{})}};const Ro=Object.freeze(Object.defineProperty({__proto__:null,default:jo,metadata:$e},Symbol.toStringTag,{value:"Module"}));function Mo(E){let a,r;const _=[E[0],Le];let v={};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Le)]):{};a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Le={title:"코딩테스트",summary:"",date:"2024-05-17",tags:[""]};function Co(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let No=class extends Hn{constructor(a){super(),jn(this,a,Co,Mo,Rn,{})}};const Go=Object.freeze(Object.defineProperty({__proto__:null,default:No,metadata:Le},Symbol.toStringTag,{value:"Module"}));function Do(E){let a,r;const _=[E[0],Se];let v={};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Se)]):{};a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Se={title:"레벨1",summary:"",date:"2024-05-20",tags:[""]};function Uo(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Bo=class extends Hn{constructor(a){super(),jn(this,a,Uo,Do,Rn,{})}};const Fo=Object.freeze(Object.defineProperty({__proto__:null,default:Bo,metadata:Se},Symbol.toStringTag,{value:"Module"}));function Jo(E){let a,r,_,v,t,k,d,L,M,us,C,I,es=`<code class="language-java"><span class="token comment">//합 배열 S 정의</span>
<span class="token class-name">S</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name">A</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token class-name">A</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token class-name">A</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>+<span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span>

<span class="token comment">//합 배열 S를 만드는 공식</span>
<span class="token class-name">S</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token class-name">S</span><span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token class-name">A</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span></code>`,X,A,Q;return{c(){a=e("h2"),r=e("a"),_=u("구간 합"),v=i(),t=e("h3"),k=e("a"),d=u("구간 합의 핵심 이론"),L=i(),M=e("p"),us=u("구간 합 알고리즘을 활용하려면 합 배열을 구해야 한다"),C=i(),I=e("pre"),X=i(),A=e("p"),Q=u("합 배열은 기존의 배열을 전처리한 배열이라 생각하면 된다. 이렇게 합 배열을 미리 구해 놓으면 기존 배열의 일정 범위의 합을 구하는 시간 복잡도가 줄어든다."),this.h()},l(B){a=p(B,"H2",{id:!0});var q=o(a);r=p(q,"A",{href:!0});var ps=o(r);_=c(ps,"구간 합"),ps.forEach(s),q.forEach(s),v=f(B),t=p(B,"H3",{id:!0});var V=o(t);k=p(V,"A",{href:!0});var z=o(k);d=c(z,"구간 합의 핵심 이론"),z.forEach(s),V.forEach(s),L=f(B),M=p(B,"P",{});var K=o(M);us=c(K,"구간 합 알고리즘을 활용하려면 합 배열을 구해야 한다"),K.forEach(s),C=f(B),I=p(B,"PRE",{class:!0});var _s=o(I);_s.forEach(s),X=f(B),A=p(B,"P",{});var rs=o(A);Q=c(rs,"합 배열은 기존의 배열을 전처리한 배열이라 생각하면 된다. 이렇게 합 배열을 미리 구해 놓으면 기존 배열의 일정 범위의 합을 구하는 시간 복잡도가 줄어든다."),rs.forEach(s),this.h()},h(){m(r,"href","#구간-합"),m(a,"id","구간-합"),m(k,"href","#구간-합의-핵심-이론"),m(t,"id","구간-합의-핵심-이론"),m(I,"class","language-java")},m(B,q){l(B,a,q),n(a,r),n(r,_),l(B,v,q),l(B,t,q),n(t,k),n(k,d),l(B,L,q),l(B,M,q),n(M,us),l(B,C,q),l(B,I,q),I.innerHTML=es,l(B,X,q),l(B,A,q),n(A,Q)},p:Vn,d(B){B&&s(a),B&&s(v),B&&s(t),B&&s(L),B&&s(M),B&&s(C),B&&s(I),B&&s(X),B&&s(A)}}}function zo(E){let a,r;const _=[E[0],Ae];let v={$$slots:{default:[Jo]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Ae)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Ae={title:"구간 합 구하기",summary:"",date:"2024-05-20",tags:[""]};function qo(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Vo=class extends Hn{constructor(a){super(),jn(this,a,qo,zo,Rn,{})}};const Yo=Object.freeze(Object.defineProperty({__proto__:null,default:Vo,metadata:Ae},Symbol.toStringTag,{value:"Module"}));function Wo(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs;return{c(){a=e("h1"),r=e("a"),_=u("스택과 큐"),v=i(),t=e("p"),k=u("스택과 큐는 배열에서 발전된 형태의 자료구조 입니다. 구조는 비슷하지만 처리 방식은 다릅니다."),d=i(),L=e("h2"),M=e("a"),us=u("스택"),C=i(),I=e("p"),es=u(`삽입과 삭제 연산이 후입선출(LIFO: Last-In First-Out)로 이뤄지는 자료구조 입니다.
후입선출은 삽입과 삭제가 한 쪽에서만 일어나는 특징이 있습니다.`),X=i(),A=e("h3"),Q=e("a"),B=u("스택 용어"),q=i(),ps=e("ul"),V=e("li"),z=u("top: 삽입과 삭제가 일어나는 위치를 뜻한다"),K=i(),_s=e("li"),rs=u("push: top 위치에 새로운 데이터를 삽입하는 연산이다."),ss=i(),Es=e("li"),fs=u("pop: top 위치에 현재 있는 데이터를 삭제하고 확인하는 연산이다."),Y=i(),ts=e("li"),Z=u("peek: top 위치에 현재 있는 데이터를 단순 확인하는 연산이다."),D=i(),F=e("p"),ns=u(`스택은 깊이 우선탐색(DFS), 백트래킹 종류의 코딩 테스트에 효과적입니다.
후입선출의 개념이 재귀 알고리즘과 결이 같기 떄문입니다.`),x=i(),b=e("h2"),g=e("a"),ms=u("큐"),hs=i(),ds=e("p"),as=u(`큐는 삽입과 삭제 연산이 선입선출(FIFO: First-In First-Out)로 이뤄지는 자료구조입니다.
스택과 다르게 먼저 들어온 데이터가 먼저 나갑니다.`),is=i(),S=e("h3"),ys=e("a"),O=u("큐 용어"),ks=i(),bs=e("ul"),j=e("li"),vs=u("rear: 큐에서 가장 끝 데이터를 가리키는 영역입니다."),ls=i(),Ps=e("li"),Is=u("front: 큐에서 가장 앞의 데이터를 가리키는 영역입니다."),Ls=i(),xs=e("li"),W=u("add: rear 부분에 새로운 데이터를 삽입하는 연산입니다."),ws=i(),Ss=e("li"),Ms=u("poll: front 부분에 있는 데이터를 삭제하고 확이낳는 연산입니다."),Ns=i(),Hs=e("li"),Gs=u("peek: 큐의 맨 앞에 있는 데이터를 확인할 때 사용하는 연산입니다."),this.h()},l(w){a=p(w,"H1",{id:!0});var h=o(a);r=p(h,"A",{href:!0});var $s=o(r);_=c($s,"스택과 큐"),$s.forEach(s),h.forEach(s),v=f(w),t=p(w,"P",{});var Zs=o(t);k=c(Zs,"스택과 큐는 배열에서 발전된 형태의 자료구조 입니다. 구조는 비슷하지만 처리 방식은 다릅니다."),Zs.forEach(s),d=f(w),L=p(w,"H2",{id:!0});var Fs=o(L);M=p(Fs,"A",{href:!0});var As=o(M);us=c(As,"스택"),As.forEach(s),Fs.forEach(s),C=f(w),I=p(w,"P",{});var Ys=o(I);es=c(Ys,`삽입과 삭제 연산이 후입선출(LIFO: Last-In First-Out)로 이뤄지는 자료구조 입니다.
후입선출은 삽입과 삭제가 한 쪽에서만 일어나는 특징이 있습니다.`),Ys.forEach(s),X=f(w),A=p(w,"H3",{id:!0});var Ws=o(A);Q=p(Ws,"A",{href:!0});var os=o(Q);B=c(os,"스택 용어"),os.forEach(s),Ws.forEach(s),q=f(w),ps=p(w,"UL",{});var N=o(ps);V=p(N,"LI",{});var Rs=o(V);z=c(Rs,"top: 삽입과 삭제가 일어나는 위치를 뜻한다"),Rs.forEach(s),K=f(N),_s=p(N,"LI",{});var nn=o(_s);rs=c(nn,"push: top 위치에 새로운 데이터를 삽입하는 연산이다."),nn.forEach(s),ss=f(N),Es=p(N,"LI",{});var Vs=o(Es);fs=c(Vs,"pop: top 위치에 현재 있는 데이터를 삭제하고 확인하는 연산이다."),Vs.forEach(s),Y=f(N),ts=p(N,"LI",{});var gs=o(ts);Z=c(gs,"peek: top 위치에 현재 있는 데이터를 단순 확인하는 연산이다."),gs.forEach(s),N.forEach(s),D=f(w),F=p(w,"P",{});var G=o(F);ns=c(G,`스택은 깊이 우선탐색(DFS), 백트래킹 종류의 코딩 테스트에 효과적입니다.
후입선출의 개념이 재귀 알고리즘과 결이 같기 떄문입니다.`),G.forEach(s),x=f(w),b=p(w,"H2",{id:!0});var Ts=o(b);g=p(Ts,"A",{href:!0});var Xs=o(g);ms=c(Xs,"큐"),Xs.forEach(s),Ts.forEach(s),hs=f(w),ds=p(w,"P",{});var H=o(ds);as=c(H,`큐는 삽입과 삭제 연산이 선입선출(FIFO: First-In First-Out)로 이뤄지는 자료구조입니다.
스택과 다르게 먼저 들어온 데이터가 먼저 나갑니다.`),H.forEach(s),is=f(w),S=p(w,"H3",{id:!0});var P=o(S);ys=p(P,"A",{href:!0});var js=o(ys);O=c(js,"큐 용어"),js.forEach(s),P.forEach(s),ks=f(w),bs=p(w,"UL",{});var sn=o(bs);j=p(sn,"LI",{});var qs=o(j);vs=c(qs,"rear: 큐에서 가장 끝 데이터를 가리키는 영역입니다."),qs.forEach(s),ls=f(sn),Ps=p(sn,"LI",{});var cs=o(Ps);Is=c(cs,"front: 큐에서 가장 앞의 데이터를 가리키는 영역입니다."),cs.forEach(s),Ls=f(sn),xs=p(sn,"LI",{});var Us=o(xs);W=c(Us,"add: rear 부분에 새로운 데이터를 삽입하는 연산입니다."),Us.forEach(s),ws=f(sn),Ss=p(sn,"LI",{});var an=o(Ss);Ms=c(an,"poll: front 부분에 있는 데이터를 삭제하고 확이낳는 연산입니다."),an.forEach(s),Ns=f(sn),Hs=p(sn,"LI",{});var ln=o(Hs);Gs=c(ln,"peek: 큐의 맨 앞에 있는 데이터를 확인할 때 사용하는 연산입니다."),ln.forEach(s),sn.forEach(s),this.h()},h(){m(r,"href","#스택과-큐"),m(a,"id","스택과-큐"),m(M,"href","#스택"),m(L,"id","스택"),m(Q,"href","#스택-용어"),m(A,"id","스택-용어"),m(g,"href","#큐"),m(b,"id","큐"),m(ys,"href","#큐-용어"),m(S,"id","큐-용어")},m(w,h){l(w,a,h),n(a,r),n(r,_),l(w,v,h),l(w,t,h),n(t,k),l(w,d,h),l(w,L,h),n(L,M),n(M,us),l(w,C,h),l(w,I,h),n(I,es),l(w,X,h),l(w,A,h),n(A,Q),n(Q,B),l(w,q,h),l(w,ps,h),n(ps,V),n(V,z),n(ps,K),n(ps,_s),n(_s,rs),n(ps,ss),n(ps,Es),n(Es,fs),n(ps,Y),n(ps,ts),n(ts,Z),l(w,D,h),l(w,F,h),n(F,ns),l(w,x,h),l(w,b,h),n(b,g),n(g,ms),l(w,hs,h),l(w,ds,h),n(ds,as),l(w,is,h),l(w,S,h),n(S,ys),n(ys,O),l(w,ks,h),l(w,bs,h),n(bs,j),n(j,vs),n(bs,ls),n(bs,Ps),n(Ps,Is),n(bs,Ls),n(bs,xs),n(xs,W),n(bs,ws),n(bs,Ss),n(Ss,Ms),n(bs,Ns),n(bs,Hs),n(Hs,Gs)},p:Vn,d(w){w&&s(a),w&&s(v),w&&s(t),w&&s(d),w&&s(L),w&&s(C),w&&s(I),w&&s(X),w&&s(A),w&&s(q),w&&s(ps),w&&s(D),w&&s(F),w&&s(x),w&&s(b),w&&s(hs),w&&s(ds),w&&s(is),w&&s(S),w&&s(ks),w&&s(bs)}}}function Xo(E){let a,r;const _=[E[0],Te];let v={$$slots:{default:[Wo]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Te)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Te={title:"스택과 큐",summary:"",date:"2024-05-29",tags:[""]};function Ko(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Qo=class extends Hn{constructor(a){super(),jn(this,a,Ko,Xo,Rn,{})}};const Zo=Object.freeze(Object.defineProperty({__proto__:null,default:Qo,metadata:Te},Symbol.toStringTag,{value:"Module"}));function go(E){let a,r,_,v,t;return{c(){a=e("p"),r=u(`슬라이딩 윈도우 알고리즘은 2개의 포인터로 범위를 지정한 다음 범위를 유지한 채로 이동하며 문제를 해결합니다.
`),_=e("a"),v=u("투 포인터"),t=u(" 알고리즘과 매우 비슷하고 원리도 간단합니다."),this.h()},l(k){a=p(k,"P",{});var d=o(a);r=c(d,`슬라이딩 윈도우 알고리즘은 2개의 포인터로 범위를 지정한 다음 범위를 유지한 채로 이동하며 문제를 해결합니다.
`),_=p(d,"A",{href:!0});var L=o(_);v=c(L,"투 포인터"),L.forEach(s),t=c(d," 알고리즘과 매우 비슷하고 원리도 간단합니다."),d.forEach(s),this.h()},h(){m(_,"href","/wikis/%EC%BD%94%EB%94%A9%ED%85%8C%EC%8A%A4%ED%8A%B8/%ED%88%AC%ED%8F%AC%EC%9D%B8%ED%84%B0")},m(k,d){l(k,a,d),n(a,r),n(a,_),n(_,v),n(a,t)},p:Vn,d(k){k&&s(a)}}}function su(E){let a,r;const _=[E[0],Oe];let v={$$slots:{default:[go]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Oe)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Oe={title:"슬라이딩 윈도우",summary:"",date:"2024-05-27",tags:[""]};function nu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let au=class extends Hn{constructor(a){super(),jn(this,a,nu,su,Rn,{})}};const tu=Object.freeze(Object.defineProperty({__proto__:null,default:au,metadata:Oe},Symbol.toStringTag,{value:"Module"}));function eu(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs=`<code class="language-java"><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token keyword">int</span> current_number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span></code>`,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs,Fs,As,Ys=`<code class="language-java"><span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
current_number<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token comment">// 조건을 만족하는 경우에만 count를 증가시킵니다.</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>current_number <span class="token operator">%</span><span class="token number">3</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>

<span class="token function">toString</span><span class="token punctuation">(</span>current_number<span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span></code>`,Ws,os,N,Rs,nn,Vs,gs,G,Ts,Xs,H,P,js=`<code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>current_number <span class="token operator">%</span><span class="token number">3</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span><span class="token operator">!</span><span class="token class-name">Integer</span><span class="token punctuation">.</span>

<span class="token function">toString</span><span class="token punctuation">(</span>current_number<span class="token punctuation">)</span><span class="token punctuation">.</span>

<span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
count<span class="token operator">++</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span></code>`,sn,qs,cs,Us,an,ln,fn,un,pn,kn,on,En,dn,mn,en,hn='<code class="language-java"><span class="token keyword">return</span> current_number<span class="token punctuation">;</span></code>',rn,Ln,Pn,wn,cn,yn,Jn=`<code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">solution</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> current_number <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>

        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            current_number<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>current_number <span class="token operator">%</span> <span class="token number">3</span> <span class="token operator">!=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>current_number<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                count<span class="token operator">++</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">return</span> current_number<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,vn,_n,bn,Un,Mn,Sn,An,Xn,$n,zn,gn,Bn,Fn,sa,J,Js,In,ta,xn,qn,T,Ds,ra,ka,_a,ma,Aa,ya,pa,Ia,va,oa,na,ia,ea,ua,Ea,Zn,Ta,Pa,Kn,ca,da;return{c(){a=e("h1"),r=e("a"),_=u("3x 마을에서의 숫자 변환 문제 해결 과정"),v=i(),t=e("h2"),k=e("a"),d=u("문제 설명"),L=i(),M=e("p"),us=u("3x 마을에서는 3의 배수와 숫자 ‘3’이 포함된 숫자를 사용하지 않습니다. 주어진 숫자 "),C=e("code"),I=u("n"),es=u("을 3x 마을에서 사용되는 숫자로 변환하는 문제입니다. 예를 들어, "),X=e("code"),A=u("n = 15"),Q=u(`일 경우 결과는 25가
되고, `),B=e("code"),q=u("n = 40"),ps=u("일 경우 결과는 76이 됩니다."),V=i(),z=e("h2"),K=e("a"),_s=u("접근 방법"),rs=i(),ss=e("p"),Es=u("문제를 해결하기 위해서는 1부터 시작하여 3의 배수와 숫자 ‘3’이 포함된 숫자를 건너뛰며 숫자를 카운팅해야 합니다. 이를 위해 다음과 같은 과정을 거쳤습니다."),fs=i(),Y=e("h2"),ts=e("a"),Z=u("단계별 해결 과정"),D=i(),F=e("h3"),ns=e("a"),x=u("1. 초기 설정"),b=i(),g=e("ul"),ms=e("li"),hs=e("code"),ds=u("count"),as=u("를 0으로 초기화합니다."),is=i(),S=e("li"),ys=e("code"),O=u("current_number"),ks=u("를 0으로 초기화합니다."),bs=i(),j=e("pre"),ls=i(),Ps=e("h3"),Is=e("a"),Ls=u("2. 반복문 실행"),xs=i(),W=e("p"),ws=u("반복문을 통해 "),Ss=e("code"),Ms=u("count"),Ns=u("가 "),Hs=e("code"),Gs=u("n"),w=u("보다 작을 때까지 "),h=e("code"),$s=u("current_number"),Zs=u("를 1씩 증가시킵니다."),Fs=i(),As=e("pre"),Ws=i(),os=e("h3"),N=e("a"),Rs=u("3. 조건 확인"),nn=i(),Vs=e("p"),gs=u("각 숫자가 3의 배수가 아니고, 숫자 ‘3’이 포함되지 않는 경우에만 "),G=e("code"),Ts=u("count"),Xs=u("를 증가시킵니다."),H=i(),P=e("pre"),sn=i(),qs=e("h3"),cs=e("a"),Us=u("4. 결과 반환"),an=i(),ln=e("p"),fn=u("반복문이 종료된 후, "),un=e("code"),pn=u("current_number"),kn=u("가 3x 마을에서의 "),on=e("code"),En=u("n"),dn=u("번째 숫자가 됩니다."),mn=i(),en=e("pre"),rn=i(),Ln=e("h3"),Pn=e("a"),wn=u("전체 코드"),cn=i(),yn=e("pre"),vn=i(),_n=e("h2"),bn=e("a"),Un=u("예제 실행"),Mn=i(),Sn=e("h3"),An=e("a"),Xn=u("예제 1: "),$n=e("code"),zn=u("n = 15"),gn=i(),Bn=e("ol"),Fn=e("li"),sa=u("숫자: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, 17, 19, 20, 22, 25"),J=i(),Js=e("li"),In=u("결과: 25"),ta=i(),xn=e("h3"),qn=e("a"),T=u("예제 2: "),Ds=e("code"),ra=u("n = 40"),ka=i(),_a=e("ol"),ma=e("li"),Aa=u("숫자: 1부터 76까지의 숫자 중 조건을 만족하는 40번째 숫자"),ya=i(),pa=e("li"),Ia=u("결과: 76"),va=i(),oa=e("h2"),na=e("a"),ia=u("시행착오 및 결론"),ea=i(),ua=e("p"),Ea=u("처음에는 1에서 20까지의 숫자만으로 3x 마을에서 사용되는 숫자를 찾으려 했으나, 예제 결과와 맞지 않는 것을 확인했습니다. 이후, 주어진 숫자 "),Zn=e("code"),Ta=u("n"),Pa=u(`까지 3의 배수와 숫자 ‘3’이 포함되지 않은 숫자를 하나씩
증가시키며 찾는 방식으로 접근하여 문제를 해결할 수 있었습니다.`),Kn=i(),ca=e("p"),da=u("이 과정을 통해, 3x 마을에서 사용되는 숫자는 정확히 찾아낼 수 있습니다. 추가적인 질문이 있으시면 언제든지 말씀해주세요!"),this.h()},l(R){a=p(R,"H1",{id:!0});var zs=o(a);r=p(zs,"A",{href:!0});var ja=o(r);_=c(ja,"3x 마을에서의 숫자 변환 문제 해결 과정"),ja.forEach(s),zs.forEach(s),v=f(R),t=p(R,"H2",{id:!0});var wa=o(t);k=p(wa,"A",{href:!0});var la=o(k);d=c(la,"문제 설명"),la.forEach(s),wa.forEach(s),L=f(R),M=p(R,"P",{});var $=o(M);us=c($,"3x 마을에서는 3의 배수와 숫자 ‘3’이 포함된 숫자를 사용하지 않습니다. 주어진 숫자 "),C=p($,"CODE",{});var Bs=o(C);I=c(Bs,"n"),Bs.forEach(s),es=c($,"을 3x 마을에서 사용되는 숫자로 변환하는 문제입니다. 예를 들어, "),X=p($,"CODE",{});var Ra=o(X);A=c(Ra,"n = 15"),Ra.forEach(s),Q=c($,`일 경우 결과는 25가
되고, `),B=p($,"CODE",{});var Ma=o(B);q=c(Ma,"n = 40"),Ma.forEach(s),ps=c($,"일 경우 결과는 76이 됩니다."),$.forEach(s),V=f(R),z=p(R,"H2",{id:!0});var ba=o(z);K=p(ba,"A",{href:!0});var ha=o(K);_s=c(ha,"접근 방법"),ha.forEach(s),ba.forEach(s),rs=f(R),ss=p(R,"P",{});var Oa=o(ss);Es=c(Oa,"문제를 해결하기 위해서는 1부터 시작하여 3의 배수와 숫자 ‘3’이 포함된 숫자를 건너뛰며 숫자를 카운팅해야 합니다. 이를 위해 다음과 같은 과정을 거쳤습니다."),Oa.forEach(s),fs=f(R),Y=p(R,"H2",{id:!0});var Da=o(Y);ts=p(Da,"A",{href:!0});var aa=o(ts);Z=c(aa,"단계별 해결 과정"),aa.forEach(s),Da.forEach(s),D=f(R),F=p(R,"H3",{id:!0});var $a=o(F);ns=p($a,"A",{href:!0});var Ua=o(ns);x=c(Ua,"1. 초기 설정"),Ua.forEach(s),$a.forEach(s),b=f(R),g=p(R,"UL",{});var La=o(g);ms=p(La,"LI",{});var Sa=o(ms);hs=p(Sa,"CODE",{});var Ba=o(hs);ds=c(Ba,"count"),Ba.forEach(s),as=c(Sa,"를 0으로 초기화합니다."),Sa.forEach(s),is=f(La),S=p(La,"LI",{});var Ca=o(S);ys=p(Ca,"CODE",{});var fa=o(ys);O=c(fa,"current_number"),fa.forEach(s),ks=c(Ca,"를 0으로 초기화합니다."),Ca.forEach(s),La.forEach(s),bs=f(R),j=p(R,"PRE",{class:!0});var Na=o(j);Na.forEach(s),ls=f(R),Ps=p(R,"H3",{id:!0});var Fa=o(Ps);Is=p(Fa,"A",{href:!0});var xa=o(Is);Ls=c(xa,"2. 반복문 실행"),xa.forEach(s),Fa.forEach(s),xs=f(R),W=p(R,"P",{});var Qn=o(W);ws=c(Qn,"반복문을 통해 "),Ss=p(Qn,"CODE",{});var y=o(Ss);Ms=c(y,"count"),y.forEach(s),Ns=c(Qn,"가 "),Hs=p(Qn,"CODE",{});var Cs=o(Hs);Gs=c(Cs,"n"),Cs.forEach(s),w=c(Qn,"보다 작을 때까지 "),h=p(Qn,"CODE",{});var Qa=o(h);$s=c(Qa,"current_number"),Qa.forEach(s),Zs=c(Qn,"를 1씩 증가시킵니다."),Qn.forEach(s),Fs=f(R),As=p(R,"PRE",{class:!0});var Ga=o(As);Ga.forEach(s),Ws=f(R),os=p(R,"H3",{id:!0});var Za=o(os);N=p(Za,"A",{href:!0});var Ja=o(N);Rs=c(Ja,"3. 조건 확인"),Ja.forEach(s),Za.forEach(s),nn=f(R),Vs=p(R,"P",{});var Wa=o(Vs);gs=c(Wa,"각 숫자가 3의 배수가 아니고, 숫자 ‘3’이 포함되지 않는 경우에만 "),G=p(Wa,"CODE",{});var Pt=o(G);Ts=c(Pt,"count"),Pt.forEach(s),Xs=c(Wa,"를 증가시킵니다."),Wa.forEach(s),H=f(R),P=p(R,"PRE",{class:!0});var kt=o(P);kt.forEach(s),sn=f(R),qs=p(R,"H3",{id:!0});var at=o(qs);cs=p(at,"A",{href:!0});var wt=o(cs);Us=c(wt,"4. 결과 반환"),wt.forEach(s),at.forEach(s),an=f(R),ln=p(R,"P",{});var ga=o(ln);fn=c(ga,"반복문이 종료된 후, "),un=p(ga,"CODE",{});var tt=o(un);pn=c(tt,"current_number"),tt.forEach(s),kn=c(ga,"가 3x 마을에서의 "),on=p(ga,"CODE",{});var _t=o(on);En=c(_t,"n"),_t.forEach(s),dn=c(ga,"번째 숫자가 됩니다."),ga.forEach(s),mn=f(R),en=p(R,"PRE",{class:!0});var Va=o(en);Va.forEach(s),rn=f(R),Ln=p(R,"H3",{id:!0});var Xa=o(Ln);Pn=p(Xa,"A",{href:!0});var mt=o(Pn);wn=c(mt,"전체 코드"),mt.forEach(s),Xa.forEach(s),cn=f(R),yn=p(R,"PRE",{class:!0});var Ya=o(yn);Ya.forEach(s),vn=f(R),_n=p(R,"H2",{id:!0});var et=o(_n);bn=p(et,"A",{href:!0});var pt=o(bn);Un=c(pt,"예제 실행"),pt.forEach(s),et.forEach(s),Mn=f(R),Sn=p(R,"H3",{id:!0});var vt=o(Sn);An=p(vt,"A",{href:!0});var st=o(An);Xn=c(st,"예제 1: "),$n=p(st,"CODE",{});var Et=o($n);zn=c(Et,"n = 15"),Et.forEach(s),st.forEach(s),vt.forEach(s),gn=f(R),Bn=p(R,"OL",{});var rt=o(Bn);Fn=p(rt,"LI",{});var Ka=o(Fn);sa=c(Ka,"숫자: 1, 2, 4, 5, 7, 8, 10, 11, 14, 16, 17, 19, 20, 22, 25"),Ka.forEach(s),J=f(rt),Js=p(rt,"LI",{});var dt=o(Js);In=c(dt,"결과: 25"),dt.forEach(s),rt.forEach(s),ta=f(R),xn=p(R,"H3",{id:!0});var bt=o(xn);qn=p(bt,"A",{href:!0});var za=o(qn);T=c(za,"예제 2: "),Ds=p(za,"CODE",{});var ht=o(Ds);ra=c(ht,"n = 40"),ht.forEach(s),za.forEach(s),bt.forEach(s),ka=f(R),_a=p(R,"OL",{});var qa=o(_a);ma=p(qa,"LI",{});var Ha=o(ma);Aa=c(Ha,"숫자: 1부터 76까지의 숫자 중 조건을 만족하는 40번째 숫자"),Ha.forEach(s),ya=f(qa),pa=p(qa,"LI",{});var it=o(pa);Ia=c(it,"결과: 76"),it.forEach(s),qa.forEach(s),va=f(R),oa=p(R,"H2",{id:!0});var yt=o(oa);na=p(yt,"A",{href:!0});var lt=o(na);ia=c(lt,"시행착오 및 결론"),lt.forEach(s),yt.forEach(s),ea=f(R),ua=p(R,"P",{});var ot=o(ua);Ea=c(ot,"처음에는 1에서 20까지의 숫자만으로 3x 마을에서 사용되는 숫자를 찾으려 했으나, 예제 결과와 맞지 않는 것을 확인했습니다. 이후, 주어진 숫자 "),Zn=p(ot,"CODE",{});var ft=o(Zn);Ta=c(ft,"n"),ft.forEach(s),Pa=c(ot,`까지 3의 배수와 숫자 ‘3’이 포함되지 않은 숫자를 하나씩
증가시키며 찾는 방식으로 접근하여 문제를 해결할 수 있었습니다.`),ot.forEach(s),Kn=f(R),ca=p(R,"P",{});var nt=o(ca);da=c(nt,"이 과정을 통해, 3x 마을에서 사용되는 숫자는 정확히 찾아낼 수 있습니다. 추가적인 질문이 있으시면 언제든지 말씀해주세요!"),nt.forEach(s),this.h()},h(){m(r,"href","#3x-마을에서의-숫자-변환-문제-해결-과정"),m(a,"id","3x-마을에서의-숫자-변환-문제-해결-과정"),m(k,"href","#문제-설명"),m(t,"id","문제-설명"),m(K,"href","#접근-방법"),m(z,"id","접근-방법"),m(ts,"href","#단계별-해결-과정"),m(Y,"id","단계별-해결-과정"),m(ns,"href","#1-초기-설정"),m(F,"id","1-초기-설정"),m(j,"class","language-java"),m(Is,"href","#2-반복문-실행"),m(Ps,"id","2-반복문-실행"),m(As,"class","language-java"),m(N,"href","#3-조건-확인"),m(os,"id","3-조건-확인"),m(P,"class","language-java"),m(cs,"href","#4-결과-반환"),m(qs,"id","4-결과-반환"),m(en,"class","language-java"),m(Pn,"href","#전체-코드"),m(Ln,"id","전체-코드"),m(yn,"class","language-java"),m(bn,"href","#예제-실행"),m(_n,"id","예제-실행"),m(An,"href","#예제-1-n--15"),m(Sn,"id","예제-1-n--15"),m(qn,"href","#예제-2-n--40"),m(xn,"id","예제-2-n--40"),m(na,"href","#시행착오-및-결론"),m(oa,"id","시행착오-및-결론")},m(R,zs){l(R,a,zs),n(a,r),n(r,_),l(R,v,zs),l(R,t,zs),n(t,k),n(k,d),l(R,L,zs),l(R,M,zs),n(M,us),n(M,C),n(C,I),n(M,es),n(M,X),n(X,A),n(M,Q),n(M,B),n(B,q),n(M,ps),l(R,V,zs),l(R,z,zs),n(z,K),n(K,_s),l(R,rs,zs),l(R,ss,zs),n(ss,Es),l(R,fs,zs),l(R,Y,zs),n(Y,ts),n(ts,Z),l(R,D,zs),l(R,F,zs),n(F,ns),n(ns,x),l(R,b,zs),l(R,g,zs),n(g,ms),n(ms,hs),n(hs,ds),n(ms,as),n(g,is),n(g,S),n(S,ys),n(ys,O),n(S,ks),l(R,bs,zs),l(R,j,zs),j.innerHTML=vs,l(R,ls,zs),l(R,Ps,zs),n(Ps,Is),n(Is,Ls),l(R,xs,zs),l(R,W,zs),n(W,ws),n(W,Ss),n(Ss,Ms),n(W,Ns),n(W,Hs),n(Hs,Gs),n(W,w),n(W,h),n(h,$s),n(W,Zs),l(R,Fs,zs),l(R,As,zs),As.innerHTML=Ys,l(R,Ws,zs),l(R,os,zs),n(os,N),n(N,Rs),l(R,nn,zs),l(R,Vs,zs),n(Vs,gs),n(Vs,G),n(G,Ts),n(Vs,Xs),l(R,H,zs),l(R,P,zs),P.innerHTML=js,l(R,sn,zs),l(R,qs,zs),n(qs,cs),n(cs,Us),l(R,an,zs),l(R,ln,zs),n(ln,fn),n(ln,un),n(un,pn),n(ln,kn),n(ln,on),n(on,En),n(ln,dn),l(R,mn,zs),l(R,en,zs),en.innerHTML=hn,l(R,rn,zs),l(R,Ln,zs),n(Ln,Pn),n(Pn,wn),l(R,cn,zs),l(R,yn,zs),yn.innerHTML=Jn,l(R,vn,zs),l(R,_n,zs),n(_n,bn),n(bn,Un),l(R,Mn,zs),l(R,Sn,zs),n(Sn,An),n(An,Xn),n(An,$n),n($n,zn),l(R,gn,zs),l(R,Bn,zs),n(Bn,Fn),n(Fn,sa),n(Bn,J),n(Bn,Js),n(Js,In),l(R,ta,zs),l(R,xn,zs),n(xn,qn),n(qn,T),n(qn,Ds),n(Ds,ra),l(R,ka,zs),l(R,_a,zs),n(_a,ma),n(ma,Aa),n(_a,ya),n(_a,pa),n(pa,Ia),l(R,va,zs),l(R,oa,zs),n(oa,na),n(na,ia),l(R,ea,zs),l(R,ua,zs),n(ua,Ea),n(ua,Zn),n(Zn,Ta),n(ua,Pa),l(R,Kn,zs),l(R,ca,zs),n(ca,da)},p:Vn,d(R){R&&s(a),R&&s(v),R&&s(t),R&&s(L),R&&s(M),R&&s(V),R&&s(z),R&&s(rs),R&&s(ss),R&&s(fs),R&&s(Y),R&&s(D),R&&s(F),R&&s(b),R&&s(g),R&&s(bs),R&&s(j),R&&s(ls),R&&s(Ps),R&&s(xs),R&&s(W),R&&s(Fs),R&&s(As),R&&s(Ws),R&&s(os),R&&s(nn),R&&s(Vs),R&&s(H),R&&s(P),R&&s(sn),R&&s(qs),R&&s(an),R&&s(ln),R&&s(mn),R&&s(en),R&&s(rn),R&&s(Ln),R&&s(cn),R&&s(yn),R&&s(vn),R&&s(_n),R&&s(Mn),R&&s(Sn),R&&s(gn),R&&s(Bn),R&&s(ta),R&&s(xn),R&&s(ka),R&&s(_a),R&&s(va),R&&s(oa),R&&s(ea),R&&s(ua),R&&s(Kn),R&&s(ca)}}}function pu(E){let a,r;const _=[E[0],Ie];let v={$$slots:{default:[eu]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Ie)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Ie={title:"저주의 숫자 3",summary:"",date:"2024-05-20",tags:[""]};function lu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let ou=class extends Hn{constructor(a){super(),jn(this,a,lu,pu,Rn,{})}};const uu=Object.freeze(Object.defineProperty({__proto__:null,default:ou,metadata:Ie},Symbol.toStringTag,{value:"Module"}));function cu(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs,Fs,As,Ys,Ws,os,N,Rs,nn,Vs,gs,G,Ts,Xs,H,P,js,sn,qs,cs,Us,an,ln,fn,un,pn,kn,on,En,dn,mn,en,hn,rn,Ln,Pn,wn,cn,yn,Jn,vn,_n,bn,Un,Mn,Sn,An,Xn,$n,zn,gn,Bn,Fn,sa,J,Js,In,ta,xn,qn,T,Ds,ra,ka,_a,ma,Aa,ya,pa,Ia,va,oa,na,ia,ea,ua,Ea,Zn,Ta,Pa,Kn,ca,da,R,zs,ja,wa,la,$,Bs,Ra,Ma,ba,ha,Oa,Da,aa,$a,Ua,La,Sa,Ba,Ca,fa,Na,Fa,xa,Qn,y,Cs,Qa,Ga,Za,Ja,Wa,Pt,kt,at,wt,ga,tt,_t,Va,Xa,mt,Ya,et,pt,vt,st,Et,rt,Ka,dt,bt,za,ht,qa,Ha,it,yt,lt,ot,ft,nt,Tt;return{c(){a=e("h1"),r=e("a"),_=u("버블정렬"),v=i(),t=e("p"),k=u("데이터의 인접 요소끼리 비교하고, swap 연산을 수행하며 정렬하는 방식 시간 복잡도는 O(n²)으로 다른 정렬 알고리즘보다 속도가 느린 편입니다."),d=i(),L=e("h2"),M=e("a"),us=u("버블 정렬 과정"),C=i(),I=e("ol"),es=e("li"),X=u("비교 연산이 필요한 루프 범위를 설정한다."),A=i(),Q=e("li"),B=u("인접한 데이터 값을 비교한다."),q=i(),ps=e("li"),V=u("swap 조건에 부합하면 swap 연산을 수행한다."),z=i(),K=e("li"),_s=u("루프 범위가 끝날 때 까지 2~3을 반복한다."),rs=i(),ss=e("li"),Es=u("정렬 영역을 설정한다. 다음 루프를 실행할 때는 이 영역을 제외한다."),fs=i(),Y=e("li"),ts=u("비교 대상이 없을 때까지 1~5를 반복한다."),Z=i(),D=e("h1"),F=e("a"),ns=u("선택정렬"),x=i(),b=e("p"),g=u(`선택 정렬은 대상 데이터에서 최대나 최소 데이터를 데이터나 나열된 순으로 찾아 가며 선택하는 방법입니다.
선택 정렬은 구현 방법이 복잡하고, 시간 복잡도도 O(n²)으로 효율적이지 않아 코딩 테스트 에서는 잘 사용하지 않습니다.`),ms=i(),hs=e("h2"),ds=e("a"),as=u("선택 정렬 과정"),is=i(),S=e("ol"),ys=e("li"),O=u("남은 정렬 부분에서 최솟값 또는 최댓값을 찾는다."),ks=i(),bs=e("li"),j=u("남은 정렬 부분에서 가장 앞에 있는 데이터와 선택된 데이터를 swap한다."),vs=i(),ls=e("li"),Ps=u("가장 앞에 있는 데이터으 위치를 변경해 남은 정렬 부분의 범위를 축소한다."),Is=i(),Ls=e("li"),xs=u("전체 데이터 크기 만큼 index가 커질 때까지, 남은 정렬 부분이 없어질때까지 반복한다."),W=i(),ws=e("h1"),Ss=e("a"),Ms=u("삽입 정렬"),Ns=i(),Hs=e("p"),Gs=u(`삽입 정렬은 이미 정렬된 데이터 범위에 정렬되지 않은 데이터를 적절한 위치에 삽입시켜 정렬하는 방식입니다.
평균 시간 복잡도는 O(n²)으로 느린 편이지만 구현하기 쉽습니다.`),w=i(),h=e("h2"),$s=e("a"),Zs=u("삽입 정렬 수행 방식"),Fs=i(),As=e("ol"),Ys=e("li"),Ws=u("현재 index에 있는 데이터 값을 선택한다."),os=i(),N=e("li"),Rs=u("현재 선택한 데이터가 정렬된 데이터 범위에 삽일될 위치를 탐색한다."),nn=i(),Vs=e("li"),gs=u("삽입 위치부터 index에 있는 위치까지 shift 연산을 수행한다."),G=i(),Ts=e("li"),Xs=u("삽입 위치에 현재 선택한 데이터를 삽입하고 index++ 연산을 수행한다."),H=i(),P=e("li"),js=u("전체 데이터의 크기만큼 index가 커질 때까지, 즉 선택할 데이터가 없을 떄까지 반복한다."),sn=i(),qs=e("h1"),cs=e("a"),Us=u("퀵 정렬"),an=i(),ln=e("p"),fn=u(`퀵 정렬은 기준값을 선정해 해당값보다 작은 데이터와 큰 데이터로 분류하는 것을 반복해 정렬하는 알고리즘 입니다.
퀵 정렬 수행 방식`),un=i(),pn=e("ol"),kn=e("li"),on=u("피벗 설정: 배열에서 피벗(pivot)을 설정합니다."),En=i(),dn=e("li"),mn=u("데이터 분할: 피벗을 기준으로 데이터를 두 개의 집합으로 나눕니다."),en=e("ul"),hn=e("li"),rn=u("a. start 이동: start가 가리키는 값이 피벗 값보다 작으면, start를 오른쪽으로 한 칸 이동합니다."),Ln=i(),Pn=e("li"),wn=u("b. end 이동: end가 가리키는 값이 피벗 값보다 크면, end를 왼쪽으로 한 칸 이동합니다."),cn=i(),yn=e("li"),Jn=u(`c. 교환: start가 가리키는 값이 피벗 값보다 크고, end가 가리키는 값이 피벗 값보다 작으면, start와 end가 가리키는 값을 교환한 후, start는 오른쪽으로, end는 왼쪽으로 한 칸
이동합니다.`),vn=i(),_n=e("li"),bn=u("d. 반복: start와 end가 만날 때까지 a~c 단계를 반복합니다."),Un=i(),Mn=e("li"),Sn=u("e. 피벗 위치 확정: start와 end가 만나면, 피벗 값을 start와 end가 만난 지점에 넣습니다. 피벗 값이 더 크면 왼쪽, 더 작으면 오른쪽에 삽입합니다."),An=i(),Xn=e("li"),$n=u("재귀 호출: 나뉜 두 집합에서 각각 다시 피벗을 선정하여 위 과정을 반복합니다."),zn=i(),gn=e("li"),Bn=u("완료: 분리된 집합이 1개 이하가 될 때까지 1~3 과정을 반복합니다."),Fn=i(),sa=e("p"),J=u("퀵 정렬은 빠르고 효율적이므로 코딩 테스트에서도 자주 사용됩니다. 재귀 함수 형태로 구현해보는 것을 추천합니다."),Js=i(),In=e("p"),ta=u("피벗을 정하는 방법"),xn=i(),qn=e("ul"),T=e("li"),Ds=u("pivot이 같을경우: K번째 수를 찾았으므로 알고리즘을 종료합니다."),ra=i(),ka=e("li"),_a=u("pivot이 큰경우: pivot의 왼쪽 부분에 K가 있으므로 왼쪽 부분(start ~ pivot-1)만 정렬합니다."),ma=i(),Aa=e("li"),ya=u("pivot이 작은경우: pivot의 오른쪽 부분에 K가 있으므로 오른쪽 부분(pivot+1 ~ end)만 정렬합니다."),pa=i(),Ia=e("h1"),va=e("a"),oa=u("병합 정렬"),na=i(),ia=e("p"),ea=u("병합정렬은 분할정복 방식을 사용해 데이터를 분할하고 분할한 집합을 정렬하며 합치는 알고리즘 입니다. 시간 복잡도 평균값은 O(nlongn) 입니다."),ua=i(),Ea=e("h2"),Zn=e("a"),Ta=u("병합 정렬 수행 방식"),Pa=i(),Kn=e("ol"),ca=e("li"),da=u("초기 데이터 [27, 12, 43, 39, 8, 32, 50, 29]를 가장 작은 단위로 분할하여 각 부분 집합을 정렬합니다."),R=i(),zs=e("li"),ja=u("첫 번째 단계에서는 [27, 12]는 [12, 27]로, [43, 39]는 [39, 43]으로, [8, 32]는 그대로, [50, 29]는 [29, 50]으로 정렬됩니다."),wa=i(),la=e("li"),$=u("두 번째 단계에서는 [12, 27]과 [39, 43]을 병합하여 [12, 27, 39, 43]로, [8, 32]와 [29, 50]을 병합하여 [8, 29, 32, 50]로 만듭니다."),Bs=i(),Ra=e("li"),Ma=u("마지막 단계에서는 두 개의 집합 [12, 27, 39, 43]과 [8, 29, 32, 50]을 병합하여 최종적으로 [8, 12, 27, 29, 32, 39, 43, 50]로 정렬합니다."),ba=i(),ha=e("p"),Oa=u("이와 같이 병합 정렬은 데이터를 분할하고 병합하면서 정렬하는 과정을 거쳐 전체 데이터를 정렬합니다."),Da=i(),aa=e("h1"),$a=e("a"),Ua=u("기수 정렬"),La=i(),Sa=e("p"),Ba=u(`기수 정렬은 값을 비교하지 않는 특이한 정렬입니다. 기수 정렬은 값을 놓고 비교할 자릿수를 정한 다음 해당 자릿수만 비교합니다.
기수 정렬의 시간 복잡도는 O(kn)으로, 여기서 k는 데이터의 자릿수를 말합니다.`),Ca=i(),fa=e("h2"),Na=e("a"),Fa=u("기수 정렬의 수행 방식"),xa=i(),Qn=e("ol"),y=e("li"),Cs=u("대상 데이터 준비: 정렬할 숫자 데이터를 준비합니다. 예를 들어, 16, 80, 18, 77, 03, 24, 88, 23."),Qa=i(),Ga=e("li"),Za=u("일의 자릿수 정렬"),Ja=e("ul"),Wa=e("li"),Pt=u("각 숫자의 일의 자릿수를 기준으로 큐에 분류합니다."),kt=i(),at=e("li"),wt=u("큐에 분류된 데이터를 순서대로 꺼내서 리스트를 만듭니다."),ga=i(),tt=e("li"),_t=u("이 과정이 끝나면 데이터는 일 자릿수를 기준으로 정렬됩니다."),Va=i(),Xa=e("li"),mt=u("십의 자릿수 정렬"),Ya=e("ul"),et=e("li"),pt=u("이번에는 각 숫자의 십의 자릿수를 기준으로 큐에 분류합니다."),vt=i(),st=e("li"),Et=u("큐에 분류된 데이터를 순서대로 꺼내서 리스트를 만듭니다."),rt=i(),Ka=e("li"),dt=u("이 과정이 끝나면 데이터는 십의 자릿수를 기준으로 정렬됩니다."),bt=i(),za=e("li"),ht=u("최종 정렬 결과 "),qa=e("ul"),Ha=e("li"),it=u("일의 자릿수와 십의 자릿수를 기준으로 정렬이 완료된 데이터를 얻습니다."),yt=i(),lt=e("li"),ot=u("최종적으로 데이터가 정렬된 상태가 됩니다."),ft=i(),nt=e("p"),Tt=u("이러한 과정을 통해 기수 정렬은 각 자릿수를 기준으로 데이터를 정렬합니다."),this.h()},l(U){a=p(U,"H1",{id:!0});var tn=o(a);r=p(tn,"A",{href:!0});var It=o(r);_=c(It,"버블정렬"),It.forEach(s),tn.forEach(s),v=f(U),t=p(U,"P",{});var Ct=o(t);k=c(Ct,"데이터의 인접 요소끼리 비교하고, swap 연산을 수행하며 정렬하는 방식 시간 복잡도는 O(n²)으로 다른 정렬 알고리즘보다 속도가 느린 편입니다."),Ct.forEach(s),d=f(U),L=p(U,"H2",{id:!0});var xt=o(L);M=p(xt,"A",{href:!0});var Ht=o(M);us=c(Ht,"버블 정렬 과정"),Ht.forEach(s),xt.forEach(s),C=f(U),I=p(U,"OL",{});var ut=o(I);es=p(ut,"LI",{});var Bt=o(es);X=c(Bt,"비교 연산이 필요한 루프 범위를 설정한다."),Bt.forEach(s),A=f(ut),Q=p(ut,"LI",{});var Ft=o(Q);B=c(Ft,"인접한 데이터 값을 비교한다."),Ft.forEach(s),q=f(ut),ps=p(ut,"LI",{});var Jt=o(ps);V=c(Jt,"swap 조건에 부합하면 swap 연산을 수행한다."),Jt.forEach(s),z=f(ut),K=p(ut,"LI",{});var zt=o(K);_s=c(zt,"루프 범위가 끝날 때 까지 2~3을 반복한다."),zt.forEach(s),rs=f(ut),ss=p(ut,"LI",{});var qt=o(ss);Es=c(qt,"정렬 영역을 설정한다. 다음 루프를 실행할 때는 이 영역을 제외한다."),qt.forEach(s),fs=f(ut),Y=p(ut,"LI",{});var te=o(Y);ts=c(te,"비교 대상이 없을 때까지 1~5를 반복한다."),te.forEach(s),ut.forEach(s),Z=f(U),D=p(U,"H1",{id:!0});var Vt=o(D);F=p(Vt,"A",{href:!0});var Yt=o(F);ns=c(Yt,"선택정렬"),Yt.forEach(s),Vt.forEach(s),x=f(U),b=p(U,"P",{});var Wt=o(b);g=c(Wt,`선택 정렬은 대상 데이터에서 최대나 최소 데이터를 데이터나 나열된 순으로 찾아 가며 선택하는 방법입니다.
선택 정렬은 구현 방법이 복잡하고, 시간 복잡도도 O(n²)으로 효율적이지 않아 코딩 테스트 에서는 잘 사용하지 않습니다.`),Wt.forEach(s),ms=f(U),hs=p(U,"H2",{id:!0});var Xt=o(hs);ds=p(Xt,"A",{href:!0});var Kt=o(ds);as=c(Kt,"선택 정렬 과정"),Kt.forEach(s),Xt.forEach(s),is=f(U),S=p(U,"OL",{});var $t=o(S);ys=p($t,"LI",{});var Ot=o(ys);O=c(Ot,"남은 정렬 부분에서 최솟값 또는 최댓값을 찾는다."),Ot.forEach(s),ks=f($t),bs=p($t,"LI",{});var Qt=o(bs);j=c(Qt,"남은 정렬 부분에서 가장 앞에 있는 데이터와 선택된 데이터를 swap한다."),Qt.forEach(s),vs=f($t),ls=p($t,"LI",{});var Zt=o(ls);Ps=c(Zt,"가장 앞에 있는 데이터으 위치를 변경해 남은 정렬 부분의 범위를 축소한다."),Zt.forEach(s),Is=f($t),Ls=p($t,"LI",{});var Nt=o(Ls);xs=c(Nt,"전체 데이터 크기 만큼 index가 커질 때까지, 남은 정렬 부분이 없어질때까지 반복한다."),Nt.forEach(s),$t.forEach(s),W=f(U),ws=p(U,"H1",{id:!0});var Lt=o(ws);Ss=p(Lt,"A",{href:!0});var gt=o(Ss);Ms=c(gt,"삽입 정렬"),gt.forEach(s),Lt.forEach(s),Ns=f(U),Hs=p(U,"P",{});var se=o(Hs);Gs=c(se,`삽입 정렬은 이미 정렬된 데이터 범위에 정렬되지 않은 데이터를 적절한 위치에 삽입시켜 정렬하는 방식입니다.
평균 시간 복잡도는 O(n²)으로 느린 편이지만 구현하기 쉽습니다.`),se.forEach(s),w=f(U),h=p(U,"H2",{id:!0});var ne=o(h);$s=p(ne,"A",{href:!0});var ae=o($s);Zs=c(ae,"삽입 정렬 수행 방식"),ae.forEach(s),ne.forEach(s),Fs=f(U),As=p(U,"OL",{});var St=o(As);Ys=p(St,"LI",{});var Ve=o(Ys);Ws=c(Ve,"현재 index에 있는 데이터 값을 선택한다."),Ve.forEach(s),os=f(St),N=p(St,"LI",{});var Ye=o(N);Rs=c(Ye,"현재 선택한 데이터가 정렬된 데이터 범위에 삽일될 위치를 탐색한다."),Ye.forEach(s),nn=f(St),Vs=p(St,"LI",{});var We=o(Vs);gs=c(We,"삽입 위치부터 index에 있는 위치까지 shift 연산을 수행한다."),We.forEach(s),G=f(St),Ts=p(St,"LI",{});var Xe=o(Ts);Xs=c(Xe,"삽입 위치에 현재 선택한 데이터를 삽입하고 index++ 연산을 수행한다."),Xe.forEach(s),H=f(St),P=p(St,"LI",{});var Ke=o(P);js=c(Ke,"전체 데이터의 크기만큼 index가 커질 때까지, 즉 선택할 데이터가 없을 떄까지 반복한다."),Ke.forEach(s),St.forEach(s),sn=f(U),qs=p(U,"H1",{id:!0});var Qe=o(qs);cs=p(Qe,"A",{href:!0});var Ze=o(cs);Us=c(Ze,"퀵 정렬"),Ze.forEach(s),Qe.forEach(s),an=f(U),ln=p(U,"P",{});var ge=o(ln);fn=c(ge,`퀵 정렬은 기준값을 선정해 해당값보다 작은 데이터와 큰 데이터로 분류하는 것을 반복해 정렬하는 알고리즘 입니다.
퀵 정렬 수행 방식`),ge.forEach(s),un=f(U),pn=p(U,"OL",{});var jt=o(pn);kn=p(jt,"LI",{});var sp=o(kn);on=c(sp,"피벗 설정: 배열에서 피벗(pivot)을 설정합니다."),sp.forEach(s),En=f(jt),dn=p(jt,"LI",{});var oe=o(dn);mn=c(oe,"데이터 분할: 피벗을 기준으로 데이터를 두 개의 집합으로 나눕니다."),en=p(oe,"UL",{});var At=o(en);hn=p(At,"LI",{});var np=o(hn);rn=c(np,"a. start 이동: start가 가리키는 값이 피벗 값보다 작으면, start를 오른쪽으로 한 칸 이동합니다."),np.forEach(s),Ln=f(At),Pn=p(At,"LI",{});var ap=o(Pn);wn=c(ap,"b. end 이동: end가 가리키는 값이 피벗 값보다 크면, end를 왼쪽으로 한 칸 이동합니다."),ap.forEach(s),cn=f(At),yn=p(At,"LI",{});var tp=o(yn);Jn=c(tp,`c. 교환: start가 가리키는 값이 피벗 값보다 크고, end가 가리키는 값이 피벗 값보다 작으면, start와 end가 가리키는 값을 교환한 후, start는 오른쪽으로, end는 왼쪽으로 한 칸
이동합니다.`),tp.forEach(s),vn=f(At),_n=p(At,"LI",{});var ep=o(_n);bn=c(ep,"d. 반복: start와 end가 만날 때까지 a~c 단계를 반복합니다."),ep.forEach(s),Un=f(At),Mn=p(At,"LI",{});var pp=o(Mn);Sn=c(pp,"e. 피벗 위치 확정: start와 end가 만나면, 피벗 값을 start와 end가 만난 지점에 넣습니다. 피벗 값이 더 크면 왼쪽, 더 작으면 오른쪽에 삽입합니다."),pp.forEach(s),At.forEach(s),oe.forEach(s),An=f(jt),Xn=p(jt,"LI",{});var lp=o(Xn);$n=c(lp,"재귀 호출: 나뉜 두 집합에서 각각 다시 피벗을 선정하여 위 과정을 반복합니다."),lp.forEach(s),zn=f(jt),gn=p(jt,"LI",{});var op=o(gn);Bn=c(op,"완료: 분리된 집합이 1개 이하가 될 때까지 1~3 과정을 반복합니다."),op.forEach(s),jt.forEach(s),Fn=f(U),sa=p(U,"P",{});var up=o(sa);J=c(up,"퀵 정렬은 빠르고 효율적이므로 코딩 테스트에서도 자주 사용됩니다. 재귀 함수 형태로 구현해보는 것을 추천합니다."),up.forEach(s),Js=f(U),In=p(U,"P",{});var cp=o(In);ta=c(cp,"피벗을 정하는 방법"),cp.forEach(s),xn=f(U),qn=p(U,"UL",{});var Gt=o(qn);T=p(Gt,"LI",{});var rp=o(T);Ds=c(rp,"pivot이 같을경우: K번째 수를 찾았으므로 알고리즘을 종료합니다."),rp.forEach(s),ra=f(Gt),ka=p(Gt,"LI",{});var ip=o(ka);_a=c(ip,"pivot이 큰경우: pivot의 왼쪽 부분에 K가 있으므로 왼쪽 부분(start ~ pivot-1)만 정렬합니다."),ip.forEach(s),ma=f(Gt),Aa=p(Gt,"LI",{});var fp=o(Aa);ya=c(fp,"pivot이 작은경우: pivot의 오른쪽 부분에 K가 있으므로 오른쪽 부분(pivot+1 ~ end)만 정렬합니다."),fp.forEach(s),Gt.forEach(s),pa=f(U),Ia=p(U,"H1",{id:!0});var kp=o(Ia);va=p(kp,"A",{href:!0});var _p=o(va);oa=c(_p,"병합 정렬"),_p.forEach(s),kp.forEach(s),na=f(U),ia=p(U,"P",{});var mp=o(ia);ea=c(mp,"병합정렬은 분할정복 방식을 사용해 데이터를 분할하고 분할한 집합을 정렬하며 합치는 알고리즘 입니다. 시간 복잡도 평균값은 O(nlongn) 입니다."),mp.forEach(s),ua=f(U),Ea=p(U,"H2",{id:!0});var vp=o(Ea);Zn=p(vp,"A",{href:!0});var Ep=o(Zn);Ta=c(Ep,"병합 정렬 수행 방식"),Ep.forEach(s),vp.forEach(s),Pa=f(U),Kn=p(U,"OL",{});var Rt=o(Kn);ca=p(Rt,"LI",{});var dp=o(ca);da=c(dp,"초기 데이터 [27, 12, 43, 39, 8, 32, 50, 29]를 가장 작은 단위로 분할하여 각 부분 집합을 정렬합니다."),dp.forEach(s),R=f(Rt),zs=p(Rt,"LI",{});var hp=o(zs);ja=c(hp,"첫 번째 단계에서는 [27, 12]는 [12, 27]로, [43, 39]는 [39, 43]으로, [8, 32]는 그대로, [50, 29]는 [29, 50]으로 정렬됩니다."),hp.forEach(s),wa=f(Rt),la=p(Rt,"LI",{});var yp=o(la);$=c(yp,"두 번째 단계에서는 [12, 27]과 [39, 43]을 병합하여 [12, 27, 39, 43]로, [8, 32]와 [29, 50]을 병합하여 [8, 29, 32, 50]로 만듭니다."),yp.forEach(s),Bs=f(Rt),Ra=p(Rt,"LI",{});var Pp=o(Ra);Ma=c(Pp,"마지막 단계에서는 두 개의 집합 [12, 27, 39, 43]과 [8, 29, 32, 50]을 병합하여 최종적으로 [8, 12, 27, 29, 32, 39, 43, 50]로 정렬합니다."),Pp.forEach(s),Rt.forEach(s),ba=f(U),ha=p(U,"P",{});var wp=o(ha);Oa=c(wp,"이와 같이 병합 정렬은 데이터를 분할하고 병합하면서 정렬하는 과정을 거쳐 전체 데이터를 정렬합니다."),wp.forEach(s),Da=f(U),aa=p(U,"H1",{id:!0});var bp=o(aa);$a=p(bp,"A",{href:!0});var $p=o($a);Ua=c($p,"기수 정렬"),$p.forEach(s),bp.forEach(s),La=f(U),Sa=p(U,"P",{});var Lp=o(Sa);Ba=c(Lp,`기수 정렬은 값을 비교하지 않는 특이한 정렬입니다. 기수 정렬은 값을 놓고 비교할 자릿수를 정한 다음 해당 자릿수만 비교합니다.
기수 정렬의 시간 복잡도는 O(kn)으로, 여기서 k는 데이터의 자릿수를 말합니다.`),Lp.forEach(s),Ca=f(U),fa=p(U,"H2",{id:!0});var Sp=o(fa);Na=p(Sp,"A",{href:!0});var Ap=o(Na);Fa=c(Ap,"기수 정렬의 수행 방식"),Ap.forEach(s),Sp.forEach(s),xa=f(U),Qn=p(U,"OL",{});var Mt=o(Qn);y=p(Mt,"LI",{});var Tp=o(y);Cs=c(Tp,"대상 데이터 준비: 정렬할 숫자 데이터를 준비합니다. 예를 들어, 16, 80, 18, 77, 03, 24, 88, 23."),Tp.forEach(s),Qa=f(Mt),Ga=p(Mt,"LI",{});var ue=o(Ga);Za=c(ue,"일의 자릿수 정렬"),Ja=p(ue,"UL",{});var Dt=o(Ja);Wa=p(Dt,"LI",{});var Op=o(Wa);Pt=c(Op,"각 숫자의 일의 자릿수를 기준으로 큐에 분류합니다."),Op.forEach(s),kt=f(Dt),at=p(Dt,"LI",{});var Ip=o(at);wt=c(Ip,"큐에 분류된 데이터를 순서대로 꺼내서 리스트를 만듭니다."),Ip.forEach(s),ga=f(Dt),tt=p(Dt,"LI",{});var xp=o(tt);_t=c(xp,"이 과정이 끝나면 데이터는 일 자릿수를 기준으로 정렬됩니다."),xp.forEach(s),Dt.forEach(s),ue.forEach(s),Va=f(Mt),Xa=p(Mt,"LI",{});var ce=o(Xa);mt=c(ce,"십의 자릿수 정렬"),Ya=p(ce,"UL",{});var Ut=o(Ya);et=p(Ut,"LI",{});var Hp=o(et);pt=c(Hp,"이번에는 각 숫자의 십의 자릿수를 기준으로 큐에 분류합니다."),Hp.forEach(s),vt=f(Ut),st=p(Ut,"LI",{});var jp=o(st);Et=c(jp,"큐에 분류된 데이터를 순서대로 꺼내서 리스트를 만듭니다."),jp.forEach(s),rt=f(Ut),Ka=p(Ut,"LI",{});var Rp=o(Ka);dt=c(Rp,"이 과정이 끝나면 데이터는 십의 자릿수를 기준으로 정렬됩니다."),Rp.forEach(s),Ut.forEach(s),ce.forEach(s),bt=f(Mt),za=p(Mt,"LI",{});var re=o(za);ht=c(re,"최종 정렬 결과 "),qa=p(re,"UL",{});var ee=o(qa);Ha=p(ee,"LI",{});var Mp=o(Ha);it=c(Mp,"일의 자릿수와 십의 자릿수를 기준으로 정렬이 완료된 데이터를 얻습니다."),Mp.forEach(s),yt=f(ee),lt=p(ee,"LI",{});var Cp=o(lt);ot=c(Cp,"최종적으로 데이터가 정렬된 상태가 됩니다."),Cp.forEach(s),ee.forEach(s),re.forEach(s),Mt.forEach(s),ft=f(U),nt=p(U,"P",{});var Np=o(nt);Tt=c(Np,"이러한 과정을 통해 기수 정렬은 각 자릿수를 기준으로 데이터를 정렬합니다."),Np.forEach(s),this.h()},h(){m(r,"href","#버블정렬"),m(a,"id","버블정렬"),m(M,"href","#버블-정렬-과정"),m(L,"id","버블-정렬-과정"),m(F,"href","#선택정렬"),m(D,"id","선택정렬"),m(ds,"href","#선택-정렬-과정"),m(hs,"id","선택-정렬-과정"),m(Ss,"href","#삽입-정렬"),m(ws,"id","삽입-정렬"),m($s,"href","#삽입-정렬-수행-방식"),m(h,"id","삽입-정렬-수행-방식"),m(cs,"href","#퀵-정렬"),m(qs,"id","퀵-정렬"),m(va,"href","#병합-정렬"),m(Ia,"id","병합-정렬"),m(Zn,"href","#병합-정렬-수행-방식"),m(Ea,"id","병합-정렬-수행-방식"),m($a,"href","#기수-정렬"),m(aa,"id","기수-정렬"),m(Na,"href","#기수-정렬의-수행-방식"),m(fa,"id","기수-정렬의-수행-방식")},m(U,tn){l(U,a,tn),n(a,r),n(r,_),l(U,v,tn),l(U,t,tn),n(t,k),l(U,d,tn),l(U,L,tn),n(L,M),n(M,us),l(U,C,tn),l(U,I,tn),n(I,es),n(es,X),n(I,A),n(I,Q),n(Q,B),n(I,q),n(I,ps),n(ps,V),n(I,z),n(I,K),n(K,_s),n(I,rs),n(I,ss),n(ss,Es),n(I,fs),n(I,Y),n(Y,ts),l(U,Z,tn),l(U,D,tn),n(D,F),n(F,ns),l(U,x,tn),l(U,b,tn),n(b,g),l(U,ms,tn),l(U,hs,tn),n(hs,ds),n(ds,as),l(U,is,tn),l(U,S,tn),n(S,ys),n(ys,O),n(S,ks),n(S,bs),n(bs,j),n(S,vs),n(S,ls),n(ls,Ps),n(S,Is),n(S,Ls),n(Ls,xs),l(U,W,tn),l(U,ws,tn),n(ws,Ss),n(Ss,Ms),l(U,Ns,tn),l(U,Hs,tn),n(Hs,Gs),l(U,w,tn),l(U,h,tn),n(h,$s),n($s,Zs),l(U,Fs,tn),l(U,As,tn),n(As,Ys),n(Ys,Ws),n(As,os),n(As,N),n(N,Rs),n(As,nn),n(As,Vs),n(Vs,gs),n(As,G),n(As,Ts),n(Ts,Xs),n(As,H),n(As,P),n(P,js),l(U,sn,tn),l(U,qs,tn),n(qs,cs),n(cs,Us),l(U,an,tn),l(U,ln,tn),n(ln,fn),l(U,un,tn),l(U,pn,tn),n(pn,kn),n(kn,on),n(pn,En),n(pn,dn),n(dn,mn),n(dn,en),n(en,hn),n(hn,rn),n(en,Ln),n(en,Pn),n(Pn,wn),n(en,cn),n(en,yn),n(yn,Jn),n(en,vn),n(en,_n),n(_n,bn),n(en,Un),n(en,Mn),n(Mn,Sn),n(pn,An),n(pn,Xn),n(Xn,$n),n(pn,zn),n(pn,gn),n(gn,Bn),l(U,Fn,tn),l(U,sa,tn),n(sa,J),l(U,Js,tn),l(U,In,tn),n(In,ta),l(U,xn,tn),l(U,qn,tn),n(qn,T),n(T,Ds),n(qn,ra),n(qn,ka),n(ka,_a),n(qn,ma),n(qn,Aa),n(Aa,ya),l(U,pa,tn),l(U,Ia,tn),n(Ia,va),n(va,oa),l(U,na,tn),l(U,ia,tn),n(ia,ea),l(U,ua,tn),l(U,Ea,tn),n(Ea,Zn),n(Zn,Ta),l(U,Pa,tn),l(U,Kn,tn),n(Kn,ca),n(ca,da),n(Kn,R),n(Kn,zs),n(zs,ja),n(Kn,wa),n(Kn,la),n(la,$),n(Kn,Bs),n(Kn,Ra),n(Ra,Ma),l(U,ba,tn),l(U,ha,tn),n(ha,Oa),l(U,Da,tn),l(U,aa,tn),n(aa,$a),n($a,Ua),l(U,La,tn),l(U,Sa,tn),n(Sa,Ba),l(U,Ca,tn),l(U,fa,tn),n(fa,Na),n(Na,Fa),l(U,xa,tn),l(U,Qn,tn),n(Qn,y),n(y,Cs),n(Qn,Qa),n(Qn,Ga),n(Ga,Za),n(Ga,Ja),n(Ja,Wa),n(Wa,Pt),n(Ja,kt),n(Ja,at),n(at,wt),n(Ja,ga),n(Ja,tt),n(tt,_t),n(Qn,Va),n(Qn,Xa),n(Xa,mt),n(Xa,Ya),n(Ya,et),n(et,pt),n(Ya,vt),n(Ya,st),n(st,Et),n(Ya,rt),n(Ya,Ka),n(Ka,dt),n(Qn,bt),n(Qn,za),n(za,ht),n(za,qa),n(qa,Ha),n(Ha,it),n(qa,yt),n(qa,lt),n(lt,ot),l(U,ft,tn),l(U,nt,tn),n(nt,Tt)},p:Vn,d(U){U&&s(a),U&&s(v),U&&s(t),U&&s(d),U&&s(L),U&&s(C),U&&s(I),U&&s(Z),U&&s(D),U&&s(x),U&&s(b),U&&s(ms),U&&s(hs),U&&s(is),U&&s(S),U&&s(W),U&&s(ws),U&&s(Ns),U&&s(Hs),U&&s(w),U&&s(h),U&&s(Fs),U&&s(As),U&&s(sn),U&&s(qs),U&&s(an),U&&s(ln),U&&s(un),U&&s(pn),U&&s(Fn),U&&s(sa),U&&s(Js),U&&s(In),U&&s(xn),U&&s(qn),U&&s(pa),U&&s(Ia),U&&s(na),U&&s(ia),U&&s(ua),U&&s(Ea),U&&s(Pa),U&&s(Kn),U&&s(ba),U&&s(ha),U&&s(Da),U&&s(aa),U&&s(La),U&&s(Sa),U&&s(Ca),U&&s(fa),U&&s(xa),U&&s(Qn),U&&s(ft),U&&s(nt)}}}function ru(E){let a,r;const _=[E[0],xe];let v={$$slots:{default:[cu]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(xe)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const xe={title:"정렬",summary:"",date:"2024-06-01",tags:[""]};function iu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let fu=class extends Hn{constructor(a){super(),jn(this,a,iu,ru,Rn,{})}};const ku=Object.freeze(Object.defineProperty({__proto__:null,default:fu,metadata:xe},Symbol.toStringTag,{value:"Module"}));function _u(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V;return{c(){a=e("h1"),r=e("a"),_=u("투포인터 기법"),v=i(),t=e("p"),k=u(`startIndex, endIndex를 지정해서 한칸씩 이동시키며 원하는 합이나 수들을 찾는 방법이다.
아래 이동원칙을 endIndex가 N이 될 때 까지 반복하되, 포인터가 이동할 때마다 현재의 총합과 비교해가며 값을 채운다.`),d=i(),L=e("h2"),M=e("a"),us=u("투포인터 이동 원칙"),C=i(),I=e("ul"),es=e("li"),X=u("sum이 큰경우 : sum = sum - startIndex; startIndex++;"),A=i(),Q=e("li"),B=u("sum이 작은경우: endIndex++; sum = sum + endIndex;"),q=i(),ps=e("li"),V=u("sum을 찾은경우: endIndex++; sum = sum + endIndex; count++;"),this.h()},l(z){a=p(z,"H1",{id:!0});var K=o(a);r=p(K,"A",{href:!0});var _s=o(r);_=c(_s,"투포인터 기법"),_s.forEach(s),K.forEach(s),v=f(z),t=p(z,"P",{});var rs=o(t);k=c(rs,`startIndex, endIndex를 지정해서 한칸씩 이동시키며 원하는 합이나 수들을 찾는 방법이다.
아래 이동원칙을 endIndex가 N이 될 때 까지 반복하되, 포인터가 이동할 때마다 현재의 총합과 비교해가며 값을 채운다.`),rs.forEach(s),d=f(z),L=p(z,"H2",{id:!0});var ss=o(L);M=p(ss,"A",{href:!0});var Es=o(M);us=c(Es,"투포인터 이동 원칙"),Es.forEach(s),ss.forEach(s),C=f(z),I=p(z,"UL",{});var fs=o(I);es=p(fs,"LI",{});var Y=o(es);X=c(Y,"sum이 큰경우 : sum = sum - startIndex; startIndex++;"),Y.forEach(s),A=f(fs),Q=p(fs,"LI",{});var ts=o(Q);B=c(ts,"sum이 작은경우: endIndex++; sum = sum + endIndex;"),ts.forEach(s),q=f(fs),ps=p(fs,"LI",{});var Z=o(ps);V=c(Z,"sum을 찾은경우: endIndex++; sum = sum + endIndex; count++;"),Z.forEach(s),fs.forEach(s),this.h()},h(){m(r,"href","#투포인터-기법"),m(a,"id","투포인터-기법"),m(M,"href","#투포인터-이동-원칙"),m(L,"id","투포인터-이동-원칙")},m(z,K){l(z,a,K),n(a,r),n(r,_),l(z,v,K),l(z,t,K),n(t,k),l(z,d,K),l(z,L,K),n(L,M),n(M,us),l(z,C,K),l(z,I,K),n(I,es),n(es,X),n(I,A),n(I,Q),n(Q,B),n(I,q),n(I,ps),n(ps,V)},p:Vn,d(z){z&&s(a),z&&s(v),z&&s(t),z&&s(d),z&&s(L),z&&s(C),z&&s(I)}}}function mu(E){let a,r;const _=[E[0],He];let v={$$slots:{default:[_u]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(He)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const He={title:"투포인터",summary:"",date:"2024-05-25",tags:[""]};function vu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Eu=class extends Hn{constructor(a){super(),jn(this,a,vu,mu,Rn,{})}};const du=Object.freeze(Object.defineProperty({__proto__:null,default:Eu,metadata:He},Symbol.toStringTag,{value:"Module"}));function hu(E){let a,r,_,v,t;return{c(){a=e("p"),r=e("a"),_=u("클린코드"),v=u(" 1장부터 10장까지의 내용은 노마드 코더의 클린코드 챌린지를 통해 정리하였습니다."),t=e("br"),this.h()},l(k){a=p(k,"P",{});var d=o(a);r=p(d,"A",{href:!0,rel:!0});var L=o(r);_=c(L,"클린코드"),L.forEach(s),v=c(d," 1장부터 10장까지의 내용은 노마드 코더의 클린코드 챌린지를 통해 정리하였습니다."),t=p(d,"BR",{}),d.forEach(s),this.h()},h(){m(r,"href","https://www.yes24.com/Product/Goods/11681152"),m(r,"rel","nofollow")},m(k,d){l(k,a,d),n(a,r),n(r,_),n(a,v),n(a,t)},p:Vn,d(k){k&&s(a)}}}function yu(E){let a,r;const _=[E[0],je];let v={$$slots:{default:[hu]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(je)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const je={title:"클린코드",summary:"클린코드 정독후 요약사항을 정리합니다.",date:"2024-01-01",tags:["클린코드","개발"]};function Pu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let wu=class extends Hn{constructor(a){super(),jn(this,a,Pu,yu,Rn,{})}};const bu=Object.freeze(Object.defineProperty({__proto__:null,default:wu,metadata:je},Symbol.toStringTag,{value:"Module"}));function $u(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es=`<code class="language-java"><span class="token class-name">SuperDashboard</span> <span class="token class-name">Class</span> 책임
<span class="token operator">-</span> 소프트웨어 버전 정보 추적
<span class="token operator">-</span> 스윙 컴포넌트 관리
단일 책임 규칙에 위배<span class="token operator">!</span>

<span class="token class-name">Version</span> <span class="token class-name">Class</span>으로 버전정보 추적의 관심을 분리한다</code>`,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">StockExchange</span> <span class="token punctuation">&#123;</span>
	<span class="token class-name">Money</span> <span class="token function">currentPrice</span><span class="token punctuation">(</span><span class="token class-name">String</span> symbol<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

다음으로 <span class="token class-name">StockExchange</span> 인터페이스를 구현하는 <span class="token class-name">TokyoStockExchange</span> 클래스를 구현한다<span class="token punctuation">.</span>
이후 <span class="token class-name">Portfolio</span> 생성자를 수정해 <span class="token class-name">StockExchange</span> 참조라를 인수로 받는다<span class="token punctuation">.</span></code>`,ws,Ss,Ms,Ns,Hs,Gs;return{c(){a=e("h3"),r=e("a"),_=u("클래스 체계"),v=i(),t=e("p"),k=u("표준 자바 관례에 따름 첫째로 변수목록, 정적 공개 상수가 있다면 맨 위층에 나온다, 다음에 정적 비공개 변수 이어서 비공개 인스턴스 변수가 나온다. 비공개 함수는 자신을 호출하는 공개 함수 직후에 넣는다. 즉 추상화 단계가 순차적으로 내려간다."),d=i(),L=e("p"),M=e("em"),us=u("캡슐화"),C=u("는 변수와 유틸리티 함수는 공개하지 않는 편이 낫지만 반드시 숨겨야한다는 법칙도 없다."),I=i(),es=e("h3"),X=e("a"),A=u("클래스는 작아야 한다!"),Q=i(),B=e("p"),q=u("클래스를 만들 때 첫 번째 규칙은 크기다. 두번째 규칙도 크기다, 더 작아야 한다. 그렇다면 얼마나 작아야 하는가 함수는 물리적인 행 수로 크기를 측정했다. 하지만 클래스는 다른 척도를 사용한다. 클래스가 맡은 책임을 센다. 클래스 이름은 해당 클래스 책임을 기술해야 한다. 간결한 이름이 떠오르지 않는다면 필경 클래스 크기가 너무 커서 그렇다. Processor, Manager, Super등과 같이 모호한 단어가 있다면 클래스에다 여러 책임을 떠안겼다는 증거다. 클래스 설명은 if,and,or,but을 사용하지 않고서 25단어 내외로 가능해야 한다."),ps=i(),V=e("p"),z=e("em"),K=u("단일 책임 원칙"),_s=u("은 클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다는 원칙이다. 책임, 즉 변경할 이유를 파악하려 애쓰다 보면 코드를 추상화하기도 쉬워진다. 더 좋은 추상화가 더 쉽게 떠오른다."),rs=i(),ss=e("pre"),fs=i(),Y=e("p"),ts=u("단일 책임 클래스가 많아지면 큰 그림을 이해하기 어려워진다고 우려한다, 큰 그림을 이해하려면 이 클래스 저 클래스를 수없이 넘나들어야 한다고 걱정하지만 명확한 컴포넌트로 나눠담아 관리하고 싶지 않은가?"),Z=i(),D=e("p"),F=u("일반적으로 메서드가 변수를 많이 사용할수록 "),ns=e("em"),x=u("응집도"),b=u("가 높다. 모든 인스턴스 변수를 메서드마다 사용하는 클래스는 으집도가 가장 높다. 바람직하지 않다. 응집도를 유지하면 작은 클래스가 여럿이 나온다. 큰 함수를 작은 함수 여럿으로 나누기만 해도 클래스 수가 많아진다. 클래스가 응집력을 잃는다면 쪼개라!"),g=i(),ms=e("h3"),hs=e("a"),ds=u("변경하기 쉬운 클래스"),as=i(),is=e("p"),S=u("깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험을 낮춘다. 어떤 변경이든 클래스에 손대면 다른 코드를 망가뜨릴 잠정적인 위험이 존재한다."),ys=i(),O=e("p"),ks=u("클래스 일부에서만 사용되는 함수나 책임을 각 클래스별로 나누라, 코드는 순시간에 이해되고 망가질 위험도 사라진다."),bs=i(),j=e("p"),vs=u("요구사항은 변하기 마련이다. 인터페이스와 추상 클래스를 사용해 구현에 미치는 영향을 격리한다. 상세한 구현에 의존하는 코드는 테스트가 어렵다."),ls=i(),Ps=e("p"),Is=u("아래 예시는 Porfolio클래스가 상시로 변하는 TokyoStockExchange API를 사용해 포트폴리오 값을 계산할때 결합도를 내리는 예시다."),Ls=i(),xs=e("pre"),ws=i(),Ss=e("p"),Ms=u("이렇게 구현하면 클래스는 주가로 언제나 100불을 반환하는 인터페이스를 구현한것이다."),Ns=i(),Hs=e("p"),Gs=u("위와 같이 테스트가 가능할 정도로 시스템의 결합도를 낮추면 유연성과 재사용성도 더욱 높아진다. 자연스럽게 DIP를 따르는 클래스가 나온다."),this.h()},l(w){a=p(w,"H3",{id:!0});var h=o(a);r=p(h,"A",{href:!0});var $s=o(r);_=c($s,"클래스 체계"),$s.forEach(s),h.forEach(s),v=f(w),t=p(w,"P",{});var Zs=o(t);k=c(Zs,"표준 자바 관례에 따름 첫째로 변수목록, 정적 공개 상수가 있다면 맨 위층에 나온다, 다음에 정적 비공개 변수 이어서 비공개 인스턴스 변수가 나온다. 비공개 함수는 자신을 호출하는 공개 함수 직후에 넣는다. 즉 추상화 단계가 순차적으로 내려간다."),Zs.forEach(s),d=f(w),L=p(w,"P",{});var Fs=o(L);M=p(Fs,"EM",{});var As=o(M);us=c(As,"캡슐화"),As.forEach(s),C=c(Fs,"는 변수와 유틸리티 함수는 공개하지 않는 편이 낫지만 반드시 숨겨야한다는 법칙도 없다."),Fs.forEach(s),I=f(w),es=p(w,"H3",{id:!0});var Ys=o(es);X=p(Ys,"A",{href:!0});var Ws=o(X);A=c(Ws,"클래스는 작아야 한다!"),Ws.forEach(s),Ys.forEach(s),Q=f(w),B=p(w,"P",{});var os=o(B);q=c(os,"클래스를 만들 때 첫 번째 규칙은 크기다. 두번째 규칙도 크기다, 더 작아야 한다. 그렇다면 얼마나 작아야 하는가 함수는 물리적인 행 수로 크기를 측정했다. 하지만 클래스는 다른 척도를 사용한다. 클래스가 맡은 책임을 센다. 클래스 이름은 해당 클래스 책임을 기술해야 한다. 간결한 이름이 떠오르지 않는다면 필경 클래스 크기가 너무 커서 그렇다. Processor, Manager, Super등과 같이 모호한 단어가 있다면 클래스에다 여러 책임을 떠안겼다는 증거다. 클래스 설명은 if,and,or,but을 사용하지 않고서 25단어 내외로 가능해야 한다."),os.forEach(s),ps=f(w),V=p(w,"P",{});var N=o(V);z=p(N,"EM",{});var Rs=o(z);K=c(Rs,"단일 책임 원칙"),Rs.forEach(s),_s=c(N,"은 클래스나 모듈을 변경할 이유가 하나, 단 하나뿐이어야 한다는 원칙이다. 책임, 즉 변경할 이유를 파악하려 애쓰다 보면 코드를 추상화하기도 쉬워진다. 더 좋은 추상화가 더 쉽게 떠오른다."),N.forEach(s),rs=f(w),ss=p(w,"PRE",{class:!0});var nn=o(ss);nn.forEach(s),fs=f(w),Y=p(w,"P",{});var Vs=o(Y);ts=c(Vs,"단일 책임 클래스가 많아지면 큰 그림을 이해하기 어려워진다고 우려한다, 큰 그림을 이해하려면 이 클래스 저 클래스를 수없이 넘나들어야 한다고 걱정하지만 명확한 컴포넌트로 나눠담아 관리하고 싶지 않은가?"),Vs.forEach(s),Z=f(w),D=p(w,"P",{});var gs=o(D);F=c(gs,"일반적으로 메서드가 변수를 많이 사용할수록 "),ns=p(gs,"EM",{});var G=o(ns);x=c(G,"응집도"),G.forEach(s),b=c(gs,"가 높다. 모든 인스턴스 변수를 메서드마다 사용하는 클래스는 으집도가 가장 높다. 바람직하지 않다. 응집도를 유지하면 작은 클래스가 여럿이 나온다. 큰 함수를 작은 함수 여럿으로 나누기만 해도 클래스 수가 많아진다. 클래스가 응집력을 잃는다면 쪼개라!"),gs.forEach(s),g=f(w),ms=p(w,"H3",{id:!0});var Ts=o(ms);hs=p(Ts,"A",{href:!0});var Xs=o(hs);ds=c(Xs,"변경하기 쉬운 클래스"),Xs.forEach(s),Ts.forEach(s),as=f(w),is=p(w,"P",{});var H=o(is);S=c(H,"깨끗한 시스템은 클래스를 체계적으로 정리해 변경에 수반하는 위험을 낮춘다. 어떤 변경이든 클래스에 손대면 다른 코드를 망가뜨릴 잠정적인 위험이 존재한다."),H.forEach(s),ys=f(w),O=p(w,"P",{});var P=o(O);ks=c(P,"클래스 일부에서만 사용되는 함수나 책임을 각 클래스별로 나누라, 코드는 순시간에 이해되고 망가질 위험도 사라진다."),P.forEach(s),bs=f(w),j=p(w,"P",{});var js=o(j);vs=c(js,"요구사항은 변하기 마련이다. 인터페이스와 추상 클래스를 사용해 구현에 미치는 영향을 격리한다. 상세한 구현에 의존하는 코드는 테스트가 어렵다."),js.forEach(s),ls=f(w),Ps=p(w,"P",{});var sn=o(Ps);Is=c(sn,"아래 예시는 Porfolio클래스가 상시로 변하는 TokyoStockExchange API를 사용해 포트폴리오 값을 계산할때 결합도를 내리는 예시다."),sn.forEach(s),Ls=f(w),xs=p(w,"PRE",{class:!0});var qs=o(xs);qs.forEach(s),ws=f(w),Ss=p(w,"P",{});var cs=o(Ss);Ms=c(cs,"이렇게 구현하면 클래스는 주가로 언제나 100불을 반환하는 인터페이스를 구현한것이다."),cs.forEach(s),Ns=f(w),Hs=p(w,"P",{});var Us=o(Hs);Gs=c(Us,"위와 같이 테스트가 가능할 정도로 시스템의 결합도를 낮추면 유연성과 재사용성도 더욱 높아진다. 자연스럽게 DIP를 따르는 클래스가 나온다."),Us.forEach(s),this.h()},h(){m(r,"href","#클래스-체계"),m(a,"id","클래스-체계"),m(X,"href","#클래스는-작아야-한다"),m(es,"id","클래스는-작아야-한다"),m(ss,"class","language-java"),m(hs,"href","#변경하기-쉬운-클래스"),m(ms,"id","변경하기-쉬운-클래스"),m(xs,"class","language-java")},m(w,h){l(w,a,h),n(a,r),n(r,_),l(w,v,h),l(w,t,h),n(t,k),l(w,d,h),l(w,L,h),n(L,M),n(M,us),n(L,C),l(w,I,h),l(w,es,h),n(es,X),n(X,A),l(w,Q,h),l(w,B,h),n(B,q),l(w,ps,h),l(w,V,h),n(V,z),n(z,K),n(V,_s),l(w,rs,h),l(w,ss,h),ss.innerHTML=Es,l(w,fs,h),l(w,Y,h),n(Y,ts),l(w,Z,h),l(w,D,h),n(D,F),n(D,ns),n(ns,x),n(D,b),l(w,g,h),l(w,ms,h),n(ms,hs),n(hs,ds),l(w,as,h),l(w,is,h),n(is,S),l(w,ys,h),l(w,O,h),n(O,ks),l(w,bs,h),l(w,j,h),n(j,vs),l(w,ls,h),l(w,Ps,h),n(Ps,Is),l(w,Ls,h),l(w,xs,h),xs.innerHTML=W,l(w,ws,h),l(w,Ss,h),n(Ss,Ms),l(w,Ns,h),l(w,Hs,h),n(Hs,Gs)},p:Vn,d(w){w&&s(a),w&&s(v),w&&s(t),w&&s(d),w&&s(L),w&&s(I),w&&s(es),w&&s(Q),w&&s(B),w&&s(ps),w&&s(V),w&&s(rs),w&&s(ss),w&&s(fs),w&&s(Y),w&&s(Z),w&&s(D),w&&s(g),w&&s(ms),w&&s(as),w&&s(is),w&&s(ys),w&&s(O),w&&s(bs),w&&s(j),w&&s(ls),w&&s(Ps),w&&s(Ls),w&&s(xs),w&&s(ws),w&&s(Ss),w&&s(Ns),w&&s(Hs)}}}function Lu(E){let a,r;const _=[E[0],Re];let v={$$slots:{default:[$u]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Re)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Re={title:"10장 자료체계",summary:"클래스 설계의 중요 원칙과 이를 통한 유지보수성, 재사용성, 유연성의 향상을 설명합니다. 클래스 크기와 책임의 중요성, 응집도 높은 클래스의 구현, 그리고 클래스 변경의 용이성을 증진시키는 디자인 방식에 대해 논의합니다. 클래스는 단일 책임 원칙을 따라야 하며, 이는 시스템의 변화에 대응하는 능력을 향상시킵니다.",date:"2024-02-13",published:!1};function Su(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Au=class extends Hn{constructor(a){super(),jn(this,a,Su,Lu,Rn,{})}};const Tu=Object.freeze(Object.defineProperty({__proto__:null,default:Au,metadata:Re},Symbol.toStringTag,{value:"Module"}));function Ou(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs=`<code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Service</span> <span class="token function">getService</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>service <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        service <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyServiceImpl</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> service<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs,Fs,As,Ys,Ws,os;return{c(){a=e("h3"),r=e("a"),_=u("도시를 세운다면?"),v=i(),t=e("p"),k=u(`도시가 돌아가는 이유는 수도 관리 팀 등 여러 인프라를 관리하는 팀이 있기 때문이면서, 적절한 추상화와 모듈화 때문이다.
소프트웨어 팀도 도시처럼 구성한다. 시스템은 비슷한 수준으로 관심사를 분리하거나 추상화를 이뤄내지 못한다.
`),d=e("strong"),L=u("시스템 수준"),M=u("에서도 깨끗함을 유지하는 방법은 무엇일까."),us=i(),C=e("h3"),I=e("a"),es=u("시스템 제작과 시스템 사용을 분리하라"),X=i(),A=e("p"),Q=e("strong"),B=u("제작(construction)"),q=u("은 "),ps=e("strong"),V=u("사용(use)"),z=u(`과 아주 다르다.
호텔의 공사 시기에 있던 기중기와 승강기가 사라지고 호텔에 근무하고 체류하는 사람들로 채워 지듯이 말이다.
소프트웨어 시스템은 객체를 제작하고 의존성을 연결하는 준비과정과 런타임 로직을 분리해야 한다.`),K=i(),_s=e("p"),rs=u("시작단계는 모든 애플리케이션이 풀어야 할 관심사다. 관심사 분리는 우리 분야에서 가장 오래되고 가장 중요한 설계 기법이다."),ss=i(),Es=e("pre"),Y=i(),ts=e("p"),Z=u("위는 "),D=e("strong"),F=u("초기화 지연"),ns=u(" 혹은 "),x=e("strong"),b=u("계산 지연"),g=u(`이라는 기법이다. 실제로 필요할 떄까지 객체를 생성하지 않으므로 불필요한 부하가 걸리지 않고 Null 포인터를 반환하지 않는다.
하지만 첫째 MyServiceImpl 의존성을 해결하지 않으면 컴파일이 되지 않고, 단위 테스트에서 테스트 전용 객체가 필요할것이다.
또한 일반 런타임 로직에다 객체 생성 로직을 섞어 놓은탓에 모든 경로를 감안한 테스트를 해야한다. `),ms=e("strong"),hs=u("단일 책임 원칙 위반"),ds=u("이다."),as=i(),is=e("p"),S=u(`체계적이고 탄탄한 시스템을 위해서라면 흔히 쓰이는 손쉬운 기법으로 모듈성을 깨서는 절대로 안 된다.
객체를 생성하거나 의존성을 연결할때, 설정 논리와 일반 실행 논리를 분리해야 모듈성이 높아진다.`),ys=i(),O=e("h3"),ks=e("a"),bs=u("Main 분리"),j=i(),vs=e("p"),ls=u("시스템 생성과 시스템 사용을 분리하는 한 가지 방법은 "),Ps=e("strong"),Is=u("main 분리"),Ls=u(`이다.
제어 흐름은 main 함수에서 시스템에 필요한 객체를 생성한 후 이를 애플리케이션에 넘긴다. 애플리케이션은 그저 객체를 사용할 뿐이다.
main과 애플리케이션 사이에 표시된 의존성 화살표의 방향에 주목하자. 모든 화살표가 main 쪽에서 애플리케이션 쪽을 향한다.
즉 애플리케이션은 객체가 생성되는 과정을 전혀 모른다는 뜻이다.`),xs=i(),W=e("h3"),ws=e("a"),Ss=u("팩토리"),Ms=i(),Ns=e("p"),Hs=u("때로는 객체를 생성하는 책임을 다른 객체에게 넘기는 것이 좋다. 이를 "),Gs=e("strong"),w=u("팩토리"),h=u(`라고 부른다.
주문 처리 시스템에서 애플리케이션은 LineItem 인스턴스를 생성해 Order에 추가한다. 이때는 AbstractFactory 패턴을 사용하면 좋다.
그러면 생성시점은 애플리케이션이 결정하지만 생성코드는 애플리케이션이 모른다.`),$s=i(),Zs=e("h3"),Fs=e("a"),As=u("의존성 주입"),Ys=i(),Ws=e("p"),os=u("의존성 주입은 제어 역전의 한 형태다. 제어 역전은 프레임워크가 프로그램의 제어 흐름을 전적으로 가져가는 것을 말한다."),this.h()},l(N){a=p(N,"H3",{id:!0});var Rs=o(a);r=p(Rs,"A",{href:!0});var nn=o(r);_=c(nn,"도시를 세운다면?"),nn.forEach(s),Rs.forEach(s),v=f(N),t=p(N,"P",{});var Vs=o(t);k=c(Vs,`도시가 돌아가는 이유는 수도 관리 팀 등 여러 인프라를 관리하는 팀이 있기 때문이면서, 적절한 추상화와 모듈화 때문이다.
소프트웨어 팀도 도시처럼 구성한다. 시스템은 비슷한 수준으로 관심사를 분리하거나 추상화를 이뤄내지 못한다.
`),d=p(Vs,"STRONG",{});var gs=o(d);L=c(gs,"시스템 수준"),gs.forEach(s),M=c(Vs,"에서도 깨끗함을 유지하는 방법은 무엇일까."),Vs.forEach(s),us=f(N),C=p(N,"H3",{id:!0});var G=o(C);I=p(G,"A",{href:!0});var Ts=o(I);es=c(Ts,"시스템 제작과 시스템 사용을 분리하라"),Ts.forEach(s),G.forEach(s),X=f(N),A=p(N,"P",{});var Xs=o(A);Q=p(Xs,"STRONG",{});var H=o(Q);B=c(H,"제작(construction)"),H.forEach(s),q=c(Xs,"은 "),ps=p(Xs,"STRONG",{});var P=o(ps);V=c(P,"사용(use)"),P.forEach(s),z=c(Xs,`과 아주 다르다.
호텔의 공사 시기에 있던 기중기와 승강기가 사라지고 호텔에 근무하고 체류하는 사람들로 채워 지듯이 말이다.
소프트웨어 시스템은 객체를 제작하고 의존성을 연결하는 준비과정과 런타임 로직을 분리해야 한다.`),Xs.forEach(s),K=f(N),_s=p(N,"P",{});var js=o(_s);rs=c(js,"시작단계는 모든 애플리케이션이 풀어야 할 관심사다. 관심사 분리는 우리 분야에서 가장 오래되고 가장 중요한 설계 기법이다."),js.forEach(s),ss=f(N),Es=p(N,"PRE",{class:!0});var sn=o(Es);sn.forEach(s),Y=f(N),ts=p(N,"P",{});var qs=o(ts);Z=c(qs,"위는 "),D=p(qs,"STRONG",{});var cs=o(D);F=c(cs,"초기화 지연"),cs.forEach(s),ns=c(qs," 혹은 "),x=p(qs,"STRONG",{});var Us=o(x);b=c(Us,"계산 지연"),Us.forEach(s),g=c(qs,`이라는 기법이다. 실제로 필요할 떄까지 객체를 생성하지 않으므로 불필요한 부하가 걸리지 않고 Null 포인터를 반환하지 않는다.
하지만 첫째 MyServiceImpl 의존성을 해결하지 않으면 컴파일이 되지 않고, 단위 테스트에서 테스트 전용 객체가 필요할것이다.
또한 일반 런타임 로직에다 객체 생성 로직을 섞어 놓은탓에 모든 경로를 감안한 테스트를 해야한다. `),ms=p(qs,"STRONG",{});var an=o(ms);hs=c(an,"단일 책임 원칙 위반"),an.forEach(s),ds=c(qs,"이다."),qs.forEach(s),as=f(N),is=p(N,"P",{});var ln=o(is);S=c(ln,`체계적이고 탄탄한 시스템을 위해서라면 흔히 쓰이는 손쉬운 기법으로 모듈성을 깨서는 절대로 안 된다.
객체를 생성하거나 의존성을 연결할때, 설정 논리와 일반 실행 논리를 분리해야 모듈성이 높아진다.`),ln.forEach(s),ys=f(N),O=p(N,"H3",{id:!0});var fn=o(O);ks=p(fn,"A",{href:!0});var un=o(ks);bs=c(un,"Main 분리"),un.forEach(s),fn.forEach(s),j=f(N),vs=p(N,"P",{});var pn=o(vs);ls=c(pn,"시스템 생성과 시스템 사용을 분리하는 한 가지 방법은 "),Ps=p(pn,"STRONG",{});var kn=o(Ps);Is=c(kn,"main 분리"),kn.forEach(s),Ls=c(pn,`이다.
제어 흐름은 main 함수에서 시스템에 필요한 객체를 생성한 후 이를 애플리케이션에 넘긴다. 애플리케이션은 그저 객체를 사용할 뿐이다.
main과 애플리케이션 사이에 표시된 의존성 화살표의 방향에 주목하자. 모든 화살표가 main 쪽에서 애플리케이션 쪽을 향한다.
즉 애플리케이션은 객체가 생성되는 과정을 전혀 모른다는 뜻이다.`),pn.forEach(s),xs=f(N),W=p(N,"H3",{id:!0});var on=o(W);ws=p(on,"A",{href:!0});var En=o(ws);Ss=c(En,"팩토리"),En.forEach(s),on.forEach(s),Ms=f(N),Ns=p(N,"P",{});var dn=o(Ns);Hs=c(dn,"때로는 객체를 생성하는 책임을 다른 객체에게 넘기는 것이 좋다. 이를 "),Gs=p(dn,"STRONG",{});var mn=o(Gs);w=c(mn,"팩토리"),mn.forEach(s),h=c(dn,`라고 부른다.
주문 처리 시스템에서 애플리케이션은 LineItem 인스턴스를 생성해 Order에 추가한다. 이때는 AbstractFactory 패턴을 사용하면 좋다.
그러면 생성시점은 애플리케이션이 결정하지만 생성코드는 애플리케이션이 모른다.`),dn.forEach(s),$s=f(N),Zs=p(N,"H3",{id:!0});var en=o(Zs);Fs=p(en,"A",{href:!0});var hn=o(Fs);As=c(hn,"의존성 주입"),hn.forEach(s),en.forEach(s),Ys=f(N),Ws=p(N,"P",{});var rn=o(Ws);os=c(rn,"의존성 주입은 제어 역전의 한 형태다. 제어 역전은 프레임워크가 프로그램의 제어 흐름을 전적으로 가져가는 것을 말한다."),rn.forEach(s),this.h()},h(){m(r,"href","#도시를-세운다면"),m(a,"id","도시를-세운다면"),m(I,"href","#시스템-제작과-시스템-사용을-분리하라"),m(C,"id","시스템-제작과-시스템-사용을-분리하라"),m(Es,"class","language-java"),m(ks,"href","#main-분리"),m(O,"id","main-분리"),m(ws,"href","#팩토리"),m(W,"id","팩토리"),m(Fs,"href","#의존성-주입"),m(Zs,"id","의존성-주입")},m(N,Rs){l(N,a,Rs),n(a,r),n(r,_),l(N,v,Rs),l(N,t,Rs),n(t,k),n(t,d),n(d,L),n(t,M),l(N,us,Rs),l(N,C,Rs),n(C,I),n(I,es),l(N,X,Rs),l(N,A,Rs),n(A,Q),n(Q,B),n(A,q),n(A,ps),n(ps,V),n(A,z),l(N,K,Rs),l(N,_s,Rs),n(_s,rs),l(N,ss,Rs),l(N,Es,Rs),Es.innerHTML=fs,l(N,Y,Rs),l(N,ts,Rs),n(ts,Z),n(ts,D),n(D,F),n(ts,ns),n(ts,x),n(x,b),n(ts,g),n(ts,ms),n(ms,hs),n(ts,ds),l(N,as,Rs),l(N,is,Rs),n(is,S),l(N,ys,Rs),l(N,O,Rs),n(O,ks),n(ks,bs),l(N,j,Rs),l(N,vs,Rs),n(vs,ls),n(vs,Ps),n(Ps,Is),n(vs,Ls),l(N,xs,Rs),l(N,W,Rs),n(W,ws),n(ws,Ss),l(N,Ms,Rs),l(N,Ns,Rs),n(Ns,Hs),n(Ns,Gs),n(Gs,w),n(Ns,h),l(N,$s,Rs),l(N,Zs,Rs),n(Zs,Fs),n(Fs,As),l(N,Ys,Rs),l(N,Ws,Rs),n(Ws,os)},p:Vn,d(N){N&&s(a),N&&s(v),N&&s(t),N&&s(us),N&&s(C),N&&s(X),N&&s(A),N&&s(K),N&&s(_s),N&&s(ss),N&&s(Es),N&&s(Y),N&&s(ts),N&&s(as),N&&s(is),N&&s(ys),N&&s(O),N&&s(j),N&&s(vs),N&&s(xs),N&&s(W),N&&s(Ms),N&&s(Ns),N&&s($s),N&&s(Zs),N&&s(Ys),N&&s(Ws)}}}function Iu(E){let a,r;const _=[E[0],Me];let v={$$slots:{default:[Ou]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Me)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Me={title:"11장 시스템",summary:"소프트웨어 시스템을 설계할 때 모듈화와 책임의 분리는 마치 도시 인프라처럼 필수적입니다. 이 가이드에서는 시스템의 제작과 사용을 분리하는 방법, Main 분리, 팩토리 사용, 그리고 의존성 주입을 통해 높은 모듈성과 유지 관리 용이성을 달성하는 방법을 설명합니다. 각 섹션은 시스템 설계의 추상화와 모듈화를 통해 변경이 용이하고, 테스트 가능하며, 유연한 소프트웨어를 개발하는 데 필요한 전략을 제공합니다.",date:"2024-02-18",published:!1};function xu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Hu=class extends Hn{constructor(a){super(),jn(this,a,xu,Iu,Rn,{})}};const ju=Object.freeze(Object.defineProperty({__proto__:null,default:Hu,metadata:Me},Symbol.toStringTag,{value:"Module"}));function Ru(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs,Fs,As,Ys,Ws;return{c(){a=e("h2"),r=e("a"),_=e("strong"),v=u("클린 코드: 소프트웨어 개발 속도를 높이는 관문"),t=i(),k=e("p"),d=u(`소프트웨어 개발 영역에서 효율성과 속도에 대한 탐구는 종종 역설적인 진실로 이어집니다. 즉, 개발 프로세스를 진정으로 가속화하는 유일한 방법은 코드의 청결성을 유지하는 것입니다. 클린 코드 철학의 핵심인 이 원칙은
속도와 코드 품질이 상충되는 이해관계가 아니라 오히려 동일한 목표의 보완적인 측면임을 강조합니다.`),L=i(),M=e("h3"),us=e("a"),C=e("strong"),I=u("클린 코드의 기초"),es=i(),X=e("p"),A=u(`클린 코드의 핵심은 단순히 작동하는 코드를 작성하는 것 이상입니다. 원저작자가 아닌 다른 사람도 쉽게 읽고, 이해하고, 수정할 수 있는 코드를 만드는 것입니다. 이 개념은 해당 주제에 관한 문헌의 주목할만한 주장으로
우아하게 요약되어 있습니다. “빠르게 진행하는 유일한 방법은 항상 코드를 깨끗하게 유지하는 것입니다.” 이 선언문은 개발자에게 지침이 되어 프로젝트의 효율성과 효율성을 높이는 경로로서 코드의 청결성을
우선시하도록 촉구합니다.`),Q=i(),B=e("h3"),q=e("a"),ps=e("strong"),V=u("클린 코드 구현: 4단계 접근 방식"),z=i(),K=e("p"),_s=u("클린 코드를 향한 여정은 구현을 위한 네 가지 간단한 규칙을 채택하는 것부터 시작할 수 있습니다."),rs=i(),ss=e("ol"),Es=e("li"),fs=e("strong"),Y=u("모든 테스트 통과:"),ts=u(` 코드가 모든 테스트를 일관되게 통과하는지 확인하는 것이 청결을 향한 첫 번째 단계입니다. 이는 코드가 기능적 요구 사항을 충족할 뿐만 아니라 개발 팀이 정한 품질 표준을 준수함을
보장합니다.`),Z=i(),D=e("li"),F=e("strong"),ns=u("중복 금지:"),x=u(" 중복은 클린 코드의 적입니다. 중복된 코드 조각을 피하면 코드베이스를 보다 쉽게 관리할 수 있을 뿐만 아니라 오류 및 불일치 가능성도 줄어듭니다."),b=i(),g=e("li"),ms=e("strong"),hs=u("시스템 내에서 모든 디자인 아이디어 표현:"),ds=u(" 클린 코드는 디자인 의도를 효과적으로 전달하므로 미래의 개발자가 특정 구현의 근거와 전체 시스템 아키텍처에 어떻게 적용되는지 더 쉽게 이해할 수 있습니다."),as=i(),is=e("li"),S=e("strong"),ys=u("클래스, 메서드, 함수 등의 수를 최소화하세요."),O=u(" 단순화가 핵심입니다. 코드의 복잡성을 줄임으로써 개발자는 코드의 가독성과 유지 관리성을 향상시켜 더 쉽게 업데이트하고 수정할 수 있습니다."),ks=i(),bs=e("h3"),j=e("a"),vs=e("strong"),ls=u("캠프장의 규칙: 처음 찾은 것보다 코드베이스를 더 좋게 남겨두기"),Ps=i(),Is=e("p"),Ls=u(`클린 코드의 필수 정신은 “캠프장을 처음 도착했을 때보다 깨끗하게 유지하세요”라는 조언에 요약되어 있습니다. 이 은유적 지침은 개발자가 작업하는 코드를 지속적으로 개선하고 개선하여 각 기여가 가치를 더할 뿐만 아니라
코드베이스의 전반적인 품질을 향상시키도록 장려합니다. 이러한 접근 방식은 청결과 효율성을 지속적으로 우선시하는 지속적인 개선 문화를 조성합니다.`),xs=i(),W=e("h3"),ws=e("a"),Ss=e("strong"),Ms=u("청결을 향한 끝없는 여정"),Ns=i(),Hs=e("p"),Gs=u(`깨끗한 코드를 달성하기 위해 설명된 명확한 경로와 원칙에도 불구하고 여정은 계속 진행 중입니다. 본문에는 “클린코드에 대한 끝없는 고민은 정리하고 계속 정리하는 방법인데 왕도는 없는 것 같다. 그냥 청소를 쉽게
해주는 패턴이 있는 것 같다”고 인정하고 있다. 이 성찰은 더 깔끔한 코드를 촉진하는 전략과 관행이 있지만 프로세스에는 지속적인 경계와 노력이 필요하다는 점을 강조합니다. 청결에 대한 단일 솔루션이나 “왕도”는
없습니다. 이는 학습하고, 적응하고, 개선하는 지속적인 과정입니다.`),w=i(),h=e("h3"),$s=e("a"),Zs=e("strong"),Fs=u("결론"),As=i(),Ys=e("p"),Ws=u(`클린 코드는 효율적이고 지속 가능한 소프트웨어 개발의 초석입니다. 간단한 규칙을 준수하고, 지속적인 개선 정신을 수용하고, 여정의 지속적인 성격을 인식함으로써 개발자는 코드가 깨끗하고 효율적이며 미래에도 대비할 수
있도록 보장할 수 있습니다. 이 접근 방식은 개발 프로세스를 가속화할 뿐만 아니라 코드베이스가 시간이 지나도 강력하고 적응 가능하며 유지 관리하기 쉬운 상태로 유지되도록 보장합니다. 끊임없이 진화하는 소프트웨어 개발
환경에서 클린 코드는 개발자가 더 좋고, 더 빠르고, 더 안정적인 소프트웨어 솔루션을 구축할 수 있도록 지원하는 기본 원칙으로 두드러집니다.`),this.h()},l(os){a=p(os,"H2",{id:!0});var N=o(a);r=p(N,"A",{href:!0});var Rs=o(r);_=p(Rs,"STRONG",{});var nn=o(_);v=c(nn,"클린 코드: 소프트웨어 개발 속도를 높이는 관문"),nn.forEach(s),Rs.forEach(s),N.forEach(s),t=f(os),k=p(os,"P",{});var Vs=o(k);d=c(Vs,`소프트웨어 개발 영역에서 효율성과 속도에 대한 탐구는 종종 역설적인 진실로 이어집니다. 즉, 개발 프로세스를 진정으로 가속화하는 유일한 방법은 코드의 청결성을 유지하는 것입니다. 클린 코드 철학의 핵심인 이 원칙은
속도와 코드 품질이 상충되는 이해관계가 아니라 오히려 동일한 목표의 보완적인 측면임을 강조합니다.`),Vs.forEach(s),L=f(os),M=p(os,"H3",{id:!0});var gs=o(M);us=p(gs,"A",{href:!0});var G=o(us);C=p(G,"STRONG",{});var Ts=o(C);I=c(Ts,"클린 코드의 기초"),Ts.forEach(s),G.forEach(s),gs.forEach(s),es=f(os),X=p(os,"P",{});var Xs=o(X);A=c(Xs,`클린 코드의 핵심은 단순히 작동하는 코드를 작성하는 것 이상입니다. 원저작자가 아닌 다른 사람도 쉽게 읽고, 이해하고, 수정할 수 있는 코드를 만드는 것입니다. 이 개념은 해당 주제에 관한 문헌의 주목할만한 주장으로
우아하게 요약되어 있습니다. “빠르게 진행하는 유일한 방법은 항상 코드를 깨끗하게 유지하는 것입니다.” 이 선언문은 개발자에게 지침이 되어 프로젝트의 효율성과 효율성을 높이는 경로로서 코드의 청결성을
우선시하도록 촉구합니다.`),Xs.forEach(s),Q=f(os),B=p(os,"H3",{id:!0});var H=o(B);q=p(H,"A",{href:!0});var P=o(q);ps=p(P,"STRONG",{});var js=o(ps);V=c(js,"클린 코드 구현: 4단계 접근 방식"),js.forEach(s),P.forEach(s),H.forEach(s),z=f(os),K=p(os,"P",{});var sn=o(K);_s=c(sn,"클린 코드를 향한 여정은 구현을 위한 네 가지 간단한 규칙을 채택하는 것부터 시작할 수 있습니다."),sn.forEach(s),rs=f(os),ss=p(os,"OL",{});var qs=o(ss);Es=p(qs,"LI",{});var cs=o(Es);fs=p(cs,"STRONG",{});var Us=o(fs);Y=c(Us,"모든 테스트 통과:"),Us.forEach(s),ts=c(cs,` 코드가 모든 테스트를 일관되게 통과하는지 확인하는 것이 청결을 향한 첫 번째 단계입니다. 이는 코드가 기능적 요구 사항을 충족할 뿐만 아니라 개발 팀이 정한 품질 표준을 준수함을
보장합니다.`),cs.forEach(s),Z=f(qs),D=p(qs,"LI",{});var an=o(D);F=p(an,"STRONG",{});var ln=o(F);ns=c(ln,"중복 금지:"),ln.forEach(s),x=c(an," 중복은 클린 코드의 적입니다. 중복된 코드 조각을 피하면 코드베이스를 보다 쉽게 관리할 수 있을 뿐만 아니라 오류 및 불일치 가능성도 줄어듭니다."),an.forEach(s),b=f(qs),g=p(qs,"LI",{});var fn=o(g);ms=p(fn,"STRONG",{});var un=o(ms);hs=c(un,"시스템 내에서 모든 디자인 아이디어 표현:"),un.forEach(s),ds=c(fn," 클린 코드는 디자인 의도를 효과적으로 전달하므로 미래의 개발자가 특정 구현의 근거와 전체 시스템 아키텍처에 어떻게 적용되는지 더 쉽게 이해할 수 있습니다."),fn.forEach(s),as=f(qs),is=p(qs,"LI",{});var pn=o(is);S=p(pn,"STRONG",{});var kn=o(S);ys=c(kn,"클래스, 메서드, 함수 등의 수를 최소화하세요."),kn.forEach(s),O=c(pn," 단순화가 핵심입니다. 코드의 복잡성을 줄임으로써 개발자는 코드의 가독성과 유지 관리성을 향상시켜 더 쉽게 업데이트하고 수정할 수 있습니다."),pn.forEach(s),qs.forEach(s),ks=f(os),bs=p(os,"H3",{id:!0});var on=o(bs);j=p(on,"A",{href:!0});var En=o(j);vs=p(En,"STRONG",{});var dn=o(vs);ls=c(dn,"캠프장의 규칙: 처음 찾은 것보다 코드베이스를 더 좋게 남겨두기"),dn.forEach(s),En.forEach(s),on.forEach(s),Ps=f(os),Is=p(os,"P",{});var mn=o(Is);Ls=c(mn,`클린 코드의 필수 정신은 “캠프장을 처음 도착했을 때보다 깨끗하게 유지하세요”라는 조언에 요약되어 있습니다. 이 은유적 지침은 개발자가 작업하는 코드를 지속적으로 개선하고 개선하여 각 기여가 가치를 더할 뿐만 아니라
코드베이스의 전반적인 품질을 향상시키도록 장려합니다. 이러한 접근 방식은 청결과 효율성을 지속적으로 우선시하는 지속적인 개선 문화를 조성합니다.`),mn.forEach(s),xs=f(os),W=p(os,"H3",{id:!0});var en=o(W);ws=p(en,"A",{href:!0});var hn=o(ws);Ss=p(hn,"STRONG",{});var rn=o(Ss);Ms=c(rn,"청결을 향한 끝없는 여정"),rn.forEach(s),hn.forEach(s),en.forEach(s),Ns=f(os),Hs=p(os,"P",{});var Ln=o(Hs);Gs=c(Ln,`깨끗한 코드를 달성하기 위해 설명된 명확한 경로와 원칙에도 불구하고 여정은 계속 진행 중입니다. 본문에는 “클린코드에 대한 끝없는 고민은 정리하고 계속 정리하는 방법인데 왕도는 없는 것 같다. 그냥 청소를 쉽게
해주는 패턴이 있는 것 같다”고 인정하고 있다. 이 성찰은 더 깔끔한 코드를 촉진하는 전략과 관행이 있지만 프로세스에는 지속적인 경계와 노력이 필요하다는 점을 강조합니다. 청결에 대한 단일 솔루션이나 “왕도”는
없습니다. 이는 학습하고, 적응하고, 개선하는 지속적인 과정입니다.`),Ln.forEach(s),w=f(os),h=p(os,"H3",{id:!0});var Pn=o(h);$s=p(Pn,"A",{href:!0});var wn=o($s);Zs=p(wn,"STRONG",{});var cn=o(Zs);Fs=c(cn,"결론"),cn.forEach(s),wn.forEach(s),Pn.forEach(s),As=f(os),Ys=p(os,"P",{});var yn=o(Ys);Ws=c(yn,`클린 코드는 효율적이고 지속 가능한 소프트웨어 개발의 초석입니다. 간단한 규칙을 준수하고, 지속적인 개선 정신을 수용하고, 여정의 지속적인 성격을 인식함으로써 개발자는 코드가 깨끗하고 효율적이며 미래에도 대비할 수
있도록 보장할 수 있습니다. 이 접근 방식은 개발 프로세스를 가속화할 뿐만 아니라 코드베이스가 시간이 지나도 강력하고 적응 가능하며 유지 관리하기 쉬운 상태로 유지되도록 보장합니다. 끊임없이 진화하는 소프트웨어 개발
환경에서 클린 코드는 개발자가 더 좋고, 더 빠르고, 더 안정적인 소프트웨어 솔루션을 구축할 수 있도록 지원하는 기본 원칙으로 두드러집니다.`),yn.forEach(s),this.h()},h(){m(r,"href","#클린-코드-소프트웨어-개발-속도를-높이는-관문"),m(a,"id","클린-코드-소프트웨어-개발-속도를-높이는-관문"),m(us,"href","#클린-코드의-기초"),m(M,"id","클린-코드의-기초"),m(q,"href","#클린-코드-구현-4단계-접근-방식"),m(B,"id","클린-코드-구현-4단계-접근-방식"),m(j,"href","#캠프장의-규칙-처음-찾은-것보다-코드베이스를-더-좋게-남겨두기"),m(bs,"id","캠프장의-규칙-처음-찾은-것보다-코드베이스를-더-좋게-남겨두기"),m(ws,"href","#청결을-향한-끝없는-여정"),m(W,"id","청결을-향한-끝없는-여정"),m($s,"href","#결론"),m(h,"id","결론")},m(os,N){l(os,a,N),n(a,r),n(r,_),n(_,v),l(os,t,N),l(os,k,N),n(k,d),l(os,L,N),l(os,M,N),n(M,us),n(us,C),n(C,I),l(os,es,N),l(os,X,N),n(X,A),l(os,Q,N),l(os,B,N),n(B,q),n(q,ps),n(ps,V),l(os,z,N),l(os,K,N),n(K,_s),l(os,rs,N),l(os,ss,N),n(ss,Es),n(Es,fs),n(fs,Y),n(Es,ts),n(ss,Z),n(ss,D),n(D,F),n(F,ns),n(D,x),n(ss,b),n(ss,g),n(g,ms),n(ms,hs),n(g,ds),n(ss,as),n(ss,is),n(is,S),n(S,ys),n(is,O),l(os,ks,N),l(os,bs,N),n(bs,j),n(j,vs),n(vs,ls),l(os,Ps,N),l(os,Is,N),n(Is,Ls),l(os,xs,N),l(os,W,N),n(W,ws),n(ws,Ss),n(Ss,Ms),l(os,Ns,N),l(os,Hs,N),n(Hs,Gs),l(os,w,N),l(os,h,N),n(h,$s),n($s,Zs),n(Zs,Fs),l(os,As,N),l(os,Ys,N),n(Ys,Ws)},p:Vn,d(os){os&&s(a),os&&s(t),os&&s(k),os&&s(L),os&&s(M),os&&s(es),os&&s(X),os&&s(Q),os&&s(B),os&&s(z),os&&s(K),os&&s(rs),os&&s(ss),os&&s(ks),os&&s(bs),os&&s(Ps),os&&s(Is),os&&s(xs),os&&s(W),os&&s(Ns),os&&s(Hs),os&&s(w),os&&s(h),os&&s(As),os&&s(Ys)}}}function Mu(E){let a,r;const _=[E[0],Ce];let v={$$slots:{default:[Ru]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Ce)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Ce={title:"1장 깨끗한 코드",summary:"소프트웨어 개발에서 클린 코드의 중요성과 그 실천 방법을 탐구합니다. 효율적인 개발을 위해 필수적인 네 가지 클린 코드 원칙을 소개하고, 지속적인 코드 개선의 필요성을 강조합니다.",date:"2024-01-01",published:!1};function Cu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Nu=class extends Hn{constructor(a){super(),jn(this,a,Cu,Mu,Rn,{})}};const Gu=Object.freeze(Object.defineProperty({__proto__:null,default:Nu,metadata:Ce},Symbol.toStringTag,{value:"Module"}));function Du(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w;return{c(){a=e("h2"),r=e("a"),_=u("소프트웨어 개발에서 명명 기술이 가지는 의미"),v=i(),t=e("p"),k=u(`코딩 영역에서 이름의 힘은 단순한 식별을 초월합니다. 변수나 메소드의 본질과 기능을 전달합니다. 따라서 소프트웨어 개발에서 명명 기술은 사소한 것이 아니라 코드 가독성과 유지 관리성을 향상시키는 중요한 기술입니다.
이 장에서는 의미 있는 이름을 만드는 원칙을 자세히 살펴보고 프로그래머가 이해와 협업을 촉진하는 모범 사례를 안내합니다.`),d=i(),L=e("h2"),M=e("a"),us=u("의도를 분명히 밝히자"),C=i(),I=e("p"),es=u(`의미 있는 이름 지정의 초석은 잘못된 정보를 피하는 것입니다. 오해를 불러일으키는 이름은 동료 프로그래머를 쫓기게 만들어 존재하지 않거나 예상과 다르게 작동하는 기능을 찾도록 할 수 있습니다. 이름은 변수와 함수의
목적과 사용법을 정확하게 반영하여 잘못된 가정을 방지하고 보다 직관적인 코드베이스에 기여하는 것이 중요합니다.`),X=i(),A=e("h2"),Q=e("a"),B=e("strong"),q=u("의미 있게 구별하기"),ps=i(),V=e("p"),z=u(`이름은 코드의 복잡성 속에서 목적과 정확성을 통해 명확성을 나타내는 신호 역할을 합니다. 각 식별자는 기능과 의도 모두에서 다른 식별자와 차별화되는 고유한 의미를 가져야 합니다. 이러한 명확성은 이해에 도움이 될
뿐만 아니라 기존 코드의 수정 및 확장에도 도움이 되므로 잘 정의된 개념의 견고한 기반 위에 향상된 기능이 구축되도록 보장합니다.`),K=i(),_s=e("h2"),rs=e("a"),ss=e("strong"),Es=u("발음 및 검색 가능성"),fs=i(),Y=e("p"),ts=u(`이름을 쉽게 발음하고 검색할 수 있으므로 코드에 대한 접근성이 한 단계 더 높아집니다. 발음 가능한 이름은 개발자 간의 구두 토론을 촉진하는 반면, 검색 가능한 이름은 코드베이스 내에서 특정 함수나 변수를 빠르게
찾을 수 있도록 해줍니다. 이러한 특성은 효율적인 팀워크와 코드 유지 관리, 복잡한 시스템 탐색 및 이해 프로세스를 간소화하는 데 필수적입니다.`),Z=i(),D=e("h2"),F=e("a"),ns=e("strong"),x=u("인코딩 방지"),b=i(),g=e("p"),ms=u(`인코딩, 즉 이름에 유형이나 범위 정보를 삽입하는 관행은 더 이상 최신 코더에 제공되지 않는 과거 프로그래밍 관행의 흔적입니다. 의미 있는 이름 지정은 가독성과 단순성을 위해 이러한 인코딩을 피하고 코드의 의도를
모호하게 하지 않으면서 코드의 구조와 이름 지정 규칙이 필요한 컨텍스트를 제공할 수 있도록 합니다.`),hs=i(),ds=e("h2"),as=e("a"),is=e("strong"),S=u("이름에 담긴 기억과 유머"),ys=i(),O=e("p"),ks=u(`자신의 기억이나 유머 감각에 의존하여 이름을 짓는 것은 유혹적일 수 있지만 종종 혼란과 배제로 이어집니다. 너무 비밀스럽거나 내부 농담이 담긴 이름은 새로운 팀 구성원이나 향후 코드 관리자를 소외시킬 수 있습니다.
따라서 보편적으로 이해할 수 있는 이름을 선택하여 코드 자체가 표현되는 포괄적인 환경을 조성하는 것이 좋습니다.`),bs=i(),j=e("h2"),vs=e("a"),ls=e("strong"),Ps=u("방법론적 명명"),Is=i(),Ls=e("p"),xs=u(`마지막으로, 명명에 대한 방법론적 접근 방식을 채택하는 것은 작업에 적합한 도구를 선택하는 것과 유사합니다. 여기에는 설명적이고 명확할 뿐만 아니라 프로젝트의 전반적인 명명 규칙과도 일치하는 이름을 선택하는 것이
포함됩니다. 이러한 체계적인 접근 방식을 통해 각 이름은 각 구성 요소의 목적과 기능이 즉시 드러나는 응집력 있고 탐색 가능한 코드베이스에 기여합니다.`),W=i(),ws=e("h2"),Ss=e("a"),Ms=e("strong"),Ns=u("결론"),Hs=i(),Gs=e("p"),w=u(`광범위한 소프트웨어 개발 환경에서 의미 있는 이름은 명확성과 이해의 기둥이 됩니다. 이 장에 설명된 원칙을 준수함으로써 개발자는 기능적일 뿐만 아니라 직관적이고 유지 관리가 가능한 코드를 만들 수 있습니다.
프로그래밍의 복잡성을 탐색하면서 코드의 세계에서 이름은 레이블 그 이상이며 이해를 위한 관문이라는 점을 기억하십시오.`),this.h()},l(h){a=p(h,"H2",{id:!0});var $s=o(a);r=p($s,"A",{href:!0});var Zs=o(r);_=c(Zs,"소프트웨어 개발에서 명명 기술이 가지는 의미"),Zs.forEach(s),$s.forEach(s),v=f(h),t=p(h,"P",{});var Fs=o(t);k=c(Fs,`코딩 영역에서 이름의 힘은 단순한 식별을 초월합니다. 변수나 메소드의 본질과 기능을 전달합니다. 따라서 소프트웨어 개발에서 명명 기술은 사소한 것이 아니라 코드 가독성과 유지 관리성을 향상시키는 중요한 기술입니다.
이 장에서는 의미 있는 이름을 만드는 원칙을 자세히 살펴보고 프로그래머가 이해와 협업을 촉진하는 모범 사례를 안내합니다.`),Fs.forEach(s),d=f(h),L=p(h,"H2",{id:!0});var As=o(L);M=p(As,"A",{href:!0});var Ys=o(M);us=c(Ys,"의도를 분명히 밝히자"),Ys.forEach(s),As.forEach(s),C=f(h),I=p(h,"P",{});var Ws=o(I);es=c(Ws,`의미 있는 이름 지정의 초석은 잘못된 정보를 피하는 것입니다. 오해를 불러일으키는 이름은 동료 프로그래머를 쫓기게 만들어 존재하지 않거나 예상과 다르게 작동하는 기능을 찾도록 할 수 있습니다. 이름은 변수와 함수의
목적과 사용법을 정확하게 반영하여 잘못된 가정을 방지하고 보다 직관적인 코드베이스에 기여하는 것이 중요합니다.`),Ws.forEach(s),X=f(h),A=p(h,"H2",{id:!0});var os=o(A);Q=p(os,"A",{href:!0});var N=o(Q);B=p(N,"STRONG",{});var Rs=o(B);q=c(Rs,"의미 있게 구별하기"),Rs.forEach(s),N.forEach(s),os.forEach(s),ps=f(h),V=p(h,"P",{});var nn=o(V);z=c(nn,`이름은 코드의 복잡성 속에서 목적과 정확성을 통해 명확성을 나타내는 신호 역할을 합니다. 각 식별자는 기능과 의도 모두에서 다른 식별자와 차별화되는 고유한 의미를 가져야 합니다. 이러한 명확성은 이해에 도움이 될
뿐만 아니라 기존 코드의 수정 및 확장에도 도움이 되므로 잘 정의된 개념의 견고한 기반 위에 향상된 기능이 구축되도록 보장합니다.`),nn.forEach(s),K=f(h),_s=p(h,"H2",{id:!0});var Vs=o(_s);rs=p(Vs,"A",{href:!0});var gs=o(rs);ss=p(gs,"STRONG",{});var G=o(ss);Es=c(G,"발음 및 검색 가능성"),G.forEach(s),gs.forEach(s),Vs.forEach(s),fs=f(h),Y=p(h,"P",{});var Ts=o(Y);ts=c(Ts,`이름을 쉽게 발음하고 검색할 수 있으므로 코드에 대한 접근성이 한 단계 더 높아집니다. 발음 가능한 이름은 개발자 간의 구두 토론을 촉진하는 반면, 검색 가능한 이름은 코드베이스 내에서 특정 함수나 변수를 빠르게
찾을 수 있도록 해줍니다. 이러한 특성은 효율적인 팀워크와 코드 유지 관리, 복잡한 시스템 탐색 및 이해 프로세스를 간소화하는 데 필수적입니다.`),Ts.forEach(s),Z=f(h),D=p(h,"H2",{id:!0});var Xs=o(D);F=p(Xs,"A",{href:!0});var H=o(F);ns=p(H,"STRONG",{});var P=o(ns);x=c(P,"인코딩 방지"),P.forEach(s),H.forEach(s),Xs.forEach(s),b=f(h),g=p(h,"P",{});var js=o(g);ms=c(js,`인코딩, 즉 이름에 유형이나 범위 정보를 삽입하는 관행은 더 이상 최신 코더에 제공되지 않는 과거 프로그래밍 관행의 흔적입니다. 의미 있는 이름 지정은 가독성과 단순성을 위해 이러한 인코딩을 피하고 코드의 의도를
모호하게 하지 않으면서 코드의 구조와 이름 지정 규칙이 필요한 컨텍스트를 제공할 수 있도록 합니다.`),js.forEach(s),hs=f(h),ds=p(h,"H2",{id:!0});var sn=o(ds);as=p(sn,"A",{href:!0});var qs=o(as);is=p(qs,"STRONG",{});var cs=o(is);S=c(cs,"이름에 담긴 기억과 유머"),cs.forEach(s),qs.forEach(s),sn.forEach(s),ys=f(h),O=p(h,"P",{});var Us=o(O);ks=c(Us,`자신의 기억이나 유머 감각에 의존하여 이름을 짓는 것은 유혹적일 수 있지만 종종 혼란과 배제로 이어집니다. 너무 비밀스럽거나 내부 농담이 담긴 이름은 새로운 팀 구성원이나 향후 코드 관리자를 소외시킬 수 있습니다.
따라서 보편적으로 이해할 수 있는 이름을 선택하여 코드 자체가 표현되는 포괄적인 환경을 조성하는 것이 좋습니다.`),Us.forEach(s),bs=f(h),j=p(h,"H2",{id:!0});var an=o(j);vs=p(an,"A",{href:!0});var ln=o(vs);ls=p(ln,"STRONG",{});var fn=o(ls);Ps=c(fn,"방법론적 명명"),fn.forEach(s),ln.forEach(s),an.forEach(s),Is=f(h),Ls=p(h,"P",{});var un=o(Ls);xs=c(un,`마지막으로, 명명에 대한 방법론적 접근 방식을 채택하는 것은 작업에 적합한 도구를 선택하는 것과 유사합니다. 여기에는 설명적이고 명확할 뿐만 아니라 프로젝트의 전반적인 명명 규칙과도 일치하는 이름을 선택하는 것이
포함됩니다. 이러한 체계적인 접근 방식을 통해 각 이름은 각 구성 요소의 목적과 기능이 즉시 드러나는 응집력 있고 탐색 가능한 코드베이스에 기여합니다.`),un.forEach(s),W=f(h),ws=p(h,"H2",{id:!0});var pn=o(ws);Ss=p(pn,"A",{href:!0});var kn=o(Ss);Ms=p(kn,"STRONG",{});var on=o(Ms);Ns=c(on,"결론"),on.forEach(s),kn.forEach(s),pn.forEach(s),Hs=f(h),Gs=p(h,"P",{});var En=o(Gs);w=c(En,`광범위한 소프트웨어 개발 환경에서 의미 있는 이름은 명확성과 이해의 기둥이 됩니다. 이 장에 설명된 원칙을 준수함으로써 개발자는 기능적일 뿐만 아니라 직관적이고 유지 관리가 가능한 코드를 만들 수 있습니다.
프로그래밍의 복잡성을 탐색하면서 코드의 세계에서 이름은 레이블 그 이상이며 이해를 위한 관문이라는 점을 기억하십시오.`),En.forEach(s),this.h()},h(){m(r,"href","#소프트웨어-개발에서-명명-기술이-가지는-의미"),m(a,"id","소프트웨어-개발에서-명명-기술이-가지는-의미"),m(M,"href","#의도를-분명히-밝히자"),m(L,"id","의도를-분명히-밝히자"),m(Q,"href","#의미-있게-구별하기"),m(A,"id","의미-있게-구별하기"),m(rs,"href","#발음-및-검색-가능성"),m(_s,"id","발음-및-검색-가능성"),m(F,"href","#인코딩-방지"),m(D,"id","인코딩-방지"),m(as,"href","#이름에-담긴-기억과-유머"),m(ds,"id","이름에-담긴-기억과-유머"),m(vs,"href","#방법론적-명명"),m(j,"id","방법론적-명명"),m(Ss,"href","#결론"),m(ws,"id","결론")},m(h,$s){l(h,a,$s),n(a,r),n(r,_),l(h,v,$s),l(h,t,$s),n(t,k),l(h,d,$s),l(h,L,$s),n(L,M),n(M,us),l(h,C,$s),l(h,I,$s),n(I,es),l(h,X,$s),l(h,A,$s),n(A,Q),n(Q,B),n(B,q),l(h,ps,$s),l(h,V,$s),n(V,z),l(h,K,$s),l(h,_s,$s),n(_s,rs),n(rs,ss),n(ss,Es),l(h,fs,$s),l(h,Y,$s),n(Y,ts),l(h,Z,$s),l(h,D,$s),n(D,F),n(F,ns),n(ns,x),l(h,b,$s),l(h,g,$s),n(g,ms),l(h,hs,$s),l(h,ds,$s),n(ds,as),n(as,is),n(is,S),l(h,ys,$s),l(h,O,$s),n(O,ks),l(h,bs,$s),l(h,j,$s),n(j,vs),n(vs,ls),n(ls,Ps),l(h,Is,$s),l(h,Ls,$s),n(Ls,xs),l(h,W,$s),l(h,ws,$s),n(ws,Ss),n(Ss,Ms),n(Ms,Ns),l(h,Hs,$s),l(h,Gs,$s),n(Gs,w)},p:Vn,d(h){h&&s(a),h&&s(v),h&&s(t),h&&s(d),h&&s(L),h&&s(C),h&&s(I),h&&s(X),h&&s(A),h&&s(ps),h&&s(V),h&&s(K),h&&s(_s),h&&s(fs),h&&s(Y),h&&s(Z),h&&s(D),h&&s(b),h&&s(g),h&&s(hs),h&&s(ds),h&&s(ys),h&&s(O),h&&s(bs),h&&s(j),h&&s(Is),h&&s(Ls),h&&s(W),h&&s(ws),h&&s(Hs),h&&s(Gs)}}}function Uu(E){let a,r;const _=[E[0],Ne];let v={$$slots:{default:[Du]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Ne)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Ne={title:"2장 의미있는 이름",summary:"소프트웨어 개발에서 명명 기술의 중요성과 효과적인 이름 지정 원칙을 탐구합니다. 코드의 가독성과 유지 관리성을 향상시키기 위한 모범 사례와 방법론적 접근을 포함하여, 의도적이고 명확한 이름을 통해 프로그래머 간의 이해와 협업을 촉진하는 방법을 제공합니다.",date:"2024-01-02",published:!1};function Bu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Fu=class extends Hn{constructor(a){super(),jn(this,a,Bu,Uu,Rn,{})}};const Ju=Object.freeze(Object.defineProperty({__proto__:null,default:Fu,metadata:Ne},Symbol.toStringTag,{value:"Module"}));function zu(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs,Fs,As,Ys,Ws,os,N,Rs,nn,Vs,gs,G,Ts,Xs,H,P,js,sn,qs,cs,Us,an,ln,fn,un,pn,kn,on,En,dn,mn,en,hn,rn,Ln,Pn,wn,cn,yn,Jn,vn,_n,bn,Un,Mn,Sn,An,Xn,$n,zn,gn,Bn,Fn,sa,J,Js,In,ta,xn,qn;return{c(){a=e("h3"),r=e("a"),_=u("작게 만들어라"),v=i(),t=e("p"),k=u("호출하는 함수 형식으로 함수는 짧을수록 좋다 2~3줄 내외면 더 좋다. 들여쓰기 구조도 1단이나 2단을 넘어서면 힘들어진다"),d=i(),L=e("h3"),M=e("a"),us=u("한 가지만 해라"),C=i(),I=e("p"),es=u("추상화 단계에서 일을 하는 가짓수가 하나여야 한다 가령 다른 함수를 호출하는 함수가 존재한다면 그 함수는 한가지 일을 하고 있는것이다."),X=i(),A=e("h3"),Q=e("a"),B=u("함수 당 추상화 수준은 하나로"),q=i(),ps=e("p"),V=u("한 함수내에 여러가지 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운 탓이다."),z=i(),K=e("p"),_s=u("내려가기 규칙을 활용하자 위에서 아래로 프로그램을 읽을수 있도록 함수 추상화 수준을 한단계씩 내려보자"),rs=i(),ss=e("p"),Es=u("TO 설정 페이지와 해제 페이지를 포함라혀면, 설정 페이지를 폼학하고, 테스트 페이지 내용을 포함하고 해제 페이지를 포함한다."),fs=i(),Y=e("ul"),ts=e("li"),Z=u("To 설정 페이지를 포함하려면, 슈트이면 슈트 설정 페이지를 포함한 후 일반 설정 페이지를 포함한다."),D=i(),F=e("li"),ns=u("To 슈트 설정 페이지를 포함하려면, 부모 계층에서 SuiteSetUp 페이지를 찾아 Include문과 페이지 경로를 추가한다."),x=i(),b=e("li"),g=u("To 부모 계층을 검색하려면…"),ms=i(),hs=e("h3"),ds=e("a"),as=u("Switch문"),is=i(),S=e("p"),ys=u("스위치 문을 다형성 객체를 생성하는 코드 안에서 허용하고 상속관계로 숨기고 다른 코드에 노출하지 않는 방법이 있다."),O=i(),ks=e("h3"),bs=e("a"),j=u("서술적인 이름을 사용하라"),vs=i(),ls=e("p"),Ps=u("이름이 길어도 괜찮고 서술적인 이름이 짧고 어려운 이름보다 좋다. 함수 이름을 정할때 여러 단어가 쉽게 읽히는 명명법을 사용하는것이 좋다. 여러 단어를 사용해 함수 기능을 표현하라"),Is=i(),Ls=e("p"),xs=u("모듈 내에서 함수 이름은 같은 문구,명사,동사를 사용한다."),W=i(),ws=e("h3"),Ss=e("a"),Ms=u("함수 인수"),Ns=i(),Hs=e("p"),Gs=u("함수에서 이상적인 인수 개수는 0개이다. 다음은 1개이고 다음은2개이다. 최선은 입력 인수가 없는 경우 ex: IncludeSetupPageInfo(new PageContent) → includeSetupPage()"),w=i(),h=e("h4"),$s=e("a"),Zs=u("단항형식"),Fs=i(),As=e("ol"),Ys=e("li"),Ws=u("인수에 질문을 던지는 경우"),os=i(),N=e("li"),Rs=u("인수를 뭔가로 변환해 결과를 반환하는 경우"),nn=i(),Vs=e("li"),gs=u(`단항 함수 형식의 이벤트
단 플래그 인수는 추하다. 함수에 부울 값을 넘기는 관례는 차라리 함수를 분리하는 편이 좋다.`),G=i(),Ts=e("h4"),Xs=e("a"),H=u("이항함수"),P=i(),js=e("p"),sn=u("인수가 2개인 함수는 1개인 함수보다 이해하기 어렵다. 프로그램을 짜다보면 불가피한 경우도 생기지만 그만큼 위험이 따른다."),qs=i(),cs=e("h4"),Us=e("a"),an=u("삼항함수"),ln=i(),fn=e("p"),un=u("인수가 3개인 함수는 이해하기 어렵다. 인수가 3개 이상인 함수는 피하는 편이 좋다."),pn=i(),kn=e("h4"),on=e("a"),En=u("동사와 키워드"),dn=i(),mn=e("p"),en=u(`단항 함수는 함수와 인수가 동사/명사 쌍을 이뤄야 한다.
함수 이름에 키워드를 추가하는 편도 좋다`),hn=i(),rn=e("h3"),Ln=e("a"),Pn=u("부수 효과를 일으키지 마라"),wn=i(),cn=e("p"),yn=u("함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓을 하지 말아라!"),Jn=i(),vn=e("h3"),_n=e("a"),bn=u("명령과 조회를 분리하라!"),Un=i(),Mn=e("p"),Sn=u("함수는 뭔가를 수행하거나 뭔가에 답하거나 둘중 하나만 해야한다. 둘 다 하면 안 된다. 객체 상태를 변경하거나 아니면 객체 정보를 반환하거나 둘 중 하나다."),An=i(),Xn=e("h3"),$n=e("a"),zn=u("Try/Catch 블록은 한 함수에서 별도로 처리"),gn=i(),Bn=e("p"),Fn=u("코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다."),sa=i(),J=e("h3"),Js=e("a"),In=u("반복하지 마라"),ta=i(),xn=e("p"),qn=u("중복은 소트트웨어에서 모든 악의 근원이다. 많은 원칙과 기법이 중복을 없애거나 제어할 목적으로 나왔다."),this.h()},l(T){a=p(T,"H3",{id:!0});var Ds=o(a);r=p(Ds,"A",{href:!0});var ra=o(r);_=c(ra,"작게 만들어라"),ra.forEach(s),Ds.forEach(s),v=f(T),t=p(T,"P",{});var ka=o(t);k=c(ka,"호출하는 함수 형식으로 함수는 짧을수록 좋다 2~3줄 내외면 더 좋다. 들여쓰기 구조도 1단이나 2단을 넘어서면 힘들어진다"),ka.forEach(s),d=f(T),L=p(T,"H3",{id:!0});var _a=o(L);M=p(_a,"A",{href:!0});var ma=o(M);us=c(ma,"한 가지만 해라"),ma.forEach(s),_a.forEach(s),C=f(T),I=p(T,"P",{});var Aa=o(I);es=c(Aa,"추상화 단계에서 일을 하는 가짓수가 하나여야 한다 가령 다른 함수를 호출하는 함수가 존재한다면 그 함수는 한가지 일을 하고 있는것이다."),Aa.forEach(s),X=f(T),A=p(T,"H3",{id:!0});var ya=o(A);Q=p(ya,"A",{href:!0});var pa=o(Q);B=c(pa,"함수 당 추상화 수준은 하나로"),pa.forEach(s),ya.forEach(s),q=f(T),ps=p(T,"P",{});var Ia=o(ps);V=c(Ia,"한 함수내에 여러가지 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운 탓이다."),Ia.forEach(s),z=f(T),K=p(T,"P",{});var va=o(K);_s=c(va,"내려가기 규칙을 활용하자 위에서 아래로 프로그램을 읽을수 있도록 함수 추상화 수준을 한단계씩 내려보자"),va.forEach(s),rs=f(T),ss=p(T,"P",{});var oa=o(ss);Es=c(oa,"TO 설정 페이지와 해제 페이지를 포함라혀면, 설정 페이지를 폼학하고, 테스트 페이지 내용을 포함하고 해제 페이지를 포함한다."),oa.forEach(s),fs=f(T),Y=p(T,"UL",{});var na=o(Y);ts=p(na,"LI",{});var ia=o(ts);Z=c(ia,"To 설정 페이지를 포함하려면, 슈트이면 슈트 설정 페이지를 포함한 후 일반 설정 페이지를 포함한다."),ia.forEach(s),D=f(na),F=p(na,"LI",{});var ea=o(F);ns=c(ea,"To 슈트 설정 페이지를 포함하려면, 부모 계층에서 SuiteSetUp 페이지를 찾아 Include문과 페이지 경로를 추가한다."),ea.forEach(s),x=f(na),b=p(na,"LI",{});var ua=o(b);g=c(ua,"To 부모 계층을 검색하려면…"),ua.forEach(s),na.forEach(s),ms=f(T),hs=p(T,"H3",{id:!0});var Ea=o(hs);ds=p(Ea,"A",{href:!0});var Zn=o(ds);as=c(Zn,"Switch문"),Zn.forEach(s),Ea.forEach(s),is=f(T),S=p(T,"P",{});var Ta=o(S);ys=c(Ta,"스위치 문을 다형성 객체를 생성하는 코드 안에서 허용하고 상속관계로 숨기고 다른 코드에 노출하지 않는 방법이 있다."),Ta.forEach(s),O=f(T),ks=p(T,"H3",{id:!0});var Pa=o(ks);bs=p(Pa,"A",{href:!0});var Kn=o(bs);j=c(Kn,"서술적인 이름을 사용하라"),Kn.forEach(s),Pa.forEach(s),vs=f(T),ls=p(T,"P",{});var ca=o(ls);Ps=c(ca,"이름이 길어도 괜찮고 서술적인 이름이 짧고 어려운 이름보다 좋다. 함수 이름을 정할때 여러 단어가 쉽게 읽히는 명명법을 사용하는것이 좋다. 여러 단어를 사용해 함수 기능을 표현하라"),ca.forEach(s),Is=f(T),Ls=p(T,"P",{});var da=o(Ls);xs=c(da,"모듈 내에서 함수 이름은 같은 문구,명사,동사를 사용한다."),da.forEach(s),W=f(T),ws=p(T,"H3",{id:!0});var R=o(ws);Ss=p(R,"A",{href:!0});var zs=o(Ss);Ms=c(zs,"함수 인수"),zs.forEach(s),R.forEach(s),Ns=f(T),Hs=p(T,"P",{});var ja=o(Hs);Gs=c(ja,"함수에서 이상적인 인수 개수는 0개이다. 다음은 1개이고 다음은2개이다. 최선은 입력 인수가 없는 경우 ex: IncludeSetupPageInfo(new PageContent) → includeSetupPage()"),ja.forEach(s),w=f(T),h=p(T,"H4",{id:!0});var wa=o(h);$s=p(wa,"A",{href:!0});var la=o($s);Zs=c(la,"단항형식"),la.forEach(s),wa.forEach(s),Fs=f(T),As=p(T,"OL",{});var $=o(As);Ys=p($,"LI",{});var Bs=o(Ys);Ws=c(Bs,"인수에 질문을 던지는 경우"),Bs.forEach(s),os=f($),N=p($,"LI",{});var Ra=o(N);Rs=c(Ra,"인수를 뭔가로 변환해 결과를 반환하는 경우"),Ra.forEach(s),nn=f($),Vs=p($,"LI",{});var Ma=o(Vs);gs=c(Ma,`단항 함수 형식의 이벤트
단 플래그 인수는 추하다. 함수에 부울 값을 넘기는 관례는 차라리 함수를 분리하는 편이 좋다.`),Ma.forEach(s),$.forEach(s),G=f(T),Ts=p(T,"H4",{id:!0});var ba=o(Ts);Xs=p(ba,"A",{href:!0});var ha=o(Xs);H=c(ha,"이항함수"),ha.forEach(s),ba.forEach(s),P=f(T),js=p(T,"P",{});var Oa=o(js);sn=c(Oa,"인수가 2개인 함수는 1개인 함수보다 이해하기 어렵다. 프로그램을 짜다보면 불가피한 경우도 생기지만 그만큼 위험이 따른다."),Oa.forEach(s),qs=f(T),cs=p(T,"H4",{id:!0});var Da=o(cs);Us=p(Da,"A",{href:!0});var aa=o(Us);an=c(aa,"삼항함수"),aa.forEach(s),Da.forEach(s),ln=f(T),fn=p(T,"P",{});var $a=o(fn);un=c($a,"인수가 3개인 함수는 이해하기 어렵다. 인수가 3개 이상인 함수는 피하는 편이 좋다."),$a.forEach(s),pn=f(T),kn=p(T,"H4",{id:!0});var Ua=o(kn);on=p(Ua,"A",{href:!0});var La=o(on);En=c(La,"동사와 키워드"),La.forEach(s),Ua.forEach(s),dn=f(T),mn=p(T,"P",{});var Sa=o(mn);en=c(Sa,`단항 함수는 함수와 인수가 동사/명사 쌍을 이뤄야 한다.
함수 이름에 키워드를 추가하는 편도 좋다`),Sa.forEach(s),hn=f(T),rn=p(T,"H3",{id:!0});var Ba=o(rn);Ln=p(Ba,"A",{href:!0});var Ca=o(Ln);Pn=c(Ca,"부수 효과를 일으키지 마라"),Ca.forEach(s),Ba.forEach(s),wn=f(T),cn=p(T,"P",{});var fa=o(cn);yn=c(fa,"함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓을 하지 말아라!"),fa.forEach(s),Jn=f(T),vn=p(T,"H3",{id:!0});var Na=o(vn);_n=p(Na,"A",{href:!0});var Fa=o(_n);bn=c(Fa,"명령과 조회를 분리하라!"),Fa.forEach(s),Na.forEach(s),Un=f(T),Mn=p(T,"P",{});var xa=o(Mn);Sn=c(xa,"함수는 뭔가를 수행하거나 뭔가에 답하거나 둘중 하나만 해야한다. 둘 다 하면 안 된다. 객체 상태를 변경하거나 아니면 객체 정보를 반환하거나 둘 중 하나다."),xa.forEach(s),An=f(T),Xn=p(T,"H3",{id:!0});var Qn=o(Xn);$n=p(Qn,"A",{href:!0});var y=o($n);zn=c(y,"Try/Catch 블록은 한 함수에서 별도로 처리"),y.forEach(s),Qn.forEach(s),gn=f(T),Bn=p(T,"P",{});var Cs=o(Bn);Fn=c(Cs,"코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다."),Cs.forEach(s),sa=f(T),J=p(T,"H3",{id:!0});var Qa=o(J);Js=p(Qa,"A",{href:!0});var Ga=o(Js);In=c(Ga,"반복하지 마라"),Ga.forEach(s),Qa.forEach(s),ta=f(T),xn=p(T,"P",{});var Za=o(xn);qn=c(Za,"중복은 소트트웨어에서 모든 악의 근원이다. 많은 원칙과 기법이 중복을 없애거나 제어할 목적으로 나왔다."),Za.forEach(s),this.h()},h(){m(r,"href","#작게-만들어라"),m(a,"id","작게-만들어라"),m(M,"href","#한-가지만-해라"),m(L,"id","한-가지만-해라"),m(Q,"href","#함수-당-추상화-수준은-하나로"),m(A,"id","함수-당-추상화-수준은-하나로"),m(ds,"href","#switch문"),m(hs,"id","switch문"),m(bs,"href","#서술적인-이름을-사용하라"),m(ks,"id","서술적인-이름을-사용하라"),m(Ss,"href","#함수-인수"),m(ws,"id","함수-인수"),m($s,"href","#단항형식"),m(h,"id","단항형식"),m(Xs,"href","#이항함수"),m(Ts,"id","이항함수"),m(Us,"href","#삼항함수"),m(cs,"id","삼항함수"),m(on,"href","#동사와-키워드"),m(kn,"id","동사와-키워드"),m(Ln,"href","#부수-효과를-일으키지-마라"),m(rn,"id","부수-효과를-일으키지-마라"),m(_n,"href","#명령과-조회를-분리하라"),m(vn,"id","명령과-조회를-분리하라"),m($n,"href","#trycatch-블록은-한-함수에서-별도로-처리"),m(Xn,"id","trycatch-블록은-한-함수에서-별도로-처리"),m(Js,"href","#반복하지-마라"),m(J,"id","반복하지-마라")},m(T,Ds){l(T,a,Ds),n(a,r),n(r,_),l(T,v,Ds),l(T,t,Ds),n(t,k),l(T,d,Ds),l(T,L,Ds),n(L,M),n(M,us),l(T,C,Ds),l(T,I,Ds),n(I,es),l(T,X,Ds),l(T,A,Ds),n(A,Q),n(Q,B),l(T,q,Ds),l(T,ps,Ds),n(ps,V),l(T,z,Ds),l(T,K,Ds),n(K,_s),l(T,rs,Ds),l(T,ss,Ds),n(ss,Es),l(T,fs,Ds),l(T,Y,Ds),n(Y,ts),n(ts,Z),n(Y,D),n(Y,F),n(F,ns),n(Y,x),n(Y,b),n(b,g),l(T,ms,Ds),l(T,hs,Ds),n(hs,ds),n(ds,as),l(T,is,Ds),l(T,S,Ds),n(S,ys),l(T,O,Ds),l(T,ks,Ds),n(ks,bs),n(bs,j),l(T,vs,Ds),l(T,ls,Ds),n(ls,Ps),l(T,Is,Ds),l(T,Ls,Ds),n(Ls,xs),l(T,W,Ds),l(T,ws,Ds),n(ws,Ss),n(Ss,Ms),l(T,Ns,Ds),l(T,Hs,Ds),n(Hs,Gs),l(T,w,Ds),l(T,h,Ds),n(h,$s),n($s,Zs),l(T,Fs,Ds),l(T,As,Ds),n(As,Ys),n(Ys,Ws),n(As,os),n(As,N),n(N,Rs),n(As,nn),n(As,Vs),n(Vs,gs),l(T,G,Ds),l(T,Ts,Ds),n(Ts,Xs),n(Xs,H),l(T,P,Ds),l(T,js,Ds),n(js,sn),l(T,qs,Ds),l(T,cs,Ds),n(cs,Us),n(Us,an),l(T,ln,Ds),l(T,fn,Ds),n(fn,un),l(T,pn,Ds),l(T,kn,Ds),n(kn,on),n(on,En),l(T,dn,Ds),l(T,mn,Ds),n(mn,en),l(T,hn,Ds),l(T,rn,Ds),n(rn,Ln),n(Ln,Pn),l(T,wn,Ds),l(T,cn,Ds),n(cn,yn),l(T,Jn,Ds),l(T,vn,Ds),n(vn,_n),n(_n,bn),l(T,Un,Ds),l(T,Mn,Ds),n(Mn,Sn),l(T,An,Ds),l(T,Xn,Ds),n(Xn,$n),n($n,zn),l(T,gn,Ds),l(T,Bn,Ds),n(Bn,Fn),l(T,sa,Ds),l(T,J,Ds),n(J,Js),n(Js,In),l(T,ta,Ds),l(T,xn,Ds),n(xn,qn)},p:Vn,d(T){T&&s(a),T&&s(v),T&&s(t),T&&s(d),T&&s(L),T&&s(C),T&&s(I),T&&s(X),T&&s(A),T&&s(q),T&&s(ps),T&&s(z),T&&s(K),T&&s(rs),T&&s(ss),T&&s(fs),T&&s(Y),T&&s(ms),T&&s(hs),T&&s(is),T&&s(S),T&&s(O),T&&s(ks),T&&s(vs),T&&s(ls),T&&s(Is),T&&s(Ls),T&&s(W),T&&s(ws),T&&s(Ns),T&&s(Hs),T&&s(w),T&&s(h),T&&s(Fs),T&&s(As),T&&s(G),T&&s(Ts),T&&s(P),T&&s(js),T&&s(qs),T&&s(cs),T&&s(ln),T&&s(fn),T&&s(pn),T&&s(kn),T&&s(dn),T&&s(mn),T&&s(hn),T&&s(rn),T&&s(wn),T&&s(cn),T&&s(Jn),T&&s(vn),T&&s(Un),T&&s(Mn),T&&s(An),T&&s(Xn),T&&s(gn),T&&s(Bn),T&&s(sa),T&&s(J),T&&s(ta),T&&s(xn)}}}function qu(E){let a,r;const _=[E[0],Ge];let v={$$slots:{default:[zu]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Ge)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Ge={title:"3장 함수",summary:"소프트웨어 개발에서 클린 코드 원칙을 탐구하며, 함수 작성의 베스트 프랙티스를 강조합니다. 코드의 가독성, 유지보수성, 그리고 효율성을 극대화하기 위한 기법들, 예를 들어 짧은 함수, 한 가지 기능만 수행, 명확한 인수 사용, 중복 방지 등을 자세히 설명합니다.",date:"2024-01-08",published:!1};function Vu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Yu=class extends Hn{constructor(a){super(),jn(this,a,Vu,qu,Rn,{})}};const Wu=Object.freeze(Object.defineProperty({__proto__:null,default:Yu,metadata:Ge},Symbol.toStringTag,{value:"Module"}));function Xu(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs,Fs,As,Ys,Ws,os,N,Rs,nn,Vs,gs,G,Ts,Xs,H,P,js,sn,qs;return{c(){a=e("p"),r=u(`코드의 주석은 양날의 검 역할을 합니다. 귀중한 통찰력과 설명을 제공할 수 있지만 오해를 불러일으키거나 혼란을 야기할 가능성도 있습니다. 이 장에서는 코드와 주석 사이의 복잡한 관계를 탐구하고 코드의 명확성과 의도를
모호하게 하기보다는 향상시키는 관행을 옹호합니다.`),_=i(),v=e("h3"),t=e("a"),k=e("strong"),d=u("코드의 진실"),L=i(),M=e("p"),us=u(`소프트웨어 개발의 핵심에는 단순한 진실이 있습니다. 즉, 코드 자체가 소프트웨어가 수행하는 작업의 최종 소스입니다. 주석은 의도가 좋은 경우가 많지만 코드 실행을 변경할 수 없으며 코드가 발전함에 따라 오래되거나
부정확해질 수 있습니다. 코드를 진실의 단일 소스로 인식하면 개발자는 프로그래밍 방식에서 명확성과 정확성을 우선시하게 됩니다.`),C=i(),I=e("h3"),es=e("a"),X=e("strong"),A=u("주석과 잘못된 코드"),Q=i(),B=e("p"),q=u(`복잡하거나 불분명한 코드의 단점을 광범위한 주석으로 해결할 수 있다는 것은 일반적인 오해입니다. 그러나 이해하기 위해 주석에 크게 의존하는 코드베이스는 더 깊은 문제의 징후입니다. 설명의 필요성을 최소화하는 표현력
있고 잘 구조화된 코드는 변함없이 선호되며 깔끔한 코딩 관행의 중요성을 강조합니다.`),ps=i(),V=e("h3"),z=e("a"),K=e("strong"),_s=u("표현적 코드"),rs=i(),ss=e("p"),Es=u(`효과적인 코딩의 핵심은 구조와 명명 규칙을 통해 의도를 직접 전달하는 능력에 있습니다. 코드를 명확하게 작성하면 주석의 필요성이 줄어듭니다. 설명을 자명한 함수나 변수로 변환하면 추가 설명이 필요하지 않아 코드가
간소화되고 가독성과 유지 관리성이 향상되는 경우가 많습니다.`),fs=i(),Y=e("h3"),ts=e("a"),Z=e("strong"),D=u("좋은주석의 가치"),F=i(),ns=e("p"),x=u("목표는 주석에 대한 의존도를 최소화하는 것이지만 다음과 같은 특정 유형의 댓글은 매우 중요합니다."),b=i(),g=e("ul"),ms=e("li"),hs=e("strong"),ds=u("법적 및 저작권 참고 사항"),as=u(": 지적 재산권을 보호하고 사용 권한을 명확히 하는 데 필수적입니다."),is=i(),S=e("li"),ys=e("strong"),O=u("정보 주석"),ks=u(": 특히 코드 제약 조건이 있는 경우 컨텍스트를 제공하거나 특정 결정의 근거를 설명합니다."),bs=i(),j=e("li"),vs=e("strong"),ls=u("의도 및 설명"),Ps=u(": 코드가 존재하는 이유를 설명하거나 복잡한 논리를 명확히 하는 설명은 특히 외부 라이브러리나 피할 수 없는 복잡성을 처리할 때 도움이 될 수 있습니다."),Is=i(),Ls=e("h3"),xs=e("a"),W=e("strong"),ws=u("안좋은 주석의 함정"),Ss=i(),Ms=e("p"),Ns=u("반대로, 많은 주석은 코드의 품질과 가독성을 떨어뜨립니다. 예는 다음과 같습니다:"),Hs=i(),Gs=e("ul"),w=e("li"),h=e("strong"),$s=u("중복되거나 오해의 소지가 있는 주석"),Zs=u(": 명백한 내용을 다시 설명하거나 부정확한 내용을 포함하는 댓글은 도움이 되기보다는 해로울 수 있습니다."),Fs=i(),As=e("li"),Ys=e("strong"),Ws=u("오래되었거나 오래된 정보"),os=u(": 설명하는 코드와 함께 유지 관리되지 않은 주석은 혼란을 야기합니다."),N=i(),Rs=e("li"),nn=e("strong"),Vs=u("주석 처리된 코드"),gs=u(": 코드베이스를 복잡하게 만드는 일반적인 나쁜 습관으로, 버전 제어 시스템에 대한 신뢰도가 부족함을 나타냅니다."),G=i(),Ts=e("h3"),Xs=e("a"),H=e("strong"),P=u("결론"),js=i(),sn=e("p"),qs=u(`코드의 주석은 미묘한 공간을 차지하므로 의도를 명확히 하고 이해를 혼란스럽게 할 수 있습니다. 지침 원칙은 코드만으로는 충분하지 않은 곳에 가치를 추가하기 위해 주석을 아껴서 신중하게 사용하여 가능한 한 설명이 필요
없는 코드를 작성하는 것입니다. 코드의 명확성과 표현력을 우선시하는 방식을 채택함으로써 개발자는 주석에 대한 의존도를 줄여 더 깔끔하고 유지 관리하기 쉬운 코드베이스를 만들 수 있습니다.`),this.h()},l(cs){a=p(cs,"P",{});var Us=o(a);r=c(Us,`코드의 주석은 양날의 검 역할을 합니다. 귀중한 통찰력과 설명을 제공할 수 있지만 오해를 불러일으키거나 혼란을 야기할 가능성도 있습니다. 이 장에서는 코드와 주석 사이의 복잡한 관계를 탐구하고 코드의 명확성과 의도를
모호하게 하기보다는 향상시키는 관행을 옹호합니다.`),Us.forEach(s),_=f(cs),v=p(cs,"H3",{id:!0});var an=o(v);t=p(an,"A",{href:!0});var ln=o(t);k=p(ln,"STRONG",{});var fn=o(k);d=c(fn,"코드의 진실"),fn.forEach(s),ln.forEach(s),an.forEach(s),L=f(cs),M=p(cs,"P",{});var un=o(M);us=c(un,`소프트웨어 개발의 핵심에는 단순한 진실이 있습니다. 즉, 코드 자체가 소프트웨어가 수행하는 작업의 최종 소스입니다. 주석은 의도가 좋은 경우가 많지만 코드 실행을 변경할 수 없으며 코드가 발전함에 따라 오래되거나
부정확해질 수 있습니다. 코드를 진실의 단일 소스로 인식하면 개발자는 프로그래밍 방식에서 명확성과 정확성을 우선시하게 됩니다.`),un.forEach(s),C=f(cs),I=p(cs,"H3",{id:!0});var pn=o(I);es=p(pn,"A",{href:!0});var kn=o(es);X=p(kn,"STRONG",{});var on=o(X);A=c(on,"주석과 잘못된 코드"),on.forEach(s),kn.forEach(s),pn.forEach(s),Q=f(cs),B=p(cs,"P",{});var En=o(B);q=c(En,`복잡하거나 불분명한 코드의 단점을 광범위한 주석으로 해결할 수 있다는 것은 일반적인 오해입니다. 그러나 이해하기 위해 주석에 크게 의존하는 코드베이스는 더 깊은 문제의 징후입니다. 설명의 필요성을 최소화하는 표현력
있고 잘 구조화된 코드는 변함없이 선호되며 깔끔한 코딩 관행의 중요성을 강조합니다.`),En.forEach(s),ps=f(cs),V=p(cs,"H3",{id:!0});var dn=o(V);z=p(dn,"A",{href:!0});var mn=o(z);K=p(mn,"STRONG",{});var en=o(K);_s=c(en,"표현적 코드"),en.forEach(s),mn.forEach(s),dn.forEach(s),rs=f(cs),ss=p(cs,"P",{});var hn=o(ss);Es=c(hn,`효과적인 코딩의 핵심은 구조와 명명 규칙을 통해 의도를 직접 전달하는 능력에 있습니다. 코드를 명확하게 작성하면 주석의 필요성이 줄어듭니다. 설명을 자명한 함수나 변수로 변환하면 추가 설명이 필요하지 않아 코드가
간소화되고 가독성과 유지 관리성이 향상되는 경우가 많습니다.`),hn.forEach(s),fs=f(cs),Y=p(cs,"H3",{id:!0});var rn=o(Y);ts=p(rn,"A",{href:!0});var Ln=o(ts);Z=p(Ln,"STRONG",{});var Pn=o(Z);D=c(Pn,"좋은주석의 가치"),Pn.forEach(s),Ln.forEach(s),rn.forEach(s),F=f(cs),ns=p(cs,"P",{});var wn=o(ns);x=c(wn,"목표는 주석에 대한 의존도를 최소화하는 것이지만 다음과 같은 특정 유형의 댓글은 매우 중요합니다."),wn.forEach(s),b=f(cs),g=p(cs,"UL",{});var cn=o(g);ms=p(cn,"LI",{});var yn=o(ms);hs=p(yn,"STRONG",{});var Jn=o(hs);ds=c(Jn,"법적 및 저작권 참고 사항"),Jn.forEach(s),as=c(yn,": 지적 재산권을 보호하고 사용 권한을 명확히 하는 데 필수적입니다."),yn.forEach(s),is=f(cn),S=p(cn,"LI",{});var vn=o(S);ys=p(vn,"STRONG",{});var _n=o(ys);O=c(_n,"정보 주석"),_n.forEach(s),ks=c(vn,": 특히 코드 제약 조건이 있는 경우 컨텍스트를 제공하거나 특정 결정의 근거를 설명합니다."),vn.forEach(s),bs=f(cn),j=p(cn,"LI",{});var bn=o(j);vs=p(bn,"STRONG",{});var Un=o(vs);ls=c(Un,"의도 및 설명"),Un.forEach(s),Ps=c(bn,": 코드가 존재하는 이유를 설명하거나 복잡한 논리를 명확히 하는 설명은 특히 외부 라이브러리나 피할 수 없는 복잡성을 처리할 때 도움이 될 수 있습니다."),bn.forEach(s),cn.forEach(s),Is=f(cs),Ls=p(cs,"H3",{id:!0});var Mn=o(Ls);xs=p(Mn,"A",{href:!0});var Sn=o(xs);W=p(Sn,"STRONG",{});var An=o(W);ws=c(An,"안좋은 주석의 함정"),An.forEach(s),Sn.forEach(s),Mn.forEach(s),Ss=f(cs),Ms=p(cs,"P",{});var Xn=o(Ms);Ns=c(Xn,"반대로, 많은 주석은 코드의 품질과 가독성을 떨어뜨립니다. 예는 다음과 같습니다:"),Xn.forEach(s),Hs=f(cs),Gs=p(cs,"UL",{});var $n=o(Gs);w=p($n,"LI",{});var zn=o(w);h=p(zn,"STRONG",{});var gn=o(h);$s=c(gn,"중복되거나 오해의 소지가 있는 주석"),gn.forEach(s),Zs=c(zn,": 명백한 내용을 다시 설명하거나 부정확한 내용을 포함하는 댓글은 도움이 되기보다는 해로울 수 있습니다."),zn.forEach(s),Fs=f($n),As=p($n,"LI",{});var Bn=o(As);Ys=p(Bn,"STRONG",{});var Fn=o(Ys);Ws=c(Fn,"오래되었거나 오래된 정보"),Fn.forEach(s),os=c(Bn,": 설명하는 코드와 함께 유지 관리되지 않은 주석은 혼란을 야기합니다."),Bn.forEach(s),N=f($n),Rs=p($n,"LI",{});var sa=o(Rs);nn=p(sa,"STRONG",{});var J=o(nn);Vs=c(J,"주석 처리된 코드"),J.forEach(s),gs=c(sa,": 코드베이스를 복잡하게 만드는 일반적인 나쁜 습관으로, 버전 제어 시스템에 대한 신뢰도가 부족함을 나타냅니다."),sa.forEach(s),$n.forEach(s),G=f(cs),Ts=p(cs,"H3",{id:!0});var Js=o(Ts);Xs=p(Js,"A",{href:!0});var In=o(Xs);H=p(In,"STRONG",{});var ta=o(H);P=c(ta,"결론"),ta.forEach(s),In.forEach(s),Js.forEach(s),js=f(cs),sn=p(cs,"P",{});var xn=o(sn);qs=c(xn,`코드의 주석은 미묘한 공간을 차지하므로 의도를 명확히 하고 이해를 혼란스럽게 할 수 있습니다. 지침 원칙은 코드만으로는 충분하지 않은 곳에 가치를 추가하기 위해 주석을 아껴서 신중하게 사용하여 가능한 한 설명이 필요
없는 코드를 작성하는 것입니다. 코드의 명확성과 표현력을 우선시하는 방식을 채택함으로써 개발자는 주석에 대한 의존도를 줄여 더 깔끔하고 유지 관리하기 쉬운 코드베이스를 만들 수 있습니다.`),xn.forEach(s),this.h()},h(){m(t,"href","#코드의-진실"),m(v,"id","코드의-진실"),m(es,"href","#주석과-잘못된-코드"),m(I,"id","주석과-잘못된-코드"),m(z,"href","#표현적-코드"),m(V,"id","표현적-코드"),m(ts,"href","#좋은주석의-가치"),m(Y,"id","좋은주석의-가치"),m(xs,"href","#안좋은-주석의-함정"),m(Ls,"id","안좋은-주석의-함정"),m(Xs,"href","#결론"),m(Ts,"id","결론")},m(cs,Us){l(cs,a,Us),n(a,r),l(cs,_,Us),l(cs,v,Us),n(v,t),n(t,k),n(k,d),l(cs,L,Us),l(cs,M,Us),n(M,us),l(cs,C,Us),l(cs,I,Us),n(I,es),n(es,X),n(X,A),l(cs,Q,Us),l(cs,B,Us),n(B,q),l(cs,ps,Us),l(cs,V,Us),n(V,z),n(z,K),n(K,_s),l(cs,rs,Us),l(cs,ss,Us),n(ss,Es),l(cs,fs,Us),l(cs,Y,Us),n(Y,ts),n(ts,Z),n(Z,D),l(cs,F,Us),l(cs,ns,Us),n(ns,x),l(cs,b,Us),l(cs,g,Us),n(g,ms),n(ms,hs),n(hs,ds),n(ms,as),n(g,is),n(g,S),n(S,ys),n(ys,O),n(S,ks),n(g,bs),n(g,j),n(j,vs),n(vs,ls),n(j,Ps),l(cs,Is,Us),l(cs,Ls,Us),n(Ls,xs),n(xs,W),n(W,ws),l(cs,Ss,Us),l(cs,Ms,Us),n(Ms,Ns),l(cs,Hs,Us),l(cs,Gs,Us),n(Gs,w),n(w,h),n(h,$s),n(w,Zs),n(Gs,Fs),n(Gs,As),n(As,Ys),n(Ys,Ws),n(As,os),n(Gs,N),n(Gs,Rs),n(Rs,nn),n(nn,Vs),n(Rs,gs),l(cs,G,Us),l(cs,Ts,Us),n(Ts,Xs),n(Xs,H),n(H,P),l(cs,js,Us),l(cs,sn,Us),n(sn,qs)},p:Vn,d(cs){cs&&s(a),cs&&s(_),cs&&s(v),cs&&s(L),cs&&s(M),cs&&s(C),cs&&s(I),cs&&s(Q),cs&&s(B),cs&&s(ps),cs&&s(V),cs&&s(rs),cs&&s(ss),cs&&s(fs),cs&&s(Y),cs&&s(F),cs&&s(ns),cs&&s(b),cs&&s(g),cs&&s(Is),cs&&s(Ls),cs&&s(Ss),cs&&s(Ms),cs&&s(Hs),cs&&s(Gs),cs&&s(G),cs&&s(Ts),cs&&s(js),cs&&s(sn)}}}function Ku(E){let a,r;const _=[E[0],De];let v={$$slots:{default:[Xu]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(De)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const De={title:"4장 주석",summary:"주석은 코드 내에서 중요한 역할을 수행하지만, 그것이 코드 자체의 명확성을 대체할 수는 없습니다. 이 장에서는 주석의 이중성을 다루며, 언제 주석이 도움이 되고, 언제 그것이 코드의 진실을 가리고 혼란을 야기할 수 있는지를 설명합니다. 또한, 좋은 주석과 나쁜 주석의 예를 들어 주석 사용의 베스트 프랙티스를 제시합니다.",date:"2024-01-12",published:!1};function Qu(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let Zu=class extends Hn{constructor(a){super(),jn(this,a,Qu,Ku,Rn,{})}};const gu=Object.freeze(Object.defineProperty({__proto__:null,default:Zu,metadata:De},Symbol.toStringTag,{value:"Module"}));function sc(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z=`<code class="language-java"><span class="token comment">// 나쁜 예: 지나치게 긴 줄</span>
<span class="token class-name">String</span> userDetails <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">UserNotFoundException</span><span class="token punctuation">(</span><span class="token string">"사용자를 찾을 수 없습니다."</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 좋은 예: 가독성을 위해 나눈 문장</span>
<span class="token class-name">String</span> userDetails <span class="token operator">=</span> userRepository<span class="token punctuation">.</span><span class="token function">findByName</span><span class="token punctuation">(</span><span class="token string">"John Doe"</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">orElseThrow</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token keyword">new</span> <span class="token class-name">UserNotFoundException</span><span class="token punctuation">(</span><span class="token string">"사용자를 찾을 수 없습니다."</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">getDetails</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code>`,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserManagement</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">;</span>

    <span class="token comment">// 생성자와 메소드 사이에 빈 줄을 사용하여 구분</span>
    <span class="token keyword">public</span> <span class="token class-name">UserManagement</span><span class="token punctuation">(</span><span class="token class-name">UserRepository</span> userRepository<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>userRepository <span class="token operator">=</span> userRepository<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 메소드 사이에 빈 줄을 사용하여 명확성 향상</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">validateUser</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
        userRepository<span class="token punctuation">.</span><span class="token function">save</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">validateUser</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 메소드 구현</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
</code>`,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Authentication</span> <span class="token punctuation">&#123;</span>

    <span class="token comment">// 관련 메소드를 수직으로 그룹화</span>
    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 로그인 로직</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">isValidCredential</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 검증 로직</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Fs,As,Ys,Ws,os,N,Rs,nn,Vs,gs,G=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProductService</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// 가장 중요한 메소드를 상단에 배치</span>
    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Product</span><span class="token punctuation">></span></span> <span class="token function">findAllProducts</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 모든 제품 찾기 로직</span>
    <span class="token punctuation">&#125;</span>

    <span class="token comment">// 기본 기능 아래에 보조 메소드 배치</span>
    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">updateInventory</span><span class="token punctuation">(</span><span class="token class-name">Product</span> product<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 재고 업데이트 로직</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Ts,Xs,H,P,js,sn,qs,cs,Us,an,ln,fn,un,pn,kn,on,En,dn,mn,en,hn,rn,Ln,Pn,wn,cn,yn=`<code class="language-java"><span class="token comment">// 나쁜 예: 가독성 문제를 초래하는 불필요한 정렬</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> quantity<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> productName<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span>

<span class="token comment">// 좋은 예: 간단하고 직관적인 선언</span>
<span class="token keyword">private</span> <span class="token keyword">int</span> quantity<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> productName<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">double</span> price<span class="token punctuation">;</span></code>`,Jn,vn,_n,bn,Un,Mn,Sn,An,Xn,$n,zn,gn,Bn,Fn,sa;return{c(){a=e("p"),r=u(`개발자로서 우리는 코드 작성이 단지 무언가를 작동하게 만드는 것만이 아니라는 것을 알고 있습니다. 또한 자신과 팀이 코드베이스를 유지 관리하고, 읽을 수 있고, 이해할 수 있도록 만드는 것입니다. 이를 달성하기 위한
기본 요소 중 하나는 일관되고 깔끔한 코드 형식을 사용하는 것입니다. 이 가이드에서는 적절한 코드 형식을 유지하는 이유와 방법을 살펴보겠습니다.`),_=i(),v=e("h2"),t=e("a"),k=e("strong"),d=u("코드 형식의 중요성"),L=i(),M=e("p"),us=u(`코드 형식 지정은 어떤 사람들에게는 사소해 보일 수도 있지만 매우 중요합니다. 현재 구현하고 있는 기능은 향후 변경될 가능성이 높습니다. 형식에 따라 결정되는 코드의 가독성과 품질은 이러한 변경을 촉진하는 데 중요한
역할을 합니다. 형식이 잘 지정된 코드베이스는 이해, 디버깅 및 확장이 더 쉽습니다.`),C=i(),I=e("h2"),es=e("a"),X=e("strong"),A=u("줄 길이 확인하기"),Q=i(),B=e("p"),q=u(`대부분의 파일이 500줄을 초과하지 않고 대부분이 200줄 정도를 맴돌도록 시스템을 구축하는 것을 목표로 합니다. 이 접근 방식은 신문 기사 작성과 일치합니다. 상단에 내용을 요약하는 간결한 제목을 배치하고 기사의
본질을 요약하는 첫 번째 문단을 추가합니다. 마찬가지로, 소스 파일의 이름은 목적을 반영하도록 정확하게 지정되어야 하며, 높은 수준의 개념부터 시작하여 점차 자세한 설명으로 이동해야 합니다.`),ps=i(),V=e("pre"),K=i(),_s=e("h3"),rs=e("a"),ss=e("strong"),Es=u("개념 분리"),fs=i(),Y=e("p"),ts=u("기사의 단락과 마찬가지로 코드 개념을 빈 줄로 구분하여 가독성을 높입니다. 일련의 각 줄은 왼쪽에서 오른쪽으로, 위에서 아래로 읽혀 완전한 아이디어를 나타내야 합니다."),Z=i(),D=e("pre"),ns=i(),x=e("h3"),b=e("a"),g=e("strong"),ms=u("수직 밀도 및 거리"),hs=i(),ds=e("p"),as=u(`수직 밀도는 밀접하게 관련된 코드 줄의 근접성을 나타내며, 관련 코드가 수직으로 함께 그룹화되어야 함을 나타냅니다. 반대로, 수직 거리는 개념적 일관성을 유지하기 위해 밀접하게 관련된 개념이 서로 가까이 배치되어야
한다는 원칙을 강조합니다. 여기에는 다음이 포함됩니다.`),is=i(),S=e("ul"),ys=e("li"),O=e("strong"),ks=u("변수 선언"),bs=u(": 변수를 가능한 한 용도에 가깝게 배치합니다."),j=i(),vs=e("li"),ls=e("strong"),Ps=u("인스턴스 변수"),Is=u(": 일반적으로 클래스 시작 부분에 선언됩니다."),Ls=i(),xs=e("li"),W=e("strong"),ws=u("종속 함수"),Ss=u(": 서로 호출하는 함수는 코드에서 밀접하게 배치되어야 합니다."),Ms=i(),Ns=e("li"),Hs=e("strong"),Gs=u("개념적 유사성"),w=u(": 유사한 기능이나 종속성을 가진 코드는 함께 그룹화되어야 합니다"),h=i(),$s=e("pre"),Fs=i(),As=e("h3"),Ys=e("a"),Ws=e("strong"),os=u("세로 순서"),N=i(),Rs=e("p"),nn=u("가장 중요한 개념부터 시작하여 불필요한 세부 사항을 초기에 피하세요. 이는 세부 사항을 살펴보기 전에 더 넓은 그림을 이해하는 데 도움이 됩니다."),Vs=i(),gs=e("pre"),Ts=i(),Xs=e("h2"),H=e("a"),P=e("strong"),js=u("가로 서식 관행"),sn=i(),qs=e("p"),cs=u(`프로그래머는 더 짧은 줄을 선호하는 경향이 있지만 최대 100자 또는 120자까지 확장하는 것이 허용됩니다. 그러나 줄이 길면 세부 사항에 대한 관심이 부족함을 나타낼 수 있습니다. 고려해야 할 가로 형식 측면은
다음과 같습니다.`),Us=i(),an=e("ul"),ln=e("li"),fn=e("strong"),un=u("공간 및 밀도"),pn=u(": 수평 공간을 사용하여 밀접하게 관련된 개념을 나타냅니다."),kn=i(),on=e("li"),En=e("strong"),dn=u("정렬"),mn=u(": 코드의 논리를 강조하지 않는 불필요한 공백을 피하세요."),en=i(),hn=e("li"),rn=e("strong"),Ln=u("들여쓰기"),Pn=u(": 명확한 들여쓰기 패턴은 코드의 가독성을 높일 뿐만 아니라 다양한 섹션과 로직 수준을 시각적으로 구분합니다."),wn=i(),cn=e("pre"),Jn=i(),vn=e("h2"),_n=e("a"),bn=e("strong"),Un=u("팀 규칙"),Mn=i(),Sn=e("p"),An=u("팀이 일련의 서식 지정 규칙에 동의하고 모든 구성원이 이를 준수하는지 확인하는 것이 중요합니다. 프로젝트 전반에 걸친 형식의 일관성은 인지 부하를 줄이고 코드의 톤과 방식을 유지합니다."),Xn=i(),$n=e("h2"),zn=e("a"),gn=u("결론"),Bn=i(),Fn=e("p"),sa=u(`코드베이스에서 깔끔하고 일관된 형식을 유지하는 것은 잘 작성된 매뉴얼을 만드는 것과 비슷합니다. 이러한 표준을 따라가는 것은 어려울 수 있지만 장기적으로 보면 그 노력은 성과를 거두게 됩니다. 한 달이 지나면 코드의
가독성과 유지 관리 용이성에 대해 감사하게 될 것입니다. 우리의 코드가 기능적일 뿐만 아니라 읽고 작업하기에도 즐거운 코드가 되도록 노력합시다.`),this.h()},l(J){a=p(J,"P",{});var Js=o(a);r=c(Js,`개발자로서 우리는 코드 작성이 단지 무언가를 작동하게 만드는 것만이 아니라는 것을 알고 있습니다. 또한 자신과 팀이 코드베이스를 유지 관리하고, 읽을 수 있고, 이해할 수 있도록 만드는 것입니다. 이를 달성하기 위한
기본 요소 중 하나는 일관되고 깔끔한 코드 형식을 사용하는 것입니다. 이 가이드에서는 적절한 코드 형식을 유지하는 이유와 방법을 살펴보겠습니다.`),Js.forEach(s),_=f(J),v=p(J,"H2",{id:!0});var In=o(v);t=p(In,"A",{href:!0});var ta=o(t);k=p(ta,"STRONG",{});var xn=o(k);d=c(xn,"코드 형식의 중요성"),xn.forEach(s),ta.forEach(s),In.forEach(s),L=f(J),M=p(J,"P",{});var qn=o(M);us=c(qn,`코드 형식 지정은 어떤 사람들에게는 사소해 보일 수도 있지만 매우 중요합니다. 현재 구현하고 있는 기능은 향후 변경될 가능성이 높습니다. 형식에 따라 결정되는 코드의 가독성과 품질은 이러한 변경을 촉진하는 데 중요한
역할을 합니다. 형식이 잘 지정된 코드베이스는 이해, 디버깅 및 확장이 더 쉽습니다.`),qn.forEach(s),C=f(J),I=p(J,"H2",{id:!0});var T=o(I);es=p(T,"A",{href:!0});var Ds=o(es);X=p(Ds,"STRONG",{});var ra=o(X);A=c(ra,"줄 길이 확인하기"),ra.forEach(s),Ds.forEach(s),T.forEach(s),Q=f(J),B=p(J,"P",{});var ka=o(B);q=c(ka,`대부분의 파일이 500줄을 초과하지 않고 대부분이 200줄 정도를 맴돌도록 시스템을 구축하는 것을 목표로 합니다. 이 접근 방식은 신문 기사 작성과 일치합니다. 상단에 내용을 요약하는 간결한 제목을 배치하고 기사의
본질을 요약하는 첫 번째 문단을 추가합니다. 마찬가지로, 소스 파일의 이름은 목적을 반영하도록 정확하게 지정되어야 하며, 높은 수준의 개념부터 시작하여 점차 자세한 설명으로 이동해야 합니다.`),ka.forEach(s),ps=f(J),V=p(J,"PRE",{class:!0});var _a=o(V);_a.forEach(s),K=f(J),_s=p(J,"H3",{id:!0});var ma=o(_s);rs=p(ma,"A",{href:!0});var Aa=o(rs);ss=p(Aa,"STRONG",{});var ya=o(ss);Es=c(ya,"개념 분리"),ya.forEach(s),Aa.forEach(s),ma.forEach(s),fs=f(J),Y=p(J,"P",{});var pa=o(Y);ts=c(pa,"기사의 단락과 마찬가지로 코드 개념을 빈 줄로 구분하여 가독성을 높입니다. 일련의 각 줄은 왼쪽에서 오른쪽으로, 위에서 아래로 읽혀 완전한 아이디어를 나타내야 합니다."),pa.forEach(s),Z=f(J),D=p(J,"PRE",{class:!0});var Ia=o(D);Ia.forEach(s),ns=f(J),x=p(J,"H3",{id:!0});var va=o(x);b=p(va,"A",{href:!0});var oa=o(b);g=p(oa,"STRONG",{});var na=o(g);ms=c(na,"수직 밀도 및 거리"),na.forEach(s),oa.forEach(s),va.forEach(s),hs=f(J),ds=p(J,"P",{});var ia=o(ds);as=c(ia,`수직 밀도는 밀접하게 관련된 코드 줄의 근접성을 나타내며, 관련 코드가 수직으로 함께 그룹화되어야 함을 나타냅니다. 반대로, 수직 거리는 개념적 일관성을 유지하기 위해 밀접하게 관련된 개념이 서로 가까이 배치되어야
한다는 원칙을 강조합니다. 여기에는 다음이 포함됩니다.`),ia.forEach(s),is=f(J),S=p(J,"UL",{});var ea=o(S);ys=p(ea,"LI",{});var ua=o(ys);O=p(ua,"STRONG",{});var Ea=o(O);ks=c(Ea,"변수 선언"),Ea.forEach(s),bs=c(ua,": 변수를 가능한 한 용도에 가깝게 배치합니다."),ua.forEach(s),j=f(ea),vs=p(ea,"LI",{});var Zn=o(vs);ls=p(Zn,"STRONG",{});var Ta=o(ls);Ps=c(Ta,"인스턴스 변수"),Ta.forEach(s),Is=c(Zn,": 일반적으로 클래스 시작 부분에 선언됩니다."),Zn.forEach(s),Ls=f(ea),xs=p(ea,"LI",{});var Pa=o(xs);W=p(Pa,"STRONG",{});var Kn=o(W);ws=c(Kn,"종속 함수"),Kn.forEach(s),Ss=c(Pa,": 서로 호출하는 함수는 코드에서 밀접하게 배치되어야 합니다."),Pa.forEach(s),Ms=f(ea),Ns=p(ea,"LI",{});var ca=o(Ns);Hs=p(ca,"STRONG",{});var da=o(Hs);Gs=c(da,"개념적 유사성"),da.forEach(s),w=c(ca,": 유사한 기능이나 종속성을 가진 코드는 함께 그룹화되어야 합니다"),ca.forEach(s),ea.forEach(s),h=f(J),$s=p(J,"PRE",{class:!0});var R=o($s);R.forEach(s),Fs=f(J),As=p(J,"H3",{id:!0});var zs=o(As);Ys=p(zs,"A",{href:!0});var ja=o(Ys);Ws=p(ja,"STRONG",{});var wa=o(Ws);os=c(wa,"세로 순서"),wa.forEach(s),ja.forEach(s),zs.forEach(s),N=f(J),Rs=p(J,"P",{});var la=o(Rs);nn=c(la,"가장 중요한 개념부터 시작하여 불필요한 세부 사항을 초기에 피하세요. 이는 세부 사항을 살펴보기 전에 더 넓은 그림을 이해하는 데 도움이 됩니다."),la.forEach(s),Vs=f(J),gs=p(J,"PRE",{class:!0});var $=o(gs);$.forEach(s),Ts=f(J),Xs=p(J,"H2",{id:!0});var Bs=o(Xs);H=p(Bs,"A",{href:!0});var Ra=o(H);P=p(Ra,"STRONG",{});var Ma=o(P);js=c(Ma,"가로 서식 관행"),Ma.forEach(s),Ra.forEach(s),Bs.forEach(s),sn=f(J),qs=p(J,"P",{});var ba=o(qs);cs=c(ba,`프로그래머는 더 짧은 줄을 선호하는 경향이 있지만 최대 100자 또는 120자까지 확장하는 것이 허용됩니다. 그러나 줄이 길면 세부 사항에 대한 관심이 부족함을 나타낼 수 있습니다. 고려해야 할 가로 형식 측면은
다음과 같습니다.`),ba.forEach(s),Us=f(J),an=p(J,"UL",{});var ha=o(an);ln=p(ha,"LI",{});var Oa=o(ln);fn=p(Oa,"STRONG",{});var Da=o(fn);un=c(Da,"공간 및 밀도"),Da.forEach(s),pn=c(Oa,": 수평 공간을 사용하여 밀접하게 관련된 개념을 나타냅니다."),Oa.forEach(s),kn=f(ha),on=p(ha,"LI",{});var aa=o(on);En=p(aa,"STRONG",{});var $a=o(En);dn=c($a,"정렬"),$a.forEach(s),mn=c(aa,": 코드의 논리를 강조하지 않는 불필요한 공백을 피하세요."),aa.forEach(s),en=f(ha),hn=p(ha,"LI",{});var Ua=o(hn);rn=p(Ua,"STRONG",{});var La=o(rn);Ln=c(La,"들여쓰기"),La.forEach(s),Pn=c(Ua,": 명확한 들여쓰기 패턴은 코드의 가독성을 높일 뿐만 아니라 다양한 섹션과 로직 수준을 시각적으로 구분합니다."),Ua.forEach(s),ha.forEach(s),wn=f(J),cn=p(J,"PRE",{class:!0});var Sa=o(cn);Sa.forEach(s),Jn=f(J),vn=p(J,"H2",{id:!0});var Ba=o(vn);_n=p(Ba,"A",{href:!0});var Ca=o(_n);bn=p(Ca,"STRONG",{});var fa=o(bn);Un=c(fa,"팀 규칙"),fa.forEach(s),Ca.forEach(s),Ba.forEach(s),Mn=f(J),Sn=p(J,"P",{});var Na=o(Sn);An=c(Na,"팀이 일련의 서식 지정 규칙에 동의하고 모든 구성원이 이를 준수하는지 확인하는 것이 중요합니다. 프로젝트 전반에 걸친 형식의 일관성은 인지 부하를 줄이고 코드의 톤과 방식을 유지합니다."),Na.forEach(s),Xn=f(J),$n=p(J,"H2",{id:!0});var Fa=o($n);zn=p(Fa,"A",{href:!0});var xa=o(zn);gn=c(xa,"결론"),xa.forEach(s),Fa.forEach(s),Bn=f(J),Fn=p(J,"P",{});var Qn=o(Fn);sa=c(Qn,`코드베이스에서 깔끔하고 일관된 형식을 유지하는 것은 잘 작성된 매뉴얼을 만드는 것과 비슷합니다. 이러한 표준을 따라가는 것은 어려울 수 있지만 장기적으로 보면 그 노력은 성과를 거두게 됩니다. 한 달이 지나면 코드의
가독성과 유지 관리 용이성에 대해 감사하게 될 것입니다. 우리의 코드가 기능적일 뿐만 아니라 읽고 작업하기에도 즐거운 코드가 되도록 노력합시다.`),Qn.forEach(s),this.h()},h(){m(t,"href","#코드-형식의-중요성"),m(v,"id","코드-형식의-중요성"),m(es,"href","#줄-길이-확인하기"),m(I,"id","줄-길이-확인하기"),m(V,"class","language-java"),m(rs,"href","#개념-분리"),m(_s,"id","개념-분리"),m(D,"class","language-java"),m(b,"href","#수직-밀도-및-거리"),m(x,"id","수직-밀도-및-거리"),m($s,"class","language-java"),m(Ys,"href","#세로-순서"),m(As,"id","세로-순서"),m(gs,"class","language-java"),m(H,"href","#가로-서식-관행"),m(Xs,"id","가로-서식-관행"),m(cn,"class","language-java"),m(_n,"href","#팀-규칙"),m(vn,"id","팀-규칙"),m(zn,"href","#결론"),m($n,"id","결론")},m(J,Js){l(J,a,Js),n(a,r),l(J,_,Js),l(J,v,Js),n(v,t),n(t,k),n(k,d),l(J,L,Js),l(J,M,Js),n(M,us),l(J,C,Js),l(J,I,Js),n(I,es),n(es,X),n(X,A),l(J,Q,Js),l(J,B,Js),n(B,q),l(J,ps,Js),l(J,V,Js),V.innerHTML=z,l(J,K,Js),l(J,_s,Js),n(_s,rs),n(rs,ss),n(ss,Es),l(J,fs,Js),l(J,Y,Js),n(Y,ts),l(J,Z,Js),l(J,D,Js),D.innerHTML=F,l(J,ns,Js),l(J,x,Js),n(x,b),n(b,g),n(g,ms),l(J,hs,Js),l(J,ds,Js),n(ds,as),l(J,is,Js),l(J,S,Js),n(S,ys),n(ys,O),n(O,ks),n(ys,bs),n(S,j),n(S,vs),n(vs,ls),n(ls,Ps),n(vs,Is),n(S,Ls),n(S,xs),n(xs,W),n(W,ws),n(xs,Ss),n(S,Ms),n(S,Ns),n(Ns,Hs),n(Hs,Gs),n(Ns,w),l(J,h,Js),l(J,$s,Js),$s.innerHTML=Zs,l(J,Fs,Js),l(J,As,Js),n(As,Ys),n(Ys,Ws),n(Ws,os),l(J,N,Js),l(J,Rs,Js),n(Rs,nn),l(J,Vs,Js),l(J,gs,Js),gs.innerHTML=G,l(J,Ts,Js),l(J,Xs,Js),n(Xs,H),n(H,P),n(P,js),l(J,sn,Js),l(J,qs,Js),n(qs,cs),l(J,Us,Js),l(J,an,Js),n(an,ln),n(ln,fn),n(fn,un),n(ln,pn),n(an,kn),n(an,on),n(on,En),n(En,dn),n(on,mn),n(an,en),n(an,hn),n(hn,rn),n(rn,Ln),n(hn,Pn),l(J,wn,Js),l(J,cn,Js),cn.innerHTML=yn,l(J,Jn,Js),l(J,vn,Js),n(vn,_n),n(_n,bn),n(bn,Un),l(J,Mn,Js),l(J,Sn,Js),n(Sn,An),l(J,Xn,Js),l(J,$n,Js),n($n,zn),n(zn,gn),l(J,Bn,Js),l(J,Fn,Js),n(Fn,sa)},p:Vn,d(J){J&&s(a),J&&s(_),J&&s(v),J&&s(L),J&&s(M),J&&s(C),J&&s(I),J&&s(Q),J&&s(B),J&&s(ps),J&&s(V),J&&s(K),J&&s(_s),J&&s(fs),J&&s(Y),J&&s(Z),J&&s(D),J&&s(ns),J&&s(x),J&&s(hs),J&&s(ds),J&&s(is),J&&s(S),J&&s(h),J&&s($s),J&&s(Fs),J&&s(As),J&&s(N),J&&s(Rs),J&&s(Vs),J&&s(gs),J&&s(Ts),J&&s(Xs),J&&s(sn),J&&s(qs),J&&s(Us),J&&s(an),J&&s(wn),J&&s(cn),J&&s(Jn),J&&s(vn),J&&s(Mn),J&&s(Sn),J&&s(Xn),J&&s($n),J&&s(Bn),J&&s(Fn)}}}function nc(E){let a,r;const _=[E[0],Ue];let v={$$slots:{default:[sc]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Ue)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Ue={title:"5장 형식 맞추기",summary:"코드 작성 시 형식을 일관되게 유지하는 것은 개발 팀이 코드베이스를 보다 효과적으로 관리하고 이해할 수 있게 하는 핵심적인 요소입니다. 이 가이드에서는 코드 형식의 중요성과 이를 효과적으로 구현하는 방법에 대해 자세히 설명합니다.",date:"2024-01-15",published:!1};function ac(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let tc=class extends Hn{constructor(a){super(),jn(this,a,ac,nc,Rn,{})}};const ec=Object.freeze(Object.defineProperty({__proto__:null,default:tc,metadata:Ue},Symbol.toStringTag,{value:"Module"}));function pc(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token class-name">Point</span> center<span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> redius<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Geometry</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token class-name">Object</span> shape<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">NoSuchShapeException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Square</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Square</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Square</span><span class="token punctuation">)</span> shape<span class="token punctuation">;</span>
            <span class="token keyword">return</span> s<span class="token punctuation">.</span>side <span class="token operator">*</span> s<span class="token punctuation">.</span>side<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Rectangle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Rectangle</span> r <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Rectangle</span><span class="token punctuation">)</span> shape<span class="token punctuation">;</span>
            <span class="token keyword">return</span> r<span class="token punctuation">.</span>height <span class="token operator">*</span> r<span class="token punctuation">.</span>width<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>shape <span class="token keyword">instanceof</span> <span class="token class-name">Circle</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">Circle</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span> shape<span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token constant">PI</span> <span class="token operator">*</span> c<span class="token punctuation">.</span>radius <span class="token operator">*</span> c<span class="token punctuation">.</span>radius<span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NoSuchShapeException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,V,z,K,_s,rs,ss=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> side <span class="token operator">*</span> side<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Es,fs,Y,ts,Z,D,F,ns,x,b=`<code class="language-java"><span class="token comment">// as-is: 부적절한 기차놀이의 예 각 인자가 소유하는 객체들의 공개범위가 너무 넓다.</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> outputDir <span class="token operator">=</span> ctext<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getScracthDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// to-be: 공개범위를 알맞게 수정한 예</span>
<span class="token class-name">Options</span> opts <span class="token operator">=</span> ctxt<span class="token punctuation">.</span><span class="token function">getOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">File</span> dir <span class="token operator">=</span> opts<span class="token punctuation">.</span><span class="token function">getScratchDir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">final</span> <span class="token class-name">String</span> outputDir <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code>`,g,ms,hs,ds,as,is,S=`<code class="language-java">ctx<span class="token punctuation">.</span><span class="token function">getAboslutePathOfScratchDirectoryOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ctxt 객체에 공개해야 하는 메서드가 너무 많아진다</span>
ctx<span class="token punctuation">.</span><span class="token function">getScratchDirectoryOption</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>
<span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 자료 구조를 반환 한다고 가정한다.</span></code>`,ys,O,ks,bs,j,vs,ls,Ps,Is='<code class="language-java"><span class="token class-name">BufferedOutputStream</span> bos <span class="token operator">=</span> ctxt<span class="token punctuation">.</span><span class="token function">createScratchFilesStream</span><span class="token punctuation">(</span>classFileName<span class="token punctuation">)</span><span class="token punctuation">;</span></code>',Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> property1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> property2<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Default constructor</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> property1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperty1</span><span class="token punctuation">(</span><span class="token class-name">String</span> property1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>property1 <span class="token operator">=</span> property1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProperty2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> property2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperty2</span><span class="token punctuation">(</span><span class="token keyword">int</span> property2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>property2 <span class="token operator">=</span> property2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Fs,As,Ys,Ws,os,N,Rs,nn,Vs,gs,G,Ts,Xs,H;return{c(){a=e("p"),r=u("변수를 비공개로 정의 하는 이유는 남들이 변수에 의존하지 않게 만들고 싶어서다."),_=i(),v=e("h3"),t=e("a"),k=u("자료 추상화"),d=i(),L=e("p"),M=u(`변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필요하다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의
클래스다. 개발자는 객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다.`),us=i(),C=e("h3"),I=e("a"),es=u("자료/객체 비대칭"),X=i(),A=e("p"),Q=u(`객체와 자료 구조는 근본적으로 양분된다. 절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 쉽다.
절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다.
그러려면 모든 클래스를 고쳐야 한다. 다시 말하자면 둘다 참이다. 객체 지향코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다.
절차적인 접근법은 아래와 같다.`),B=i(),q=e("pre"),V=i(),z=e("p"),K=u("다형성 접근 예시는 아래와 같다."),_s=i(),rs=e("pre"),Es=i(),fs=e("h3"),Y=e("a"),ts=u("디미터 법칙"),Z=i(),D=e("p"),F=u(`디미터 법칙이란 모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다.
객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 자료구조 라면 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다.
아래는 기차놀이의 예로 함수들이 호출하는 객체의 인스턴스 공개범위가 너무 넓어지는 예이다.`),ns=i(),x=e("pre"),g=i(),ms=e("h3"),hs=e("a"),ds=u("두개를 섞어볼까?"),as=i(),is=e("pre"),ys=i(),O=e("p"),ks=u("애석하게도 절반은 객체, 절반은 자료 구조인 "),bs=e("strong"),j=u("잡종 구조"),vs=u(`가 나온다. 이런 잡종 구조는 새로운 함수는 물론이고 새로운 자료 구조도 추가하기 어렵다.
단점만 모아놓은 구조이다. 그렇다면 임시 디렉토리의 절대 경로는 어떻게 얻어야 좋을까?`),ls=i(),Ps=e("pre"),Ls=i(),xs=e("p"),W=u("그렇다면 ctxt 객체에 임시 파일을 생성하라고 시키면 어떨까? 객체에게 맡기기에 적당한 임무로 보인다!"),ws=i(),Ss=e("h3"),Ms=e("a"),Ns=u("자료 전달 객체"),Hs=i(),Gs=e("p"),w=u(`자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스이다. 이런 자료구조체를 DTO(Data Transfer Object)라 한다. 좀더 일반적인 형태는 Bean 구조이다.
비공개 변수를 조회 설정 함수로 조작하는 방식은 사이비 캡슐화로 일부 순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다.`),h=i(),$s=e("pre"),Fs=i(),As=e("h3"),Ys=e("a"),Ws=u("활성 레코드"),os=i(),N=e("p"),Rs=u(`공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료구조, 대게 save나 find와 같이 탐색함수도 제공한다.
불행히도 비즈니스 규칙 메서드를 추가해 이런 자료 구조를 개체로 취급하는 개발자가 흔하다. 하지만 이는 바람직하지 않다. 활성 레코드는 자료 구조로 취급한다.`),nn=i(),Vs=e("h3"),gs=e("a"),G=u("결론"),Ts=i(),Xs=e("p"),H=u(`객체는 동작을 공개하고 자료를 숨긴다. 기존 동작을 변경하지 않으면서 객체 타입을 추가하기는 쉬운 반면 기존 객체에 새 동작을 추가하기는 어렵다.
자료 구조는 동작 없이 자료를 노출한다. 기존 자료 구조에 새 동작을 추가하기 쉬우나, 기존 함수에 새 자료 구조를 추가하기는 어렵다.
시스템을 구현할때 새로운 자료 타입을 추가하는 유연셩이 필요하면 객체가 더 적합하다. 새로운 동작을 추가하는 유연성이 필요하면 절차적인 코드가 더 적합하다. 어느쪽이 맞는가는 상황에 따라 다르다.`),this.h()},l(P){a=p(P,"P",{});var js=o(a);r=c(js,"변수를 비공개로 정의 하는 이유는 남들이 변수에 의존하지 않게 만들고 싶어서다."),js.forEach(s),_=f(P),v=p(P,"H3",{id:!0});var sn=o(v);t=p(sn,"A",{href:!0});var qs=o(t);k=c(qs,"자료 추상화"),qs.forEach(s),sn.forEach(s),d=f(P),L=p(P,"P",{});var cs=o(L);M=c(cs,`변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필요하다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의
클래스다. 개발자는 객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다.`),cs.forEach(s),us=f(P),C=p(P,"H3",{id:!0});var Us=o(C);I=p(Us,"A",{href:!0});var an=o(I);es=c(an,"자료/객체 비대칭"),an.forEach(s),Us.forEach(s),X=f(P),A=p(P,"P",{});var ln=o(A);Q=c(ln,`객체와 자료 구조는 근본적으로 양분된다. 절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 쉽다.
절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다.
그러려면 모든 클래스를 고쳐야 한다. 다시 말하자면 둘다 참이다. 객체 지향코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다.
절차적인 접근법은 아래와 같다.`),ln.forEach(s),B=f(P),q=p(P,"PRE",{class:!0});var fn=o(q);fn.forEach(s),V=f(P),z=p(P,"P",{});var un=o(z);K=c(un,"다형성 접근 예시는 아래와 같다."),un.forEach(s),_s=f(P),rs=p(P,"PRE",{class:!0});var pn=o(rs);pn.forEach(s),Es=f(P),fs=p(P,"H3",{id:!0});var kn=o(fs);Y=p(kn,"A",{href:!0});var on=o(Y);ts=c(on,"디미터 법칙"),on.forEach(s),kn.forEach(s),Z=f(P),D=p(P,"P",{});var En=o(D);F=c(En,`디미터 법칙이란 모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다.
객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 자료구조 라면 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다.
아래는 기차놀이의 예로 함수들이 호출하는 객체의 인스턴스 공개범위가 너무 넓어지는 예이다.`),En.forEach(s),ns=f(P),x=p(P,"PRE",{class:!0});var dn=o(x);dn.forEach(s),g=f(P),ms=p(P,"H3",{id:!0});var mn=o(ms);hs=p(mn,"A",{href:!0});var en=o(hs);ds=c(en,"두개를 섞어볼까?"),en.forEach(s),mn.forEach(s),as=f(P),is=p(P,"PRE",{class:!0});var hn=o(is);hn.forEach(s),ys=f(P),O=p(P,"P",{});var rn=o(O);ks=c(rn,"애석하게도 절반은 객체, 절반은 자료 구조인 "),bs=p(rn,"STRONG",{});var Ln=o(bs);j=c(Ln,"잡종 구조"),Ln.forEach(s),vs=c(rn,`가 나온다. 이런 잡종 구조는 새로운 함수는 물론이고 새로운 자료 구조도 추가하기 어렵다.
단점만 모아놓은 구조이다. 그렇다면 임시 디렉토리의 절대 경로는 어떻게 얻어야 좋을까?`),rn.forEach(s),ls=f(P),Ps=p(P,"PRE",{class:!0});var Pn=o(Ps);Pn.forEach(s),Ls=f(P),xs=p(P,"P",{});var wn=o(xs);W=c(wn,"그렇다면 ctxt 객체에 임시 파일을 생성하라고 시키면 어떨까? 객체에게 맡기기에 적당한 임무로 보인다!"),wn.forEach(s),ws=f(P),Ss=p(P,"H3",{id:!0});var cn=o(Ss);Ms=p(cn,"A",{href:!0});var yn=o(Ms);Ns=c(yn,"자료 전달 객체"),yn.forEach(s),cn.forEach(s),Hs=f(P),Gs=p(P,"P",{});var Jn=o(Gs);w=c(Jn,`자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스이다. 이런 자료구조체를 DTO(Data Transfer Object)라 한다. 좀더 일반적인 형태는 Bean 구조이다.
비공개 변수를 조회 설정 함수로 조작하는 방식은 사이비 캡슐화로 일부 순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다.`),Jn.forEach(s),h=f(P),$s=p(P,"PRE",{class:!0});var vn=o($s);vn.forEach(s),Fs=f(P),As=p(P,"H3",{id:!0});var _n=o(As);Ys=p(_n,"A",{href:!0});var bn=o(Ys);Ws=c(bn,"활성 레코드"),bn.forEach(s),_n.forEach(s),os=f(P),N=p(P,"P",{});var Un=o(N);Rs=c(Un,`공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료구조, 대게 save나 find와 같이 탐색함수도 제공한다.
불행히도 비즈니스 규칙 메서드를 추가해 이런 자료 구조를 개체로 취급하는 개발자가 흔하다. 하지만 이는 바람직하지 않다. 활성 레코드는 자료 구조로 취급한다.`),Un.forEach(s),nn=f(P),Vs=p(P,"H3",{id:!0});var Mn=o(Vs);gs=p(Mn,"A",{href:!0});var Sn=o(gs);G=c(Sn,"결론"),Sn.forEach(s),Mn.forEach(s),Ts=f(P),Xs=p(P,"P",{});var An=o(Xs);H=c(An,`객체는 동작을 공개하고 자료를 숨긴다. 기존 동작을 변경하지 않으면서 객체 타입을 추가하기는 쉬운 반면 기존 객체에 새 동작을 추가하기는 어렵다.
자료 구조는 동작 없이 자료를 노출한다. 기존 자료 구조에 새 동작을 추가하기 쉬우나, 기존 함수에 새 자료 구조를 추가하기는 어렵다.
시스템을 구현할때 새로운 자료 타입을 추가하는 유연셩이 필요하면 객체가 더 적합하다. 새로운 동작을 추가하는 유연성이 필요하면 절차적인 코드가 더 적합하다. 어느쪽이 맞는가는 상황에 따라 다르다.`),An.forEach(s),this.h()},h(){m(t,"href","#자료-추상화"),m(v,"id","자료-추상화"),m(I,"href","#자료객체-비대칭"),m(C,"id","자료객체-비대칭"),m(q,"class","language-java"),m(rs,"class","language-java"),m(Y,"href","#디미터-법칙"),m(fs,"id","디미터-법칙"),m(x,"class","language-java"),m(hs,"href","#두개를-섞어볼까"),m(ms,"id","두개를-섞어볼까"),m(is,"class","language-java"),m(Ps,"class","language-java"),m(Ms,"href","#자료-전달-객체"),m(Ss,"id","자료-전달-객체"),m($s,"class","language-java"),m(Ys,"href","#활성-레코드"),m(As,"id","활성-레코드"),m(gs,"href","#결론"),m(Vs,"id","결론")},m(P,js){l(P,a,js),n(a,r),l(P,_,js),l(P,v,js),n(v,t),n(t,k),l(P,d,js),l(P,L,js),n(L,M),l(P,us,js),l(P,C,js),n(C,I),n(I,es),l(P,X,js),l(P,A,js),n(A,Q),l(P,B,js),l(P,q,js),q.innerHTML=ps,l(P,V,js),l(P,z,js),n(z,K),l(P,_s,js),l(P,rs,js),rs.innerHTML=ss,l(P,Es,js),l(P,fs,js),n(fs,Y),n(Y,ts),l(P,Z,js),l(P,D,js),n(D,F),l(P,ns,js),l(P,x,js),x.innerHTML=b,l(P,g,js),l(P,ms,js),n(ms,hs),n(hs,ds),l(P,as,js),l(P,is,js),is.innerHTML=S,l(P,ys,js),l(P,O,js),n(O,ks),n(O,bs),n(bs,j),n(O,vs),l(P,ls,js),l(P,Ps,js),Ps.innerHTML=Is,l(P,Ls,js),l(P,xs,js),n(xs,W),l(P,ws,js),l(P,Ss,js),n(Ss,Ms),n(Ms,Ns),l(P,Hs,js),l(P,Gs,js),n(Gs,w),l(P,h,js),l(P,$s,js),$s.innerHTML=Zs,l(P,Fs,js),l(P,As,js),n(As,Ys),n(Ys,Ws),l(P,os,js),l(P,N,js),n(N,Rs),l(P,nn,js),l(P,Vs,js),n(Vs,gs),n(gs,G),l(P,Ts,js),l(P,Xs,js),n(Xs,H)},p:Vn,d(P){P&&s(a),P&&s(_),P&&s(v),P&&s(d),P&&s(L),P&&s(us),P&&s(C),P&&s(X),P&&s(A),P&&s(B),P&&s(q),P&&s(V),P&&s(z),P&&s(_s),P&&s(rs),P&&s(Es),P&&s(fs),P&&s(Z),P&&s(D),P&&s(ns),P&&s(x),P&&s(g),P&&s(ms),P&&s(as),P&&s(is),P&&s(ys),P&&s(O),P&&s(ls),P&&s(Ps),P&&s(Ls),P&&s(xs),P&&s(ws),P&&s(Ss),P&&s(Hs),P&&s(Gs),P&&s(h),P&&s($s),P&&s(Fs),P&&s(As),P&&s(os),P&&s(N),P&&s(nn),P&&s(Vs),P&&s(Ts),P&&s(Xs)}}}function lc(E){let a,r;const _=[E[0],Be];let v={$$slots:{default:[pc]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Be)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Be={title:"6장 객체와 자료구조",summary:"객체지향과 절차적 프로그래밍의 근본적인 차이를 설명하고, 자료 추상화, 자료/객체 비대칭성, 디미터 법칙 등을 통해 각 접근법의 장단점을 비교합니다. 이 가이드는 변수를 비공개로 정의하는 이유, 자료 전달 객체(DTO), 활성 레코드의 사용 방식과 같은 중요한 프로그래밍 원칙을 설명하여, 코드의 구조와 유지 관리에 대한 이해를 돕습니다. 프로그래머가 시스템을 어떻게 구현할지 결정할 때, 객체지향적 접근이나 절차적 접근 중 어느 것이 더 적합한지 판단하는 데 필요한 지식을 제공합니다.",date:"2024-01-20",published:!1};function oc(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let uc=class extends Hn{constructor(a){super(),jn(this,a,oc,lc,Rn,{})}};const cc=Object.freeze(Object.defineProperty({__proto__:null,default:uc,metadata:Be},Symbol.toStringTag,{value:"Module"}));function rc(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys=`<code class="language-java"><span class="token class-name">LocalPort</span> port <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    port<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PortDeviceFailure</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reportPortError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Device error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">GMXError</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reportError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"GMX error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">reportError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Response error"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,O,ks,bs=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalPort</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">ACMEPort</span> innerPort<span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token keyword">int</span> portNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		innerPort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ACMEPort</span><span class="token punctuation">(</span>portNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ATM1212UnlockedExcpetion</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,j,vs,ls,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs,Fs,As,Ys,Ws,os,N,Rs,nn,Vs,gs,G,Ts,Xs;return{c(){a=e("p"),r=u("깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),_=i(),v=e("h3"),t=e("a"),k=u("오류 코드보다 예외를 사용하라"),d=i(),L=e("p"),M=u("과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),us=i(),C=e("h3"),I=e("a"),es=u("Try-Catch-Finally 문부터 작성하라"),X=i(),A=e("p"),Q=u("예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),B=i(),q=e("p"),ps=u("강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),V=i(),z=e("h3"),K=e("a"),_s=u("미확인 예외를 사용하라"),rs=i(),ss=e("p"),Es=u("확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),fs=i(),Y=e("h3"),ts=e("a"),Z=u("예외에 의미를 제공하라"),D=i(),F=e("p"),ns=u("예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),x=i(),b=e("h3"),g=e("a"),ms=u("호출자를 고려해 예외 클래스를 정의하라"),hs=i(),ds=e("p"),as=u("오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),is=i(),S=e("pre"),O=i(),ks=e("pre"),j=i(),vs=e("p"),ls=u("위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),Ps=i(),Is=e("h3"),Ls=e("a"),xs=u("정상 흐름을 정의하라"),W=i(),ws=e("p"),Ss=u("앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다. 특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다."),Ms=i(),Ns=e("h3"),Hs=e("a"),Gs=u("null을 반환하지 마라"),w=i(),h=e("p"),$s=u("null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),Zs=i(),Fs=e("h3"),As=e("a"),Ys=u("null을 전달하지 마라"),Ws=i(),os=e("p"),N=u("NullpointException을 야기하는 코드는 만들지 말자"),Rs=i(),nn=e("h3"),Vs=e("a"),gs=u("결론"),G=i(),Ts=e("p"),Xs=u("깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),this.h()},l(H){a=p(H,"P",{});var P=o(a);r=c(P,"깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),P.forEach(s),_=f(H),v=p(H,"H3",{id:!0});var js=o(v);t=p(js,"A",{href:!0});var sn=o(t);k=c(sn,"오류 코드보다 예외를 사용하라"),sn.forEach(s),js.forEach(s),d=f(H),L=p(H,"P",{});var qs=o(L);M=c(qs,"과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),qs.forEach(s),us=f(H),C=p(H,"H3",{id:!0});var cs=o(C);I=p(cs,"A",{href:!0});var Us=o(I);es=c(Us,"Try-Catch-Finally 문부터 작성하라"),Us.forEach(s),cs.forEach(s),X=f(H),A=p(H,"P",{});var an=o(A);Q=c(an,"예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),an.forEach(s),B=f(H),q=p(H,"P",{});var ln=o(q);ps=c(ln,"강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),ln.forEach(s),V=f(H),z=p(H,"H3",{id:!0});var fn=o(z);K=p(fn,"A",{href:!0});var un=o(K);_s=c(un,"미확인 예외를 사용하라"),un.forEach(s),fn.forEach(s),rs=f(H),ss=p(H,"P",{});var pn=o(ss);Es=c(pn,"확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),pn.forEach(s),fs=f(H),Y=p(H,"H3",{id:!0});var kn=o(Y);ts=p(kn,"A",{href:!0});var on=o(ts);Z=c(on,"예외에 의미를 제공하라"),on.forEach(s),kn.forEach(s),D=f(H),F=p(H,"P",{});var En=o(F);ns=c(En,"예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),En.forEach(s),x=f(H),b=p(H,"H3",{id:!0});var dn=o(b);g=p(dn,"A",{href:!0});var mn=o(g);ms=c(mn,"호출자를 고려해 예외 클래스를 정의하라"),mn.forEach(s),dn.forEach(s),hs=f(H),ds=p(H,"P",{});var en=o(ds);as=c(en,"오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),en.forEach(s),is=f(H),S=p(H,"PRE",{class:!0});var hn=o(S);hn.forEach(s),O=f(H),ks=p(H,"PRE",{class:!0});var rn=o(ks);rn.forEach(s),j=f(H),vs=p(H,"P",{});var Ln=o(vs);ls=c(Ln,"위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),Ln.forEach(s),Ps=f(H),Is=p(H,"H3",{id:!0});var Pn=o(Is);Ls=p(Pn,"A",{href:!0});var wn=o(Ls);xs=c(wn,"정상 흐름을 정의하라"),wn.forEach(s),Pn.forEach(s),W=f(H),ws=p(H,"P",{});var cn=o(ws);Ss=c(cn,"앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다. 특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다."),cn.forEach(s),Ms=f(H),Ns=p(H,"H3",{id:!0});var yn=o(Ns);Hs=p(yn,"A",{href:!0});var Jn=o(Hs);Gs=c(Jn,"null을 반환하지 마라"),Jn.forEach(s),yn.forEach(s),w=f(H),h=p(H,"P",{});var vn=o(h);$s=c(vn,"null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),vn.forEach(s),Zs=f(H),Fs=p(H,"H3",{id:!0});var _n=o(Fs);As=p(_n,"A",{href:!0});var bn=o(As);Ys=c(bn,"null을 전달하지 마라"),bn.forEach(s),_n.forEach(s),Ws=f(H),os=p(H,"P",{});var Un=o(os);N=c(Un,"NullpointException을 야기하는 코드는 만들지 말자"),Un.forEach(s),Rs=f(H),nn=p(H,"H3",{id:!0});var Mn=o(nn);Vs=p(Mn,"A",{href:!0});var Sn=o(Vs);gs=c(Sn,"결론"),Sn.forEach(s),Mn.forEach(s),G=f(H),Ts=p(H,"P",{});var An=o(Ts);Xs=c(An,"깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),An.forEach(s),this.h()},h(){m(t,"href","#오류-코드보다-예외를-사용하라"),m(v,"id","오류-코드보다-예외를-사용하라"),m(I,"href","#try-catch-finally-문부터-작성하라"),m(C,"id","try-catch-finally-문부터-작성하라"),m(K,"href","#미확인-예외를-사용하라"),m(z,"id","미확인-예외를-사용하라"),m(ts,"href","#예외에-의미를-제공하라"),m(Y,"id","예외에-의미를-제공하라"),m(g,"href","#호출자를-고려해-예외-클래스를-정의하라"),m(b,"id","호출자를-고려해-예외-클래스를-정의하라"),m(S,"class","language-java"),m(ks,"class","language-java"),m(Ls,"href","#정상-흐름을-정의하라"),m(Is,"id","정상-흐름을-정의하라"),m(Hs,"href","#null을-반환하지-마라"),m(Ns,"id","null을-반환하지-마라"),m(As,"href","#null을-전달하지-마라"),m(Fs,"id","null을-전달하지-마라"),m(Vs,"href","#결론"),m(nn,"id","결론")},m(H,P){l(H,a,P),n(a,r),l(H,_,P),l(H,v,P),n(v,t),n(t,k),l(H,d,P),l(H,L,P),n(L,M),l(H,us,P),l(H,C,P),n(C,I),n(I,es),l(H,X,P),l(H,A,P),n(A,Q),l(H,B,P),l(H,q,P),n(q,ps),l(H,V,P),l(H,z,P),n(z,K),n(K,_s),l(H,rs,P),l(H,ss,P),n(ss,Es),l(H,fs,P),l(H,Y,P),n(Y,ts),n(ts,Z),l(H,D,P),l(H,F,P),n(F,ns),l(H,x,P),l(H,b,P),n(b,g),n(g,ms),l(H,hs,P),l(H,ds,P),n(ds,as),l(H,is,P),l(H,S,P),S.innerHTML=ys,l(H,O,P),l(H,ks,P),ks.innerHTML=bs,l(H,j,P),l(H,vs,P),n(vs,ls),l(H,Ps,P),l(H,Is,P),n(Is,Ls),n(Ls,xs),l(H,W,P),l(H,ws,P),n(ws,Ss),l(H,Ms,P),l(H,Ns,P),n(Ns,Hs),n(Hs,Gs),l(H,w,P),l(H,h,P),n(h,$s),l(H,Zs,P),l(H,Fs,P),n(Fs,As),n(As,Ys),l(H,Ws,P),l(H,os,P),n(os,N),l(H,Rs,P),l(H,nn,P),n(nn,Vs),n(Vs,gs),l(H,G,P),l(H,Ts,P),n(Ts,Xs)},p:Vn,d(H){H&&s(a),H&&s(_),H&&s(v),H&&s(d),H&&s(L),H&&s(us),H&&s(C),H&&s(X),H&&s(A),H&&s(B),H&&s(q),H&&s(V),H&&s(z),H&&s(rs),H&&s(ss),H&&s(fs),H&&s(Y),H&&s(D),H&&s(F),H&&s(x),H&&s(b),H&&s(hs),H&&s(ds),H&&s(is),H&&s(S),H&&s(O),H&&s(ks),H&&s(j),H&&s(vs),H&&s(Ps),H&&s(Is),H&&s(W),H&&s(ws),H&&s(Ms),H&&s(Ns),H&&s(w),H&&s(h),H&&s(Zs),H&&s(Fs),H&&s(Ws),H&&s(os),H&&s(Rs),H&&s(nn),H&&s(G),H&&s(Ts)}}}function ic(E){let a,r;const _=[E[0],Fe];let v={$$slots:{default:[rc]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Fe)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Fe={title:"7장 오류처리",summary:"깨끗한 코드 작성과 효율적인 오류 처리 방법을 설명합니다. 예외 사용의 중요성, try-catch-finally 문의 사용, 미확인 예외의 활용, 예외의 의미 부여, 예외 클래스의 정의 방법을 포함하여, 코드의 가독성과 안정성을 높이는 베스트 프랙티스를 제공합니다.",date:"2024-01-25",published:!1};function fc(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let kc=class extends Hn{constructor(a){super(),jn(this,a,fc,ic,Rn,{})}};const _c=Object.freeze(Object.defineProperty({__proto__:null,default:kc,metadata:Fe},Symbol.toStringTag,{value:"Module"}));function mc(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps=`<code class="language-java">  	<span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogAddAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConsoleAppender</span> appender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span>appender<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogAddAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ConsoleAppender</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getRootLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BasicConfigurator</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"basicLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAppenderWithStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ConsoleAppender</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"addAppenderWithStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAppenderWithoutStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"addAppenderWithoutStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns;return{c(){a=e("h3"),r=e("a"),_=u("서드파티 코드 사용하기"),v=i(),t=e("p"),k=u("인터페이스를 “제공하는” 입장과 “사용하는” 입장 사이에는 필연적인 긴장감이 존재한다. 사용하는 입장에서 인터페이스의 변경을 우려한다면 래핑하는것도 하나의 방법이다."),d=i(),L=e("h3"),M=e("a"),us=u("경계를 탐험하고 공부하기"),C=i(),I=e("p"),es=u("서드파티 코드를 사용할때 우리는 사용할 코드에 대해 테스트할 필요가 있다."),X=i(),A=e("p"),Q=u("log4j의 예"),B=i(),q=e("pre"),V=i(),z=e("h3"),K=e("a"),_s=u("아직 존재하지 않는 코드 사용하기"),rs=i(),ss=e("p"),Es=u("아직 개발되지 않은 모듈이 필요한데, 인터페이스를 정의하면 분업이 가능하다. 인터페이스를 정의 함으로써 메인로직을 더 깔끔하게 짤 수 있다."),fs=i(),Y=e("h3"),ts=e("a"),Z=u("Clean한 경계"),D=i(),F=e("p"),ns=u("좋은 소프트웨어는 변경에 유연하게 대처해야 한다. 내부 코드가 서드파티에 영향을 줄수 없게 래핑하듯 변경에 유연하게 대처할수 있는 경계를 만들어야 한다."),this.h()},l(x){a=p(x,"H3",{id:!0});var b=o(a);r=p(b,"A",{href:!0});var g=o(r);_=c(g,"서드파티 코드 사용하기"),g.forEach(s),b.forEach(s),v=f(x),t=p(x,"P",{});var ms=o(t);k=c(ms,"인터페이스를 “제공하는” 입장과 “사용하는” 입장 사이에는 필연적인 긴장감이 존재한다. 사용하는 입장에서 인터페이스의 변경을 우려한다면 래핑하는것도 하나의 방법이다."),ms.forEach(s),d=f(x),L=p(x,"H3",{id:!0});var hs=o(L);M=p(hs,"A",{href:!0});var ds=o(M);us=c(ds,"경계를 탐험하고 공부하기"),ds.forEach(s),hs.forEach(s),C=f(x),I=p(x,"P",{});var as=o(I);es=c(as,"서드파티 코드를 사용할때 우리는 사용할 코드에 대해 테스트할 필요가 있다."),as.forEach(s),X=f(x),A=p(x,"P",{});var is=o(A);Q=c(is,"log4j의 예"),is.forEach(s),B=f(x),q=p(x,"PRE",{class:!0});var S=o(q);S.forEach(s),V=f(x),z=p(x,"H3",{id:!0});var ys=o(z);K=p(ys,"A",{href:!0});var O=o(K);_s=c(O,"아직 존재하지 않는 코드 사용하기"),O.forEach(s),ys.forEach(s),rs=f(x),ss=p(x,"P",{});var ks=o(ss);Es=c(ks,"아직 개발되지 않은 모듈이 필요한데, 인터페이스를 정의하면 분업이 가능하다. 인터페이스를 정의 함으로써 메인로직을 더 깔끔하게 짤 수 있다."),ks.forEach(s),fs=f(x),Y=p(x,"H3",{id:!0});var bs=o(Y);ts=p(bs,"A",{href:!0});var j=o(ts);Z=c(j,"Clean한 경계"),j.forEach(s),bs.forEach(s),D=f(x),F=p(x,"P",{});var vs=o(F);ns=c(vs,"좋은 소프트웨어는 변경에 유연하게 대처해야 한다. 내부 코드가 서드파티에 영향을 줄수 없게 래핑하듯 변경에 유연하게 대처할수 있는 경계를 만들어야 한다."),vs.forEach(s),this.h()},h(){m(r,"href","#서드파티-코드-사용하기"),m(a,"id","서드파티-코드-사용하기"),m(M,"href","#경계를-탐험하고-공부하기"),m(L,"id","경계를-탐험하고-공부하기"),m(q,"class","language-java"),m(K,"href","#아직-존재하지-않는-코드-사용하기"),m(z,"id","아직-존재하지-않는-코드-사용하기"),m(ts,"href","#clean한-경계"),m(Y,"id","clean한-경계")},m(x,b){l(x,a,b),n(a,r),n(r,_),l(x,v,b),l(x,t,b),n(t,k),l(x,d,b),l(x,L,b),n(L,M),n(M,us),l(x,C,b),l(x,I,b),n(I,es),l(x,X,b),l(x,A,b),n(A,Q),l(x,B,b),l(x,q,b),q.innerHTML=ps,l(x,V,b),l(x,z,b),n(z,K),n(K,_s),l(x,rs,b),l(x,ss,b),n(ss,Es),l(x,fs,b),l(x,Y,b),n(Y,ts),n(ts,Z),l(x,D,b),l(x,F,b),n(F,ns)},p:Vn,d(x){x&&s(a),x&&s(v),x&&s(t),x&&s(d),x&&s(L),x&&s(C),x&&s(I),x&&s(X),x&&s(A),x&&s(B),x&&s(q),x&&s(V),x&&s(z),x&&s(rs),x&&s(ss),x&&s(fs),x&&s(Y),x&&s(D),x&&s(F)}}}function vc(E){let a,r;const _=[E[0],Je];let v={$$slots:{default:[mc]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(Je)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const Je={title:"8장 경계",summary:"서드파티 코드를 사용할 때 발생할 수 있는 문제를 최소화하고 유지보수성을 높이기 위한 전략을 제시합니다. 코드의 경계를 명확하게 정의하고, 테스트를 통해 외부 라이브러리와의 통합을 검증하며, 서드파티 코드와의 결합도를 낮추기 위해 인터페이스 래핑과 같은 기법을 사용하는 방법을 설명합니다.",date:"2024-02-01",published:!1};function Ec(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let dc=class extends Hn{constructor(a){super(),jn(this,a,Ec,vc,Rn,{})}};const hc=Object.freeze(Object.defineProperty({__proto__:null,default:dc,metadata:Je},Symbol.toStringTag,{value:"Module"}));function yc(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x,b,g,ms,hs,ds,as,is,S,ys,O,ks,bs,j,vs,ls=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
            <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSymbolicLinksAreNotInXmlPageHierarchy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">WikiPage</span> page <span class="token operator">=</span> <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">addLinkTo</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">,</span> <span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
            <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertResponseDoesNotContain</span><span class="token punctuation">(</span><span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetDataAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">makePageWithContent</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"test page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"type:data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertResponseContains</span><span class="token punctuation">(</span><span class="token string">"test page"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ps,Is,Ls,xs,W,ws,Ss,Ms,Ns,Hs,Gs,w,h,$s,Zs,Fs,As=`<code class="language-java">
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreashold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    hw<span class="token punctuation">.</span><span class="token function">setTemp</span><span class="token punctuation">(</span><span class="token constant">WAY_TOO_COLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    controller<span class="token punctuation">.</span><span class="token function">tic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">heaterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">blowerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">coolerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">hiTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">loTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ys,Ws,os=`<code class="language-java">
<span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">wayTooCold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"HBchL"</span><span class="token punctuation">,</span> hw<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,N,Rs,nn,Vs,gs,G,Ts=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">thenResponseShouldBeXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyHasRightTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
    <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">thenResponseShouldContain</span><span class="token punctuation">(</span>
            <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Xs,H,P,js,sn,qs,cs,Us,an,ln=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">SerialDate</span> d1 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SerialDate</span> d2 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SerialDate</span> d3 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">SerialDate</span> d4 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,fn,un,pn,kn,on,En,dn,mn,en,hn,rn,Ln,Pn,wn,cn,yn,Jn,vn,_n,bn,Un,Mn,Sn,An,Xn,$n,zn,gn,Bn,Fn,sa,J,Js,In,ta,xn,qn,T,Ds,ra,ka,_a,ma,Aa,ya,pa,Ia,va,oa,na,ia,ea,ua,Ea,Zn,Ta,Pa,Kn,ca,da,R,zs,ja,wa,la;return{c(){a=e("p"),r=u("코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),_=i(),v=e("h3"),t=e("a"),k=u("The Three Laws of TDD"),d=i(),L=e("ol"),M=e("li"),us=u("실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),C=i(),I=e("li"),es=u("컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),X=i(),A=e("li"),Q=u("현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),B=i(),q=e("p"),ps=u("위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),V=i(),z=e("h3"),K=e("a"),_s=u("깨끗한 테스트 코드 유지하기"),rs=i(),ss=e("p"),Es=u(`테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것.
테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다.
`),fs=e("strong"),Y=u("코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),ts=u(`
테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다.
테스트가 지저분하면 실제 코드도 망가진다`),Z=i(),D=e("h3"),F=e("a"),ns=u("깨끗한 테스트 코드"),x=i(),b=e("p"),g=u("깨끗한 코드를 만드려면 "),ms=e("strong"),hs=u("가독성"),ds=u(" 이 필요하다"),as=i(),is=e("h4"),S=e("a"),ys=u("BUILD-OPERATE-CHECK 패턴"),O=i(),ks=e("p"),bs=u("테스트 자료 만들기, 자료 조작, 결과 확인의 세단계로 나누자"),j=i(),vs=e("pre"),Ps=i(),Is=e("h3"),Ls=e("a"),xs=u("도메인에 특화된 테스트 언어"),W=i(),ws=e("p"),Ss=u("시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),Ms=i(),Ns=e("h3"),Hs=e("a"),Gs=u("이중 표준"),w=i(),h=e("p"),$s=u("테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),Zs=i(),Fs=e("pre"),Ys=i(),Ws=e("pre"),N=i(),Rs=e("h3"),nn=e("a"),Vs=u("테스트 당 assert 하나"),gs=i(),G=e("pre"),Xs=i(),H=e("p"),P=u("위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다. 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),js=i(),sn=e("h3"),qs=e("a"),cs=u("테스트당 개념 하나"),Us=i(),an=e("pre"),fn=i(),un=e("h4"),pn=e("a"),kn=u("위 테스트가 내포하는 의미"),on=i(),En=e("p"),dn=u("(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),mn=i(),en=e("ul"),hn=e("li"),rn=u("(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),Ln=i(),Pn=e("li"),wn=u("두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),cn=i(),yn=e("p"),Jn=u("(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),vn=i(),_n=e("ul"),bn=e("li"),Un=u("31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),Mn=i(),Sn=e("p"),An=u("이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),Xn=i(),$n=e("h3"),zn=e("a"),gn=e("strong"),Bn=u("F.I.R.S.T"),Fn=i(),sa=e("p"),J=u("테스트는 아래 5가지 요소를 충족해야 한다"),Js=i(),In=e("ol"),ta=e("li"),xn=e("strong"),qn=u("빠르게(Fast)"),T=u(" 테스트는 빨라야 한다. 느리면 자주 돌리지 않게 된다. 느린 테스트는 개발자들의 생산성을 떨어뜨린다."),Ds=i(),ra=e("li"),ka=e("strong"),_a=u("독립적으로(Independent)"),ma=u(" 테스트간 의존관계가 있으면 안된다 테스트가 서로 의존하면 한 테스트가 실패하면 다른 테스트도 실패하게 된다."),Aa=i(),ya=e("li"),pa=e("strong"),Ia=u("반복가능하게(Repeatable)"),va=u(" 환경에 구애받지 않는 테스트를 작성하자 환경에 따라 테스트가 실패하면 안된다"),oa=i(),na=e("li"),ia=e("strong"),ea=u("자가검증하는(Self-Validating)"),ua=u(" 테스트가 스스로 bool로 결론나야 한다 테스트가 성공하면 테스트가 실패하면 테스트가 실패하게 만든 문제를 찾아야 한다."),Ea=i(),Zn=e("li"),Ta=e("strong"),Pa=u("적시에(Timely)"),Kn=u(": 테스트 코드를 만들고 운영코드를 작성하라."),ca=i(),da=e("h3"),R=e("a"),zs=u("결론"),ja=i(),wa=e("p"),la=u("깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다. 지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),this.h()},l($){a=p($,"P",{});var Bs=o(a);r=c(Bs,"코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),Bs.forEach(s),_=f($),v=p($,"H3",{id:!0});var Ra=o(v);t=p(Ra,"A",{href:!0});var Ma=o(t);k=c(Ma,"The Three Laws of TDD"),Ma.forEach(s),Ra.forEach(s),d=f($),L=p($,"OL",{});var ba=o(L);M=p(ba,"LI",{});var ha=o(M);us=c(ha,"실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),ha.forEach(s),C=f(ba),I=p(ba,"LI",{});var Oa=o(I);es=c(Oa,"컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),Oa.forEach(s),X=f(ba),A=p(ba,"LI",{});var Da=o(A);Q=c(Da,"현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),Da.forEach(s),ba.forEach(s),B=f($),q=p($,"P",{});var aa=o(q);ps=c(aa,"위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),aa.forEach(s),V=f($),z=p($,"H3",{id:!0});var $a=o(z);K=p($a,"A",{href:!0});var Ua=o(K);_s=c(Ua,"깨끗한 테스트 코드 유지하기"),Ua.forEach(s),$a.forEach(s),rs=f($),ss=p($,"P",{});var La=o(ss);Es=c(La,`테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것.
테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다.
`),fs=p(La,"STRONG",{});var Sa=o(fs);Y=c(Sa,"코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),Sa.forEach(s),ts=c(La,`
테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다.
테스트가 지저분하면 실제 코드도 망가진다`),La.forEach(s),Z=f($),D=p($,"H3",{id:!0});var Ba=o(D);F=p(Ba,"A",{href:!0});var Ca=o(F);ns=c(Ca,"깨끗한 테스트 코드"),Ca.forEach(s),Ba.forEach(s),x=f($),b=p($,"P",{});var fa=o(b);g=c(fa,"깨끗한 코드를 만드려면 "),ms=p(fa,"STRONG",{});var Na=o(ms);hs=c(Na,"가독성"),Na.forEach(s),ds=c(fa," 이 필요하다"),fa.forEach(s),as=f($),is=p($,"H4",{id:!0});var Fa=o(is);S=p(Fa,"A",{href:!0});var xa=o(S);ys=c(xa,"BUILD-OPERATE-CHECK 패턴"),xa.forEach(s),Fa.forEach(s),O=f($),ks=p($,"P",{});var Qn=o(ks);bs=c(Qn,"테스트 자료 만들기, 자료 조작, 결과 확인의 세단계로 나누자"),Qn.forEach(s),j=f($),vs=p($,"PRE",{class:!0});var y=o(vs);y.forEach(s),Ps=f($),Is=p($,"H3",{id:!0});var Cs=o(Is);Ls=p(Cs,"A",{href:!0});var Qa=o(Ls);xs=c(Qa,"도메인에 특화된 테스트 언어"),Qa.forEach(s),Cs.forEach(s),W=f($),ws=p($,"P",{});var Ga=o(ws);Ss=c(Ga,"시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),Ga.forEach(s),Ms=f($),Ns=p($,"H3",{id:!0});var Za=o(Ns);Hs=p(Za,"A",{href:!0});var Ja=o(Hs);Gs=c(Ja,"이중 표준"),Ja.forEach(s),Za.forEach(s),w=f($),h=p($,"P",{});var Wa=o(h);$s=c(Wa,"테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),Wa.forEach(s),Zs=f($),Fs=p($,"PRE",{class:!0});var Pt=o(Fs);Pt.forEach(s),Ys=f($),Ws=p($,"PRE",{class:!0});var kt=o(Ws);kt.forEach(s),N=f($),Rs=p($,"H3",{id:!0});var at=o(Rs);nn=p(at,"A",{href:!0});var wt=o(nn);Vs=c(wt,"테스트 당 assert 하나"),wt.forEach(s),at.forEach(s),gs=f($),G=p($,"PRE",{class:!0});var ga=o(G);ga.forEach(s),Xs=f($),H=p($,"P",{});var tt=o(H);P=c(tt,"위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다. 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),tt.forEach(s),js=f($),sn=p($,"H3",{id:!0});var _t=o(sn);qs=p(_t,"A",{href:!0});var Va=o(qs);cs=c(Va,"테스트당 개념 하나"),Va.forEach(s),_t.forEach(s),Us=f($),an=p($,"PRE",{class:!0});var Xa=o(an);Xa.forEach(s),fn=f($),un=p($,"H4",{id:!0});var mt=o(un);pn=p(mt,"A",{href:!0});var Ya=o(pn);kn=c(Ya,"위 테스트가 내포하는 의미"),Ya.forEach(s),mt.forEach(s),on=f($),En=p($,"P",{});var et=o(En);dn=c(et,"(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),et.forEach(s),mn=f($),en=p($,"UL",{});var pt=o(en);hn=p(pt,"LI",{});var vt=o(hn);rn=c(vt,"(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),vt.forEach(s),Ln=f(pt),Pn=p(pt,"LI",{});var st=o(Pn);wn=c(st,"두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),st.forEach(s),pt.forEach(s),cn=f($),yn=p($,"P",{});var Et=o(yn);Jn=c(Et,"(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),Et.forEach(s),vn=f($),_n=p($,"UL",{});var rt=o(_n);bn=p(rt,"LI",{});var Ka=o(bn);Un=c(Ka,"31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),Ka.forEach(s),rt.forEach(s),Mn=f($),Sn=p($,"P",{});var dt=o(Sn);An=c(dt,"이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),dt.forEach(s),Xn=f($),$n=p($,"H3",{id:!0});var bt=o($n);zn=p(bt,"A",{href:!0});var za=o(zn);gn=p(za,"STRONG",{});var ht=o(gn);Bn=c(ht,"F.I.R.S.T"),ht.forEach(s),za.forEach(s),bt.forEach(s),Fn=f($),sa=p($,"P",{});var qa=o(sa);J=c(qa,"테스트는 아래 5가지 요소를 충족해야 한다"),qa.forEach(s),Js=f($),In=p($,"OL",{});var Ha=o(In);ta=p(Ha,"LI",{});var it=o(ta);xn=p(it,"STRONG",{});var yt=o(xn);qn=c(yt,"빠르게(Fast)"),yt.forEach(s),T=c(it," 테스트는 빨라야 한다. 느리면 자주 돌리지 않게 된다. 느린 테스트는 개발자들의 생산성을 떨어뜨린다."),it.forEach(s),Ds=f(Ha),ra=p(Ha,"LI",{});var lt=o(ra);ka=p(lt,"STRONG",{});var ot=o(ka);_a=c(ot,"독립적으로(Independent)"),ot.forEach(s),ma=c(lt," 테스트간 의존관계가 있으면 안된다 테스트가 서로 의존하면 한 테스트가 실패하면 다른 테스트도 실패하게 된다."),lt.forEach(s),Aa=f(Ha),ya=p(Ha,"LI",{});var ft=o(ya);pa=p(ft,"STRONG",{});var nt=o(pa);Ia=c(nt,"반복가능하게(Repeatable)"),nt.forEach(s),va=c(ft," 환경에 구애받지 않는 테스트를 작성하자 환경에 따라 테스트가 실패하면 안된다"),ft.forEach(s),oa=f(Ha),na=p(Ha,"LI",{});var Tt=o(na);ia=p(Tt,"STRONG",{});var U=o(ia);ea=c(U,"자가검증하는(Self-Validating)"),U.forEach(s),ua=c(Tt," 테스트가 스스로 bool로 결론나야 한다 테스트가 성공하면 테스트가 실패하면 테스트가 실패하게 만든 문제를 찾아야 한다."),Tt.forEach(s),Ea=f(Ha),Zn=p(Ha,"LI",{});var tn=o(Zn);Ta=p(tn,"STRONG",{});var It=o(Ta);Pa=c(It,"적시에(Timely)"),It.forEach(s),Kn=c(tn,": 테스트 코드를 만들고 운영코드를 작성하라."),tn.forEach(s),Ha.forEach(s),ca=f($),da=p($,"H3",{id:!0});var Ct=o(da);R=p(Ct,"A",{href:!0});var xt=o(R);zs=c(xt,"결론"),xt.forEach(s),Ct.forEach(s),ja=f($),wa=p($,"P",{});var Ht=o(wa);la=c(Ht,"깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다. 지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),Ht.forEach(s),this.h()},h(){m(t,"href","#the-three-laws-of-tdd"),m(v,"id","the-three-laws-of-tdd"),m(K,"href","#깨끗한-테스트-코드-유지하기"),m(z,"id","깨끗한-테스트-코드-유지하기"),m(F,"href","#깨끗한-테스트-코드"),m(D,"id","깨끗한-테스트-코드"),m(S,"href","#build-operate-check-패턴"),m(is,"id","build-operate-check-패턴"),m(vs,"class","language-java"),m(Ls,"href","#도메인에-특화된-테스트-언어"),m(Is,"id","도메인에-특화된-테스트-언어"),m(Hs,"href","#이중-표준"),m(Ns,"id","이중-표준"),m(Fs,"class","language-java"),m(Ws,"class","language-java"),m(nn,"href","#테스트-당-assert-하나"),m(Rs,"id","테스트-당-assert-하나"),m(G,"class","language-java"),m(qs,"href","#테스트당-개념-하나"),m(sn,"id","테스트당-개념-하나"),m(an,"class","language-java"),m(pn,"href","#위-테스트가-내포하는-의미"),m(un,"id","위-테스트가-내포하는-의미"),m(zn,"href","#first"),m($n,"id","first"),m(R,"href","#결론"),m(da,"id","결론")},m($,Bs){l($,a,Bs),n(a,r),l($,_,Bs),l($,v,Bs),n(v,t),n(t,k),l($,d,Bs),l($,L,Bs),n(L,M),n(M,us),n(L,C),n(L,I),n(I,es),n(L,X),n(L,A),n(A,Q),l($,B,Bs),l($,q,Bs),n(q,ps),l($,V,Bs),l($,z,Bs),n(z,K),n(K,_s),l($,rs,Bs),l($,ss,Bs),n(ss,Es),n(ss,fs),n(fs,Y),n(ss,ts),l($,Z,Bs),l($,D,Bs),n(D,F),n(F,ns),l($,x,Bs),l($,b,Bs),n(b,g),n(b,ms),n(ms,hs),n(b,ds),l($,as,Bs),l($,is,Bs),n(is,S),n(S,ys),l($,O,Bs),l($,ks,Bs),n(ks,bs),l($,j,Bs),l($,vs,Bs),vs.innerHTML=ls,l($,Ps,Bs),l($,Is,Bs),n(Is,Ls),n(Ls,xs),l($,W,Bs),l($,ws,Bs),n(ws,Ss),l($,Ms,Bs),l($,Ns,Bs),n(Ns,Hs),n(Hs,Gs),l($,w,Bs),l($,h,Bs),n(h,$s),l($,Zs,Bs),l($,Fs,Bs),Fs.innerHTML=As,l($,Ys,Bs),l($,Ws,Bs),Ws.innerHTML=os,l($,N,Bs),l($,Rs,Bs),n(Rs,nn),n(nn,Vs),l($,gs,Bs),l($,G,Bs),G.innerHTML=Ts,l($,Xs,Bs),l($,H,Bs),n(H,P),l($,js,Bs),l($,sn,Bs),n(sn,qs),n(qs,cs),l($,Us,Bs),l($,an,Bs),an.innerHTML=ln,l($,fn,Bs),l($,un,Bs),n(un,pn),n(pn,kn),l($,on,Bs),l($,En,Bs),n(En,dn),l($,mn,Bs),l($,en,Bs),n(en,hn),n(hn,rn),n(en,Ln),n(en,Pn),n(Pn,wn),l($,cn,Bs),l($,yn,Bs),n(yn,Jn),l($,vn,Bs),l($,_n,Bs),n(_n,bn),n(bn,Un),l($,Mn,Bs),l($,Sn,Bs),n(Sn,An),l($,Xn,Bs),l($,$n,Bs),n($n,zn),n(zn,gn),n(gn,Bn),l($,Fn,Bs),l($,sa,Bs),n(sa,J),l($,Js,Bs),l($,In,Bs),n(In,ta),n(ta,xn),n(xn,qn),n(ta,T),n(In,Ds),n(In,ra),n(ra,ka),n(ka,_a),n(ra,ma),n(In,Aa),n(In,ya),n(ya,pa),n(pa,Ia),n(ya,va),n(In,oa),n(In,na),n(na,ia),n(ia,ea),n(na,ua),n(In,Ea),n(In,Zn),n(Zn,Ta),n(Ta,Pa),n(Zn,Kn),l($,ca,Bs),l($,da,Bs),n(da,R),n(R,zs),l($,ja,Bs),l($,wa,Bs),n(wa,la)},p:Vn,d($){$&&s(a),$&&s(_),$&&s(v),$&&s(d),$&&s(L),$&&s(B),$&&s(q),$&&s(V),$&&s(z),$&&s(rs),$&&s(ss),$&&s(Z),$&&s(D),$&&s(x),$&&s(b),$&&s(as),$&&s(is),$&&s(O),$&&s(ks),$&&s(j),$&&s(vs),$&&s(Ps),$&&s(Is),$&&s(W),$&&s(ws),$&&s(Ms),$&&s(Ns),$&&s(w),$&&s(h),$&&s(Zs),$&&s(Fs),$&&s(Ys),$&&s(Ws),$&&s(N),$&&s(Rs),$&&s(gs),$&&s(G),$&&s(Xs),$&&s(H),$&&s(js),$&&s(sn),$&&s(Us),$&&s(an),$&&s(fn),$&&s(un),$&&s(on),$&&s(En),$&&s(mn),$&&s(en),$&&s(cn),$&&s(yn),$&&s(vn),$&&s(_n),$&&s(Mn),$&&s(Sn),$&&s(Xn),$&&s($n),$&&s(Fn),$&&s(sa),$&&s(Js),$&&s(In),$&&s(ca),$&&s(da),$&&s(ja),$&&s(wa)}}}function Pc(E){let a,r;const _=[E[0],ze];let v={$$slots:{default:[yc]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(ze)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const ze={title:"9장 유닛 테스트",summary:"테스트 주도 개발(TDD)의 원칙을 바탕으로, 개발자들이 효과적으로 자동화된 유닛 테스트를 만들 수 있는 방법을 제공합니다. TDD의 세 가지 법칙을 포함하여, 테스트 코드를 깨끗하고 유지보수가 가능하게 유지하는 방법, 도메인에 특화된 테스트 언어의 사용, 그리고 테스트가 지켜야 할 F.I.R.S.T 원칙을 설명하여, 테스트 코드가 실제 코드만큼 중요하며 그에 따라 질 높은 소프트웨어 개발을 돕는 중요한 요소임을 강조합니다.",date:"2024-02-05",published:!1};function wc(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}let bc=class extends Hn{constructor(a){super(),jn(this,a,wc,Pc,Rn,{})}};const $c=Object.freeze(Object.defineProperty({__proto__:null,default:bc,metadata:ze},Symbol.toStringTag,{value:"Module"}));function Lc(E){let a,r,_,v,t,k,d,L,M,us,C,I,es,X,A,Q,B,q,ps,V,z,K,_s,rs,ss,Es,fs,Y,ts,Z,D,F,ns,x;return{c(){a=e("h2"),r=e("a"),_=u("노마드 코더 후기"),v=i(),t=e("p"),k=u(`새해도 밝았고 올해 시작을 알리는 챌린지로 클린코드를 도전했다.
아직 10장 이후에 정리 하고자 하는 마음이 있지만, 일단 3주 챌린지의 후기를 남겨보려고 한다.`),d=i(),L=e("p"),M=u(`2~3년 전쯤에 클린코드 챌린지를 도전했다가. 장수를 넘어갈수록 피부에 와닿는 내용도 점점 줄어가고 나태함에 도중에 접었지만.
이번 챌린지는 클린코드를 다시 읽고 정리하면서, 내가 얼마나 많은 부분을 놓치고 있었는지 깨달았다.`),us=i(),C=e("h3"),I=e("a"),es=u("코드를 쓰는 것은 쉽다. 하지만 좋은 코드를 쓰는 것은 어렵다."),X=i(),A=e("ol"),Q=e("li"),B=u("모든 코드는 작성자의 의도를 명확히 표현해야 한다."),q=i(),ps=e("li"),V=u("코드는 누구나 쉽게 읽고 이해할 수 있어야 한다."),z=i(),K=e("p"),_s=u(`상기 시키다 보면서, 내가 작성한 코드를 다시 읽어보니, 생각보다 많은 부분에서 미흡함을 느꼈다.
책에서 언급한 원칙들을 복기하다 보니 두가지 명제를 지키는데 더 많은 원칙들이 필요하다고 생각된다.`),rs=i(),ss=e("h3"),Es=e("a"),fs=u("꾸준히 읽고, 쓰고, 고치고, 반복하자."),Y=i(),ts=e("p"),Z=u(`개발을 시작하고 점점 주니어 딱지가 떼어지기 시작하는데, 앎에 대한 척도는 아직 형편없다고 생각한다.
개발 관련 패러다임을 이제서라도 깨닫고, 더 나은 코드를 작성하기 위해 노력해야겠다.`),D=i(),F=e("p"),ns=e("img"),this.h()},l(b){a=p(b,"H2",{id:!0});var g=o(a);r=p(g,"A",{href:!0});var ms=o(r);_=c(ms,"노마드 코더 후기"),ms.forEach(s),g.forEach(s),v=f(b),t=p(b,"P",{});var hs=o(t);k=c(hs,`새해도 밝았고 올해 시작을 알리는 챌린지로 클린코드를 도전했다.
아직 10장 이후에 정리 하고자 하는 마음이 있지만, 일단 3주 챌린지의 후기를 남겨보려고 한다.`),hs.forEach(s),d=f(b),L=p(b,"P",{});var ds=o(L);M=c(ds,`2~3년 전쯤에 클린코드 챌린지를 도전했다가. 장수를 넘어갈수록 피부에 와닿는 내용도 점점 줄어가고 나태함에 도중에 접었지만.
이번 챌린지는 클린코드를 다시 읽고 정리하면서, 내가 얼마나 많은 부분을 놓치고 있었는지 깨달았다.`),ds.forEach(s),us=f(b),C=p(b,"H3",{id:!0});var as=o(C);I=p(as,"A",{href:!0});var is=o(I);es=c(is,"코드를 쓰는 것은 쉽다. 하지만 좋은 코드를 쓰는 것은 어렵다."),is.forEach(s),as.forEach(s),X=f(b),A=p(b,"OL",{});var S=o(A);Q=p(S,"LI",{});var ys=o(Q);B=c(ys,"모든 코드는 작성자의 의도를 명확히 표현해야 한다."),ys.forEach(s),q=f(S),ps=p(S,"LI",{});var O=o(ps);V=c(O,"코드는 누구나 쉽게 읽고 이해할 수 있어야 한다."),O.forEach(s),S.forEach(s),z=f(b),K=p(b,"P",{});var ks=o(K);_s=c(ks,`상기 시키다 보면서, 내가 작성한 코드를 다시 읽어보니, 생각보다 많은 부분에서 미흡함을 느꼈다.
책에서 언급한 원칙들을 복기하다 보니 두가지 명제를 지키는데 더 많은 원칙들이 필요하다고 생각된다.`),ks.forEach(s),rs=f(b),ss=p(b,"H3",{id:!0});var bs=o(ss);Es=p(bs,"A",{href:!0});var j=o(Es);fs=c(j,"꾸준히 읽고, 쓰고, 고치고, 반복하자."),j.forEach(s),bs.forEach(s),Y=f(b),ts=p(b,"P",{});var vs=o(ts);Z=c(vs,`개발을 시작하고 점점 주니어 딱지가 떼어지기 시작하는데, 앎에 대한 척도는 아직 형편없다고 생각한다.
개발 관련 패러다임을 이제서라도 깨닫고, 더 나은 코드를 작성하기 위해 노력해야겠다.`),vs.forEach(s),D=f(b),F=p(b,"P",{});var ls=o(F);ns=p(ls,"IMG",{src:!0,alt:!0}),ls.forEach(s),this.h()},h(){m(r,"href","#노마드-코더-후기"),m(a,"id","노마드-코더-후기"),m(I,"href","#코드를-쓰는-것은-쉽다-하지만-좋은-코드를-쓰는-것은-어렵다"),m(C,"id","코드를-쓰는-것은-쉽다-하지만-좋은-코드를-쓰는-것은-어렵다"),m(Es,"href","#꾸준히-읽고-쓰고-고치고-반복하자"),m(ss,"id","꾸준히-읽고-쓰고-고치고-반복하자"),Qp(ns.src,x="/imgs/nomad_complete.png")||m(ns,"src",x),m(ns,"alt","img.png")},m(b,g){l(b,a,g),n(a,r),n(r,_),l(b,v,g),l(b,t,g),n(t,k),l(b,d,g),l(b,L,g),n(L,M),l(b,us,g),l(b,C,g),n(C,I),n(I,es),l(b,X,g),l(b,A,g),n(A,Q),n(Q,B),n(A,q),n(A,ps),n(ps,V),l(b,z,g),l(b,K,g),n(K,_s),l(b,rs,g),l(b,ss,g),n(ss,Es),n(Es,fs),l(b,Y,g),l(b,ts,g),n(ts,Z),l(b,D,g),l(b,F,g),n(F,ns)},p:Vn,d(b){b&&s(a),b&&s(v),b&&s(t),b&&s(d),b&&s(L),b&&s(us),b&&s(C),b&&s(X),b&&s(A),b&&s(z),b&&s(K),b&&s(rs),b&&s(ss),b&&s(Y),b&&s(ts),b&&s(D),b&&s(F)}}}function Sc(E){let a,r;const _=[E[0],qe];let v={$$slots:{default:[Lc]},$$scope:{ctx:E}};for(let t=0;t<_.length;t+=1)v=Os(v,_[t]);return a=new Wn({props:v}),{c(){Cn(a.$$.fragment)},l(t){Nn(a.$$.fragment,t)},m(t,k){Gn(a,t,k),r=!0},p(t,[k]){const d=k&1?Yn(_,[k&1&&Ks(t[0]),k&0&&Ks(qe)]):{};k&2&&(d.$$scope={dirty:k,ctx:t}),a.$set(d)},i(t){r||(Tn(a.$$.fragment,t),r=!0)},o(t){On(a.$$.fragment,t),r=!1},d(t){Dn(a,t)}}}const qe={title:"노마드 코더 후기",summary:"챌린지를 통해 클린 코드에 대한 중요성을 재발견하고, 개발 스킬을 향상시키기 위한 경험을 나눈 후기가 인상적입니다. 코드를 단순히 작성하는 것과 좋은 코드를 작성하는 것 사이에 큰 차이가 있음을 깨닫는 과정은 모든 개발자가 겪는 성장의 한 단계입니다. 클린 코드 원칙을 일상적인 개발 작업에 적용하려는 노력은 코드의 질을 높이고, 유지보수가 용이한 소프트웨어를 만드는 데 크게 기여할 것입니다. 또한, 지속적인 학습과 개선의 중요성을 강조하는 것은 개발자로서의 성장에 매우 중요한 부분입니다. 이러한 경험을 공유함으로써 다른 개발자들에게도 영감을 줄 수 있으며, 같은 과정을 겪고 있는 이들에게도 큰 도움이 될 것입니다. 계속해서 꾸준히 읽고, 쓰고, 고치고 반복하는 자세를 유지한다면, 더욱 성숙한 개발자로 성장할 수 있을 것입니다.",date:"2024-02-16"};function Ac(E,a,r){return E.$$set=_=>{r(0,a=Os(Os({},a),Qs(_)))},a=Qs(a),[a]}class Tc extends Hn{constructor(a){super(),jn(this,a,Ac,Sc,Rn,{})}}const Oc=Object.freeze(Object.defineProperty({__proto__:null,default:Tc,metadata:qe},Symbol.toStringTag,{value:"Module"}));class Ic{constructor({title:a,slug:r,date:_,content:v,summary:t,path:k,isOrigin:d,parent:L}){ct(this,"_title");ct(this,"_slug");ct(this,"_date");ct(this,"_content");ct(this,"_summary");ct(this,"_path");ct(this,"_isOrigin");ct(this,"_parent");ct(this,"_childs");ct(this,"_show");this._title=a,this._slug=r,this._date=_,this._content=v,this._summary=t,this._path=k,this._isOrigin=d,this._parent=L,this._childs=[],this._show=!1}get title(){return this._title}set title(a){this._title=a}get slug(){return this._slug}set slug(a){this._slug=a}get date(){return this._date}set date(a){this._date=a}get content(){return this._content}set content(a){this._content=a}get summary(){return this._summary}set summary(a){this._summary=a}get path(){return this._path}set path(a){this._path=a}get isOrigin(){return this._isOrigin}set isOrigin(a){this._isOrigin=a}get parent(){return this._parent}set parent(a){this._parent=a}get childs(){return this._childs}set childs(a){this._childs=a}get show(){return this._show}set show(a){this._show=a}}class zp{constructor(){ct(this,"modules");ct(this,"posts",[]);ct(this,"tags",[]);this.modules=Object.entries(Object.assign({"/src/routes/journal/달리기3년차/+page.md":Ll,"/src/routes/wikis/CS/+page.md":Ol,"/src/routes/wikis/CS/OOP/+page.md":Rl,"/src/routes/wikis/CS/restful_api/+page.md":Dl,"/src/routes/wikis/CS/소켓통신/+page.md":zl,"/src/routes/wikis/Infra/+page.md":Wl,"/src/routes/wikis/Infra/MQ/+page.md":gl,"/src/routes/wikis/JAVA/+page.md":to,"/src/routes/wikis/JAVA/Bean/+page.md":uo,"/src/routes/wikis/JAVA/GC/+page.md":ko,"/src/routes/wikis/JAVA/Stream/+page.md":ho,"/src/routes/wikis/알고리즘/+page.md":$o,"/src/routes/wikis/알고리즘/정렬/+page.md":Oo,"/src/routes/wikis/알고리즘/코딩테스트/+page.md":Ro,"/src/routes/wikis/코딩테스트/+page.md":Go,"/src/routes/wikis/코딩테스트/lv1/+page.md":Fo,"/src/routes/wikis/코딩테스트/구간합/+page.md":Yo,"/src/routes/wikis/코딩테스트/스택과_큐/+page.md":Zo,"/src/routes/wikis/코딩테스트/슬라이딩_윈도우/+page.md":tu,"/src/routes/wikis/코딩테스트/저주의숫자/+page.md":uu,"/src/routes/wikis/코딩테스트/정렬/+page.md":ku,"/src/routes/wikis/코딩테스트/투포인터/+page.md":du,"/src/routes/wikis/클린코드/+page.md":bu,"/src/routes/wikis/클린코드/10장/+page.md":Tu,"/src/routes/wikis/클린코드/11장/+page.md":ju,"/src/routes/wikis/클린코드/1장/+page.md":Gu,"/src/routes/wikis/클린코드/2장/+page.md":Ju,"/src/routes/wikis/클린코드/3장/+page.md":Wu,"/src/routes/wikis/클린코드/4장/+page.md":gu,"/src/routes/wikis/클린코드/5장/+page.md":ec,"/src/routes/wikis/클린코드/6장/+page.md":cc,"/src/routes/wikis/클린코드/7장/+page.md":_c,"/src/routes/wikis/클린코드/8장/+page.md":hc,"/src/routes/wikis/클린코드/9장/+page.md":$c,"/src/routes/wikis/클린코드/후기/+page.md":Oc}))}loadPosts(a=""){let r=[];return this.modules.forEach(([_,v])=>{let t=v.metadata,k;_.includes(`src/routes/${a}`)&&(t.path=this.getFileName(_),k=this.parseMarkdown(t)),k!=null&&k.parent==""&&r.push(k)}),r=this.sortPosts(r),r.forEach(_=>{if(_.parent!==""){let v=r.find(t=>t.path===_.parent);v!==void 0&&v.childs.push(_)}}),r}loadPostsChildren(a=""){let r=[];const _=new RegExp(`^${a}/[^/]+$`);return this.modules.forEach(([v,t])=>{let k=t.metadata;k.path.match(_)&&r.push(this.parseMarkdown(k))}),this.sortPosts(r).reverse()}loadPostsByTag(a){let r=[];return this.modules.forEach(([_,v])=>{let t=v.metadata;if(t.tags&&t.tags.includes(a)){t.path=this.getFileName(_);let k=this.parseMarkdown(t);r.push(k)}}),this.sortPosts(r)}sortPosts(a){return a.sort((r,_)=>new Date(_.date).getTime()-new Date(r.date).getTime())}getFileName(a){return a.split("/").slice(4,-1).join("/")}parseMarkdown(a){let r=a.path.split("/");return a=new Ic({title:a.title,slug:a.slug,date:a.date,content:a.content,summary:a.summary,path:a.path,isOrigin:r.length==1,parent:r.slice(0,-1).join("/")}),a}loadTags(){let a=new Map;this.modules.forEach(([_,v])=>{let t=v.metadata;t.tags&&t.tags.forEach(k=>{a.has(k)?a.set(k,a.get(k)+1):a.set(k,1)})});let r=[];return a.forEach((_,v)=>{r.push(v)}),r}}export{Nu as A,Fu as B,Yu as C,Zu as D,tc as E,uc as F,kc as G,dc as H,bc as I,Tc as J,zp as M,$l as P,Tl as a,jl as b,Gl as c,Jl as d,Yl as e,Zl as f,vl as g,ao as h,oo as i,fo as j,Eo as k,bo as l,To as m,jo as n,No as o,Bo as p,Vo as q,Qo as r,au as s,Gp as t,ou as u,fu as v,Eu as w,wu as x,Au as y,Hu as z};
