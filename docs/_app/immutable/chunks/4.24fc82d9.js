import{S as j_,i as N_,s as q_,I as jL,e as t,c as l,b as e,f as a,o as k,h as u,J as NL,K as qL,L as xL,w as wi,u as Pi,a as i,t as p,E as FL,m as v5,g as r,d as o,F as GL,P as _5,j as n,G as YL,k as R_,H as $L,Q as C_,R as E5,T as CL,U as ML,n as d5}from"./index.f97ab432.js";function h5(I){let v,E;const d=I[1].default,_=jL(d,I,I[0],null);return{c(){v=t("div"),_&&_.c(),this.h()},l(f){v=l(f,"DIV",{class:!0,"data-animate":!0,"data-animate-speed":!0});var L=e(v);_&&_.l(L),L.forEach(a),this.h()},h(){k(v,"class","post-content svelte-luwpx3"),k(v,"data-animate",""),k(v,"data-animate-speed","slow")},m(f,L){u(f,v,L),_&&_.m(v,null),E=!0},p(f,[L]){_&&_.p&&(!E||L&1)&&NL(_,d,f,f[0],E?xL(d,f[0],L,null):qL(f[0]),null)},i(f){E||(wi(_,f),E=!0)},o(f){Pi(_,f),E=!1},d(f){f&&a(v),_&&_.d(f)}}}function L5(I,v,E){let{$$slots:d={},$$scope:_}=v;return I.$$set=f=>{"$$scope"in f&&E(0,_=f.$$scope)},[_,d]}class m5 extends j_{constructor(v){super(),N_(this,v,L5,h5,q_,{})}}function I5(I){let v;const E=I[4].default,d=jL(E,I,I[5],null);return{c(){d&&d.c()},l(_){d&&d.l(_)},m(_,f){d&&d.m(_,f),v=!0},p(_,f){d&&d.p&&(!v||f&32)&&NL(d,E,_,_[5],v?xL(E,_[5],f,null):qL(_[5]),null)},i(_){v||(wi(d,_),v=!0)},o(_){Pi(d,_),v=!1},d(_){d&&d.d(_)}}}function y5(I){let v,E,d,_,f,L,x,K,y,H,A,Q,Cs,Z,g,Ms,ss,B,_s,js,X,Ns,F,D;return document.title=v=I[0],F=new m5({props:{$$slots:{default:[I5]},$$scope:{ctx:I}}}),{c(){E=t("meta"),d=i(),_=t("main"),f=t("article"),L=t("img"),K=i(),y=t("div"),H=t("div"),A=t("h1"),Q=p(I[0]),Cs=i(),Z=t("h2"),g=p(I[1]),Ms=i(),ss=t("p"),B=t("time"),_s=p(I[2]),js=i(),X=t("div"),Ns=i(),FL(F.$$.fragment),this.h()},l(w){const b=v5("svelte-qs65uz",document.head);E=l(b,"META",{name:!0,content:!0}),b.forEach(a),d=r(w),_=l(w,"MAIN",{});var N=e(_);f=l(N,"ARTICLE",{class:!0});var W=e(f);L=l(W,"IMG",{src:!0,alt:!0,class:!0}),K=r(W),y=l(W,"DIV",{class:!0});var ns=e(y);H=l(ns,"DIV",{class:!0,style:!0});var V=e(H);A=l(V,"H1",{class:!0});var P=e(A);Q=o(P,I[0]),P.forEach(a),Cs=r(V),Z=l(V,"H2",{class:!0});var Es=e(Z);g=o(Es,I[1]),Es.forEach(a),Ms=r(V),ss=l(V,"P",{class:!0});var oa=e(ss);B=l(oa,"TIME",{});var ca=e(B);_s=o(ca,I[2]),ca.forEach(a),oa.forEach(a),V.forEach(a),js=r(ns),X=l(ns,"DIV",{class:!0}),e(X).forEach(a),Ns=r(ns),GL(F.$$.fragment,ns),ns.forEach(a),W.forEach(a),N.forEach(a),this.h()},h(){k(E,"name","description"),k(E,"content",I[1]),_5(L.src,x="/auction.png")||k(L,"src",x),k(L,"alt",""),k(L,"class","background-image svelte-87fb0m"),k(A,"class","cover-title svelte-87fb0m"),k(Z,"class","cover-subtitle"),k(ss,"class","info"),k(H,"class","cover svelte-87fb0m"),k(H,"style",""),k(X,"class","cover-line svelte-87fb0m"),k(y,"class","content-wrapper svelte-87fb0m"),k(f,"class","post")},m(w,b){n(document.head,E),u(w,d,b),u(w,_,b),n(_,f),n(f,L),n(f,K),n(f,y),n(y,H),n(H,A),n(A,Q),n(H,Cs),n(H,Z),n(Z,g),n(H,Ms),n(H,ss),n(ss,B),n(B,_s),n(y,js),n(y,X),n(y,Ns),YL(F,y,null),D=!0},p(w,[b]){(!D||b&1)&&v!==(v=w[0])&&(document.title=v),(!D||b&2)&&k(E,"content",w[1]),(!D||b&1)&&R_(Q,w[0]),(!D||b&2)&&R_(g,w[1]),(!D||b&4)&&R_(_s,w[2]);const N={};b&32&&(N.$$scope={dirty:b,ctx:w}),F.$set(N)},i(w){D||(wi(F.$$.fragment,w),D=!0)},o(w){Pi(F.$$.fragment,w),D=!1},d(w){a(E),w&&a(d),w&&a(_),$L(F)}}}function w5(I,v,E){let{$$slots:d={},$$scope:_}=v,{title:f=""}=v,{summary:L=""}=v,{publishedAt:x=""}=v,{thumbnail:K=""}=v;return I.$$set=y=>{"title"in y&&E(0,f=y.title),"summary"in y&&E(1,L=y.summary),"publishedAt"in y&&E(2,x=y.publishedAt),"thumbnail"in y&&E(3,K=y.thumbnail),"$$scope"in y&&E(5,_=y.$$scope)},[f,L,x,K,d,_]}class P5 extends j_{constructor(v){super(),N_(this,v,w5,y5,q_,{title:0,summary:1,publishedAt:2,thumbnail:3})}}function A5(I){let v,E,d,_,f,L,x,K,y,H,A,Q,Cs,Z,g,Ms,ss,B,_s,js,X,Ns,F,D,w,b,N,W,ns,V,P,Es,oa,ca,Al,Ai,bi,bl,Ti,Si,Tl,Ui,Oi,Sl,Hi,Di,Ul,Ri,Ci,Ol,Mi,ji,Hl,Ni,$o,qs,ua,qi,Bo,xs,ia,xi,Xo,ra,Dl,Fi,Wo,Fs,ka,Gi,Vo,fa,Rl,Yi,zo,Gs,va,$i,Jo,as,Cl,Bi,Xi,Ml,Wi,Vi,_a,zi,is,jl,Ji,Ki,Nl,Qi,Zi,ql,gi,Ko,Ys,Ea,sr,Qo,da,xl,nr,Zo,$s,ha,ar,go,ds,Fl,tr,lr,Gl,er,sc,Bs,La,pr,nc,S,Yl,or,cr,ma,$l,ur,Bl,Ia,ir,rs,Xl,rr,kr,Wl,fr,vr,Vl,_r,Er,zl,dr,hr,ya,Jl,Lr,Kl,Ql,mr,Ir,wa,Zl,yr,gl,se,wr,Pr,Pa,ne,Ar,Xs,ae,br,Tr,te,Sr,ac,Ws,Aa,Ur,tc,ba,le,Or,lc,Vs,Ta,Hr,ec,Sa,ee,Dr,pc,zs,Ua,Rr,oc,Oa,pe,Cr,cc,Js,Ha,Mr,uc,Da,oe,jr,ic,Ks,Ra,Nr,rc,Ca,qr,kc,Qs,Ma,xr,fc,ja,ce,Fr,vc,Zs,Na,Gr,_c,qa,ue,Yr,Ec,gs,xa,$r,dc,U,ie,Br,Xr,re,Wr,Vr,ke,zr,Jr,fe,Kr,Qr,ve,Zr,gr,_e,sk,hc,sn,Fa,nk,Lc,h,Ee,ak,tk,de,lk,ek,he,pk,ok,Le,ck,uk,me,ik,rk,Ie,kk,fk,ye,vk,_k,we,Ek,dk,Pe,hk,Lk,Ae,mk,Ik,be,yk,wk,Te,Pk,Ak,Se,bk,Tk,Ue,Sk,Uk,Oe,Ok,Hk,He,Dk,mc,nn,Ga,Rk,Ic,Ya,Ck,yc,an,$a,Mk,wc,hs,De,jk,Nk,Re,qk,Pc,tn,Ba,xk,Ac,G,Ce,Fk,Gk,Xa,Yk,z,Me,$k,Bk,je,Xk,Wk,Ne,Vk,zk,qe,Jk,Kk,Wa,Qk,ln,xe,Zk,gk,Fe,sf,nf,Va,af,Ge,Ye,tf,bc,en,BL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReporterConfig</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 변수끼리는 세로로 묶어놓기</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> m_className<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Property</span><span class="token punctuation">></span></span> m_properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Property</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token class-name">Property</span> property<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		m_properties<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Tc,Ls,za,lf,q,$e,ef,pf,Ja,of,pn,Be,cf,uf,Xe,rf,kf,Ka,ff,We,Ve,vf,_f,Qa,Ef,ze,Je,df,hf,Za,Lf,on,Ke,mf,If,Qe,yf,wf,ga,Pf,cn,Ze,Af,bf,ge,Tf,Sc,un,XL=`<code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">makeResponse</span><span class="token punctuation">(</span><span class="token class-name">FitNesseContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Request</span> request<span class="token punctuation">)</span> 
	<span class="token keyword">throw</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">String</span> pageNmae <span class="token operator">=</span> <span class="token function">getPageNameOrDefault</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"FrontPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">loadPage</span><span class="token punctuation">(</span>pageName<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//////////////////////</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPageNameOrDefault</span><span class="token punctuation">(</span><span class="token class-name">Reuqest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultPageName<span class="token punctuation">)</span>
<span class="token comment">//////////////////////</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadPage</span><span class="token punctuation">(</span><span class="token class-name">String</span> resource<span class="token punctuation">,</span> <span class="token class-name">FitNesseContext</span> context<span class="token punctuation">)</span></code>`,Uc,rn,st,Sf,Oc,T,sp,Uf,Of,np,Hf,Df,ap,Rf,Cf,nt,Mf,kn,tp,jf,Nf,lp,qf,xf,at,Ff,fn,ep,Gf,Yf,pp,$f,Bf,op,Xf,Wf,tt,Vf,cp,up,zf,Hc,vn,lt,Jf,Dc,et,Kf,Rc,_n,pt,Qf,Cc,ms,ip,Zf,gf,rp,s1,Mc,En,ot,n1,jc,Is,ct,a1,ks,kp,t1,l1,fp,e1,p1,vp,o1,c1,ut,u1,dn,hn,_p,i1,r1,it,WL=`<code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">Point</span> center<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> redius<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Geometry</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token class-name">Object</span> shape<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token class-name">NoSuchShapeExcpetion</span><span class="token operator">~</span>
<span class="token punctuation">&#125;</span></code>`,k1,Ln,Ep,f1,v1,rt,VL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> side<span class="token operator">*</span>side<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Nc,mn,kt,_1,qc,R,dp,E1,d1,ft,h1,J,hp,L1,m1,Lp,I1,y1,mp,w1,P1,Ip,A1,b1,vt,T1,fs,_t,S1,yp,wp,Pp,U1,O1,Et,H1,Ap,bp,Tp,D1,R1,Sp,C1,M1,dt,j1,In,Up,N1,q1,Op,x1,F1,ht,G1,vs,Hp,Y1,$1,Dp,B1,X1,Rp,W1,xc,yn,Lt,V1,Fc,ts,Cp,Mp,z1,J1,wn,jp,K1,Q1,mt,zL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> property1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> property2<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Default constructor</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> property1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperty1</span><span class="token punctuation">(</span><span class="token class-name">String</span> property1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>property1 <span class="token operator">=</span> property1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProperty2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> property2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperty2</span><span class="token punctuation">(</span><span class="token keyword">int</span> property2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>property2 <span class="token operator">=</span> property2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Z1,Pn,Np,g1,s3,qp,xp,n3,Gc,An,It,a3,Yc,ls,Fp,t3,l3,Gp,e3,p3,Yp,o3,$c,bn,yt,c3,Bc,wt,$p,u3,Xc,Tn,Pt,i3,Wc,At,Bp,r3,Vc,Sn,bt,k3,zc,ys,Xp,f3,v3,Wp,_3,Jc,Un,Tt,E3,Kc,St,Vp,d3,Qc,On,Ut,h3,Zc,Ot,zp,L3,gc,Hn,Ht,m3,su,Dt,Jp,I3,nu,Dn,JL=`<code class="language-java"><span class="token class-name">LocalPort</span> port <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
	port<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PortDeviceFailure</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">reportError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
	logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//////////////</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalPort</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">ACMEPort</span> innerPort<span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token keyword">int</span> portNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		innerPort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ACMEPort</span><span class="token punctuation">(</span>portNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ATM1212UnlockedExcpetion</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,au,Rt,Kp,y3,tu,Rn,Ct,w3,lu,Mt,Qp,P3,eu,Cn,jt,A3,pu,Nt,Zp,b3,ou,Mn,qt,T3,cu,xt,gp,S3,uu,jn,Ft,U3,iu,Gt,so,O3,ru,Nn,Yt,H3,ku,qn,$t,D3,fu,ws,no,R3,C3,ao,M3,vu,xn,Bt,j3,_u,Ps,to,N3,q3,lo,x3,Eu,Fn,KL=`<code class="language-java">  	<span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogAddAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConsoleAppender</span> appender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span>appender<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogAddAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ConsoleAppender</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getRootLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BasicConfigurator</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"basicLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAppenderWithStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ConsoleAppender</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"addAppenderWithStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAppenderWithoutStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"addAppenderWithoutStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,du,Gn,Xt,F3,hu,As,eo,G3,Y3,po,$3,Lu,Yn,Wt,B3,mu,Vt,oo,X3,Iu,$n,zt,W3,yu,Jt,V3,wu,Bn,Kt,z3,Pu,es,Qt,co,J3,K3,Q3,Zt,uo,Z3,g3,sv,gt,io,nv,av,Au,sl,tv,bu,Xn,nl,lv,Tu,C,ro,ev,pv,ko,ov,cv,fo,vo,uv,iv,_o,rv,kv,Eo,fv,Su,Wn,al,vv,Uu,bs,Vn,_v,ho,Ev,dv,hv,Lo,mo,Lv,Ou,zn,QL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
    <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSymbolicLinksAreNotInXmlPageHierarchy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">WikiPage</span> page <span class="token operator">=</span> <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">addLinkTo</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">,</span> <span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
    <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseDoesNotContain</span><span class="token punctuation">(</span><span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetDataAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token function">makePageWithContent</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"test page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"type:data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseContains</span><span class="token punctuation">(</span><span class="token string">"test page"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Hu,Jn,tl,mv,Du,ll,Io,Iv,Ru,Kn,el,yv,Cu,pl,yo,wv,Mu,Qn,ZL=`<code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreashold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  hw<span class="token punctuation">.</span><span class="token function">setTemp</span><span class="token punctuation">(</span><span class="token constant">WAY_TOO_COLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  controller<span class="token punctuation">.</span><span class="token function">tic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">heaterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
  <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">blowerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">coolerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">hiTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
  <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">loTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,ju,Zn,gL=`<code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token function">wayTooCold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"HBchL"</span><span class="token punctuation">,</span> hw<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code>`,Nu,gn,ol,Pv,qu,sa,s5=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> 
  <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">thenResponseShouldBeXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyHasRightTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> 
  <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">thenResponseShouldContain</span><span class="token punctuation">(</span>
    <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code>`,xu,Ts,wo,Av,bv,Po,Tv,Fu,na,cl,Sv,Gu,aa,n5=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">SerialDate</span> d1 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SerialDate</span> d2 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SerialDate</span> d3 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SerialDate</span> d4 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Yu,Ss,ul,Uv,ta,il,Ov,la,Ao,Hv,Dv,bo,Rv,Cv,rl,Mv,To,So,jv,Nv,Uo,qv,$u,ea,kl,Oo,xv,Bu,fl,Fv,Xu,M,Ho,Do,Gv,Yv,Ro,Co,$v,Bv,Mo,jo,Xv,Wv,No,qo,Vv,zv,xo,Fo,Jv,Wu,pa,vl,Kv,Vu,Us,Go,Qv,Zv,Yo,gv;return{c(){v=t("h1"),E=t("a"),d=p("1장 깨끗한 코드"),_=i(),f=t("ul"),L=t("li"),x=p("빨리가는 유일한 방법은 언제나 코드를 깨끗하게 유지하는 습관이다."),K=i(),y=t("li"),H=p("단순한 코드 규칙으로 구현을 시작하는법"),A=t("ul"),Q=t("li"),Cs=p("모든 테스트를 통과한다"),Z=i(),g=t("li"),Ms=p("중복이 없다"),ss=i(),B=t("li"),_s=p("시스템 내 모든 설계 아이디어를 표현한다"),js=i(),X=t("li"),Ns=p("클래스, 메서드, 함수 등을 최대한 줄인다."),F=i(),D=t("li"),w=p("캠프장을 처음 왔을 때 보다 더 깨끗하게 하고 떠나라"),b=i(),N=t("h1"),W=t("a"),ns=p("2장 의미있는 이름"),V=i(),P=t("ul"),Es=t("li"),oa=p("의도를 분명히 밝히자: 코드가 무엇을 의미하는지 독자로 하여금 납득이 되어야 한다."),ca=i(),Al=t("li"),Ai=p("그릇된 정보를 피하라: 변수나 함수 이름에 잘못된 정보를 포함시키지 말아야 한다. 다른 사람이 코드를 읽을 때 혼란을 줄 수 있으며, 잘못된 가정을 할 수도 있다."),bi=i(),bl=t("li"),Ti=p("의미 있게 구분하라: 변수나 함수 이름은 서로 다른 개념을 구분할 수 있도록 명확하고 일관성 있게 작성해야 한다. 혼란을 줄이고 코드의 가독성을 향상시킨다."),Si=i(),Tl=t("li"),Ui=p("발음하기 쉬운 이름을 사용하라. 코드의 이름은 다른 사람들이 발음하기 쉽고 이해하기 쉽게 작성되어야 한다."),Oi=i(),Sl=t("li"),Hi=p("검색하기 쉬운 이름을 사용하라. 변수나 함수의 이름은 다른 사람들이 쉽게 검색할 수 있도록 작성되어야 한다. 명확하고 직관적인 이름을 선택하여 코드의 유지보수성을 높이는데 도움이 된다."),Di=i(),Ul=t("li"),Ri=p("인코딩을 피하라: 변수나 함수 이름에 인코딩을 사용하지 않는 것이 좋다. 의미 있는 이름을 사용하여 코드의 가독성을 높이는 것이 중요하다."),Ci=i(),Ol=t("li"),Mi=p("자신의 기억력을 자랑하지 마라: 변수 이름을 자신만 아는 이름으로 변환하지 말아라."),ji=i(),Hl=t("li"),Ni=p("불필요한 유머나 맥락을 벗어나는 명명법을 사용하지 말고 방법론에 의한 명명법을 쓰자."),$o=i(),qs=t("h1"),ua=t("a"),qi=p("3장 함수"),Bo=i(),xs=t("h3"),ia=t("a"),xi=p("작게 만들어라"),Xo=i(),ra=t("ul"),Dl=t("li"),Fi=p("호출하는 함수 형식으로 함수는 짧을수록 좋다 2~3줄 내외면 더 좋다. 들여쓰기 구조도 1단이나 2단을 넘어서면 힘들어진다"),Wo=i(),Fs=t("h3"),ka=t("a"),Gi=p("한 가지만 해라"),Vo=i(),fa=t("ul"),Rl=t("li"),Yi=p("추상화 단계에서 일을 하는 가짓수가 하나여야 한다 가령 다른 함수를 호출하는 함수가 존재한다면 그 함수는 한가지 일을 하고 있는것이다."),zo=i(),Gs=t("h3"),va=t("a"),$i=p("함수 당 추상화 수준은 하나로"),Jo=i(),as=t("ul"),Cl=t("li"),Bi=p("한 함수내에 여러가지 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운 탓이다."),Xi=i(),Ml=t("li"),Wi=p("내려가기 규칙을 활용하자 위에서 아래로 프로그램을 읽을수 있도록 함수 추상화 수준을 한단계씩 내려보자"),Vi=i(),_a=t("li"),zi=p("TO 설정 페이지와 해제 페이지를 포함라혀면, 설정 페이지를 폼학하고, 테스트 페이지 내용을 포함하고 해제 페이지를 포함한다."),is=t("ul"),jl=t("li"),Ji=p("To 설정 페이지를 포함하려면, 슈트이면 슈트 설정 페이지를 포함한 후 일반 설정 페이지를 포함한다."),Ki=i(),Nl=t("li"),Qi=p("To 슈트 설정 페이지를 포함하려면, 부모 계층에서 SuiteSetUp 페이지를 찾아 Include문과 페이지 경로를 추가한다."),Zi=i(),ql=t("li"),gi=p("To 부모 계층을 검색하려면…"),Ko=i(),Ys=t("h3"),Ea=t("a"),sr=p("Switch문"),Qo=i(),da=t("ul"),xl=t("li"),nr=p("스위치 문을 다형성 객체를 생성하는 코드 안에서 허용하고 상속관계로 숨기고 다른 코드에 노출하지 않는 방법이 있다."),Zo=i(),$s=t("h3"),ha=t("a"),ar=p("서술적인 이름을 사용하라"),go=i(),ds=t("ul"),Fl=t("li"),tr=p("이름이 길어도 괜찮고 서술적인 이름이 짧고 어려운 이름보다 좋다. 함수 이름을 정할때 여러 단어가 쉽게 읽히는 명명법을 사용하는것이 좋다. 여러 단어를 사용해 함수 기능을 표현하라"),lr=i(),Gl=t("li"),er=p("모듈 내에서 함수 이름은 같은 문구,명사,동사를 사용한다."),sc=i(),Bs=t("h3"),La=t("a"),pr=p("함수 인수"),nc=i(),S=t("ul"),Yl=t("li"),or=p("함수에서 이상적인 인수 개수는 0개이다. 다음은 1개이고 다음은2개이다. 최선은 입력 인수가 없는 경우 ex: IncludeSetupPageInfo(new PageContent) → includeSetupPage()"),cr=i(),ma=t("li"),$l=t("em"),ur=p("많이쓰는 단항형식"),Bl=t("ul"),Ia=t("li"),ir=p("함수에 인수 1개를 넘기는 이유"),rs=t("ol"),Xl=t("li"),rr=p("인수에 질문을 던지는 경우"),kr=i(),Wl=t("li"),fr=p("인수를 뭔가로 변환해 결과를 반환하는 경우"),vr=i(),Vl=t("li"),_r=p("단항 함수 형식의 이벤트"),Er=i(),zl=t("li"),dr=p("플래그 인수는 추하다. 함수에 부울 값을 넘기는 관례는 차라리 인수별말고 상황별로 함수를 나누는 편이 좋다"),hr=i(),ya=t("li"),Jl=t("em"),Lr=p("이항함수"),Kl=t("ul"),Ql=t("li"),mr=p("인수가 2개인 함수는 1개인 함수보다 이해하기 어렵다. 프로그램을 짜다보면 불가피한 경우도 생기지만 그만큼 위험이 따른다"),Ir=i(),wa=t("li"),Zl=t("em"),yr=p("삼항함수"),gl=t("ul"),se=t("li"),wr=p("삼항 함수부터는 신중히 고려해야 한다.."),Pr=i(),Pa=t("li"),ne=t("em"),Ar=p("동사와 키워드"),Xs=t("ul"),ae=t("li"),br=p("단항 함수는 함수와 인수가 동사/명사 쌍을 이ㅝ야 한다."),Tr=i(),te=t("li"),Sr=p("함수 이름에 키워드를 추가하는 편도 좋다"),ac=i(),Ws=t("h3"),Aa=t("a"),Ur=p("부수 효과를 일으키지 마라"),tc=i(),ba=t("ul"),le=t("li"),Or=p("함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓을 하지 말아라!"),lc=i(),Vs=t("h3"),Ta=t("a"),Hr=p("명령과 조회를 분리하라!"),ec=i(),Sa=t("ul"),ee=t("li"),Dr=p("함수는 뭔가를 수행 하거나 뭔가에 답 하거나 둘중 하나만 해야한다. 둘 다 하면 안 된다. 객체 상태를 변경 하거나 아니면 객체 정보를 반환 하거나 둘 중 하나다."),pc=i(),zs=t("h3"),Ua=t("a"),Rr=p("Try/Catch 블록은 한 함수에서 별도로 처리"),oc=i(),Oa=t("ul"),pe=t("li"),Cr=p("코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다."),cc=i(),Js=t("h3"),Ha=t("a"),Mr=p("반복하지 마라"),uc=i(),Da=t("ul"),oe=t("li"),jr=p("중복은 소트트웨어에서 모든 악의 근원이다. 많은 원칙과 기법이 중복을 없애거나 제어할 목적으로 나왔다."),ic=i(),Ks=t("h1"),Ra=t("a"),Nr=p("4장 주석"),rc=i(),Ca=t("p"),qr=p(`잘 달린 주석은 어떤 정보보다 유용하지만, 거짓말을 하는 경우가 많다. 일부가 여기서 저기로 옮겨지면서 발생하는 불상사
진실은 한 곳에만 존재한다. 바로 코드다 코드만이 자기가 하는 일을 진실되게 말한다.`),kc=i(),Qs=t("h3"),Ma=t("a"),xr=p("주석은 나쁜 코드를 보완하지 못한다"),fc=i(),ja=t("ul"),ce=t("li"),Fr=p("표현력이 풍부하고 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다."),vc=i(),Zs=t("h3"),Na=t("a"),Gr=p("코드를 의도로 표현하라"),_c=i(),qa=t("ul"),ue=t("li"),Yr=p("코드로 대다수 의도를 표현할수 있다 많은 경우 주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다."),Ec=i(),gs=t("h3"),xa=t("a"),$r=p("좋은 주석"),dc=i(),U=t("ul"),ie=t("li"),Br=p("정말은 좋은 주석은 주석을 달지 않을 방법을 찾아낸 주석이라는 사실을 알아라"),Xr=i(),re=t("li"),Wr=p(`법적인 주석
각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보`),Vr=i(),ke=t("li"),zr=p(`정보를 제공하는 주석
기본적인 정보를 주석으로 제공하면 편리하지만 그래도 함수 이름에 정보를 담는편이 좋다`),Jr=i(),fe=t("li"),Kr=p(`의도를 설명하는 주석
두 객체를 비교하는 하는 코드가 있다고 가정했을때 저자의 의도를 보여주는 코드가 좋다`),Qr=i(),ve=t("li"),Zr=p(`의미를 명료하게 밝히는 주석
일반적으로 인수나 반환값 자체를 명확하게 만들면 더 좋겠지만, 인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미를 명료하게 밝히는 주석이 유용하다.`),gr=i(),_e=t("li"),sk=p(`ex
docs형..
결과를 경고하는 주석
TODO주석
중요성을 강조하는 주석`),hc=i(),sn=t("h3"),Fa=t("a"),nk=p("나쁜 주석"),Lc=i(),h=t("ul"),Ee=t("li"),ak=p("주절거리는 주석: 저자에게만 의미가 있고 의사소통이 어려운 주석들"),tk=i(),de=t("li"),lk=p("같은 이야기를 중복하는 주석: 주석이 코드보다 더 많은 정보를 제공하지 못하는 경우"),ek=i(),he=t("li"),pk=p("오해할 여지가 있는 주석: 코드보다 읽기도 어려운 주석에 살짝 잘못된 정보를 포함한 경우"),ok=i(),Le=t("li"),ck=p("의무적으로 다는 주석: javadocs를 넣으라는 규칙이 낳은 아무가치없는 주석"),uk=i(),me=t("li"),ik=p("이력을 기록하는 주석: git이 있으니 이제 없어도 된다"),rk=i(),Ie=t("li"),kk=p("있으나 마나 한 주석: 너무 당연한 사실을 언급 가령 생성자를 알려주는 경우"),fk=i(),ye=t("li"),vk=p("위치를 표시하는 주석: 유용한 경우도 있지만 독자가 흔한 잡음으로 여겨 무시한다"),_k=i(),we=t("li"),Ek=p("닫는 괄호에 다는 주석: 함수를 줄이는 편이 낫다."),dk=i(),Pe=t("li"),hk=p("공로를 돌리거나 저자를 표시하는 주석: 이것도 git에 맡기자"),Lk=i(),Ae=t("li"),mk=p("주석으로 처리한 코드: 주석으로 처리한 코드만큼 밉살스러운 관행도 드물다."),Ik=i(),be=t("li"),yk=p("HTML 주석: 주석을 뽑아 웹페이지에 올릴 작정이라면 태그를 삽입해야 하는 책임은 프로그래머가 아니라 도구가 져야 맞다"),wk=i(),Te=t("li"),Pk=p("전역 정보: 상수 값은 코드와 주석이 전혀 통제할수 없다"),Ak=i(),Se=t("li"),bk=p("너무 많은 정보: 장황하게 늘어놓지 마라"),Tk=i(),Ue=t("li"),Sk=p("모호한 관계: 주석과 주석이 설명하는 코드는 둘 사이에 관계가 명백해야 한다"),Uk=i(),Oe=t("li"),Ok=p("함수 헤더: 짧은 함수는 긴 설명이 필요 없다. 짧고 한 가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다."),Hk=i(),He=t("li"),Dk=p("비공개 코드에서 Javadocs: 공개하지 않을 코드라면 자바독스는 쓸모가 없다"),mc=i(),nn=t("h1"),Ga=t("a"),Rk=p("5장 형식 맞추기"),Ic=i(),Ya=t("p"),Ck=p("프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야 한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고 모두가 그 규칙을 따라야 한다."),yc=i(),an=t("h3"),$a=t("a"),Mk=p("형식을 맞추는 목적"),wc=i(),hs=t("ul"),De=t("li"),jk=p("코드 형식은 매우 중요하다"),Nk=i(),Re=t("li"),qk=p("오늘 구현한 기능이 다음 버전에서 바뀔 확률은 아주 높다. 가독성이 바뀔 코드의 품질을 결정한다."),Pc=i(),tn=t("h3"),Ba=t("a"),xk=p("적절한 행 길이를 유지하라"),Ac=i(),G=t("ul"),Ce=t("li"),Fk=p("대다수가 500줄을 넘지 않고 대부분이 200줄 정도인 파일로도 커다란 시스템을 구축할수 있다."),Gk=i(),Xa=t("li"),Yk=p("신문 기사처럼 작성하라"),z=t("ul"),Me=t("li"),$k=p("최상단 기사를 몇 마디로 요약하는 표제가 나오고, 첫 문단이 기사 내용을 요약한다."),Bk=i(),je=t("li"),Xk=p("소스 파일도 이와 비슷하게 이름만 보고도 올바른 모듈을 판단 할 정도로 신경 써서 짓는다."),Wk=i(),Ne=t("li"),Vk=p("소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명하고 아래로 내려갈수록 세세하게 묘사한다."),zk=i(),qe=t("li"),Jk=p("신문은 다양한 기사로 이뤄진다. 대다수 기사가 아주 짧고 날짜, 이름들을 뒤섞은 긴 기사 하나만 싣는다면 아무도 읽지 않을것이다."),Kk=i(),Wa=t("li"),Qk=p("개념은 빈 행으로 분리하라"),ln=t("ul"),xe=t("li"),Zk=p("모든 코드는 왼쪽에서 오른쪽으로 그리고 위에서 아래로 읽힌다."),gk=i(),Fe=t("li"),sf=p("일련의 행 묶음은 완결된 생각 하나를 표현한다."),nf=i(),Va=t("li"),af=p("세로 밀집도"),Ge=t("ul"),Ye=t("li"),tf=p("줄바꿈이 개념을 분리한다면 세로 밀집도는 연광성을 의미한다. 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다는 뜻이다."),bc=i(),en=t("pre"),Tc=i(),Ls=t("ul"),za=t("li"),lf=p("수직 거리"),q=t("ul"),$e=t("li"),ef=p("서로 밀접한 개념은 세로로 가까이 둬야 한다. 물론 두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않는다. 하지만 타당한 근거 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다."),pf=i(),Ja=t("li"),of=p("변수선언 위치"),pn=t("ul"),Be=t("li"),cf=p("사용하는 위치에 최대한 가까이 선언한다. 우리가 만든 함수는 매우 짧으므로 지역 변수는 각 함수 맨 처음에 선언한다."),uf=i(),Xe=t("li"),rf=p("루프를 제어하는 변수는 흔히 루프문 내부에 선언한다. (아주 드물지만 블록 상단이나 루프 직전에 선언하는 사례도 있다)"),kf=i(),Ka=t("li"),ff=p("인스턴스 변수"),We=t("ul"),Ve=t("li"),vf=p("클래스 맨 처음에 선언한다."),_f=i(),Qa=t("li"),Ef=p("종속 함수"),ze=t("ul"),Je=t("li"),df=p("한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다."),hf=i(),Za=t("li"),Lf=p("개념적 유사성"),on=t("ul"),Ke=t("li"),mf=p("친화도가 높을수록 코드를 가까이 배치한다."),If=i(),Qe=t("li"),yf=p("친화도가 높은 요인은 한 함수가 다른 함수를 호출해 생기는 종속성이 생기는 경우나 명명법이 똑가톡 기본 기능이 유사한 경우"),wf=i(),ga=t("li"),Pf=p("세로 순서"),cn=t("ul"),Ze=t("li"),Af=p("가장 중요한 개념을 가장 먼저 표현한다."),bf=i(),ge=t("li"),Tf=p("세세한 사항을 최대한 배제한다."),Sc=i(),un=t("pre"),Uc=i(),rn=t("h3"),st=t("a"),Sf=p("가로 형식 맞추기"),Oc=i(),T=t("ul"),sp=t("li"),Uf=p("기존 오픈소스 코드들은 60자 이상부터 떨어진다. 프로그래머는 명백하게 짧은 행을 선호한다."),Of=i(),np=t("li"),Hf=p("100자나 120자에 달해도 나쁘지 않지만 그 이상은 솔직히 주의 부족이다."),Df=i(),ap=t("li"),Rf=p("가로 공백과 밀집도 가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다."),Cf=i(),nt=t("li"),Mf=p("가로 정렬"),kn=t("ul"),tp=t("li"),jf=p("코드의 변수값을 강조하기 위해 가로공백을 넣지 말아라 ide에서 다 잡힌다"),Nf=i(),lp=t("li"),qf=p("선언부가 길고 강조할게 많다면 클래스를 쪼개야 한다는 의미이다."),xf=i(),at=t("li"),Ff=p("들여쓰기"),fn=t("ul"),ep=t("li"),Gf=p("들여쓰기 자체가 윤곽도를 보여준다"),Yf=i(),pp=t("li"),$f=p("들여쓰기한 파일은 구조가 한눈에 들어온더. 변수, 생성자 함수, 접근자 함수, 메서드가 금방 보인다."),Bf=i(),op=t("li"),Xf=p("때로는 간단한 if, while, 짧은 함수에서 들여쓰기를 무시하고픈 유혹이 생긴다. 원점으로 돌아가도록 하자"),Wf=i(),tt=t("li"),Vf=p("팀 규칙"),cp=t("ul"),up=t("li"),zf=p("팀은 한 가지 규칙에 합의해야 한다. 그리고 모든 팀원은 그 규칙을 따라야 한다."),Hc=i(),vn=t("h1"),lt=t("a"),Jf=p("6장 객체와 자료구조"),Dc=i(),et=t("p"),Kf=p("변수를 비공개로 정의 하는 이유는 남들이 변수에 의존하지 않게 만들고 싶어서다."),Rc=i(),_n=t("h3"),pt=t("a"),Qf=p("자료 추상화"),Cc=i(),ms=t("ul"),ip=t("li"),Zf=p("변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필요하다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다."),gf=i(),rp=t("li"),s1=p("개발자는 객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다."),Mc=i(),En=t("h3"),ot=t("a"),n1=p("자료/객체 비대칭"),jc=i(),Is=t("ul"),ct=t("li"),a1=p("객체와 자료 구조는 근본적으로 양분된다."),ks=t("ul"),kp=t("li"),t1=p("절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 슆다."),l1=i(),fp=t("li"),e1=p("절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야 한다."),p1=i(),vp=t("li"),o1=p("둘다 참이다. 다시말해 객체 지향코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다."),c1=i(),ut=t("li"),u1=p("예시"),dn=t("ul"),hn=t("li"),_p=t("p"),i1=p("절차적인 접근예시"),r1=i(),it=t("pre"),k1=i(),Ln=t("li"),Ep=t("p"),f1=p("다형성 접근예시"),v1=i(),rt=t("pre"),Nc=i(),mn=t("h3"),kt=t("a"),_1=p("디미터 법칙"),qc=i(),R=t("ul"),dp=t("li"),E1=p("모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다."),d1=i(),ft=t("li"),h1=p("클래스 C의 메서드 f는 다음과 같은 메서드만 호출해야 한다"),J=t("ul"),hp=t("li"),L1=p("클래스 C"),m1=i(),Lp=t("li"),I1=p("f가 생성한 객체"),y1=i(),mp=t("li"),w1=p("f 인수로 넘어온 객체"),P1=i(),Ip=t("li"),A1=p("C 인스턴스 변수에 저장된 객체"),b1=i(),vt=t("li"),T1=p("기차 충돌"),fs=t("ul"),_t=t("li"),S1=p("as-is"),yp=t("ul"),wp=t("li"),Pp=t("strong"),U1=p("final String outputDir = ctext.getOptions().getScracthDir().getAbsolutePath();"),O1=i(),Et=t("li"),H1=p("to-be"),Ap=t("ul"),bp=t("li"),Tp=t("strong"),D1=p(`Options opts = ctxt.getOptions();
File scractchDir = opts.getScratchDir();
final String outputDir = scracthDir.getAbsolutePath();`),R1=i(),Sp=t("li"),C1=p("객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 자료구조 라면 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다."),M1=i(),dt=t("li"),j1=p("잡종 구조"),In=t("ul"),Up=t("li"),N1=p("절반은 객체, 절반은 자료 구조인 잡종 구조가 나온다."),q1=i(),Op=t("li"),x1=p("이런 잡종 구조는 새로운 함수는 물론이고 새로운 자료 구조도 추가하기 어렵다. 단점만 모아놓은 구조"),F1=i(),ht=t("li"),G1=p("구조체 감추기"),vs=t("ul"),Hp=t("li"),Y1=p("그렇다면 임시 디렉토러의 절대 경로는 어떻게 얻어야 좋을까?"),$1=i(),Dp=t("li"),B1=p(`ctxt.getAboslutePathOfScratchDirectoryOption(); → ctxt 객체에 공개해야 하는 메서드가 너무 많아진다
ctx.getScratchDirectoryOption().getAbsolutePath(); → 자료 구조를 반환 한다고 가정한다.`),X1=i(),Rp=t("li"),W1=p(`그렇다면 ctxt 객체에 임시 파일을 생성하라고 시키면 어떨까?
BufferedOutputStream bos = ctxt.createScratchFilesStream(classFileName);
객체에게 맡기기에 적당한 임무로 보인다!`),xc=i(),yn=t("h3"),Lt=t("a"),V1=p("자료 전달 객체"),Fc=i(),ts=t("ul"),Cp=t("li"),Mp=t("p"),z1=p("자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스이다. 이런 자료구조체를 DTO(Data Transfer Object)라 한다."),J1=i(),wn=t("li"),jp=t("p"),K1=p("좀더 일반적인 형태는 Bean 구조이다. 비공개 변수를 조회 설정 함수로 조작하는 방식. 사이비 캡슐화로 일부 순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다."),Q1=i(),mt=t("pre"),Z1=i(),Pn=t("li"),Np=t("p"),g1=p("활성 레코드"),s3=i(),qp=t("ul"),xp=t("li"),n3=p("공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료구조, 대게 save나 find와 같이 탐색함수도 제공한다. 불행히도 비즈니스 규칙 메서드를 추가해 이런 자료 구조를 개체로 취급하는 개발자가 흔하다. 하지만 이는 바람직하지 않다. 활성 레코드는 자료 구조로 취급한다."),Gc=i(),An=t("h3"),It=t("a"),a3=p("결론"),Yc=i(),ls=t("ul"),Fp=t("li"),t3=p("객체는 동작을 공개하고 자료를 숨긴다. 기존 동작을 변경하지 않으면서 객체 타입을 추가하기는 쉬운 반면 기존 객체에 새 동작을 추가하기는 어렵다."),l3=i(),Gp=t("li"),e3=p("자료 구조는 동작 없이 자료를 노출한다. 기존 자료 구조에 새 동작을 추가하기 쉬우나, 기존 함수에 새 자료 구조를 추가하기는 어렵다."),p3=i(),Yp=t("li"),o3=p("시스템을 구현할때 새로운 자료 타입을 추가하는 유연셩이 필요하면 객체가 더 적합하다. 새로운 동작을 추가하는 유연성이 필요하면 절차적인 코드가 더 적합하다. 어느쪽이 맞는가는 상황에 따라 다르다."),$c=i(),bn=t("h1"),yt=t("a"),c3=p("7장 오류처리"),Bc=i(),wt=t("ul"),$p=t("li"),u3=p("깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),Xc=i(),Tn=t("h3"),Pt=t("a"),i3=p("오류 코드보다 예외를 사용하라"),Wc=i(),At=t("ul"),Bp=t("li"),r3=p("과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),Vc=i(),Sn=t("h3"),bt=t("a"),k3=p("Try-Catch-Finally 문부터 작성하라"),zc=i(),ys=t("ul"),Xp=t("li"),f3=p("예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),v3=i(),Wp=t("li"),_3=p("강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),Jc=i(),Un=t("h3"),Tt=t("a"),E3=p("미확인 예외를 사용하라"),Kc=i(),St=t("ul"),Vp=t("li"),d3=p("확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),Qc=i(),On=t("h3"),Ut=t("a"),h3=p("예외에 의미를 제공하라"),Zc=i(),Ot=t("ul"),zp=t("li"),L3=p("예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),gc=i(),Hn=t("h3"),Ht=t("a"),m3=p("호출자를 고려해 예외 클래스를 정의하라"),su=i(),Dt=t("ul"),Jp=t("li"),I3=p("오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),nu=i(),Dn=t("pre"),au=i(),Rt=t("ul"),Kp=t("li"),y3=p("위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),tu=i(),Rn=t("h3"),Ct=t("a"),w3=p("정상 흐름을 정의하라"),lu=i(),Mt=t("ul"),Qp=t("li"),P3=p(`앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다.
특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다.`),eu=i(),Cn=t("h3"),jt=t("a"),A3=p("null을 반환하지 마라"),pu=i(),Nt=t("ul"),Zp=t("li"),b3=p("null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),ou=i(),Mn=t("h3"),qt=t("a"),T3=p("null을 전달하지 마라"),cu=i(),xt=t("ul"),gp=t("li"),S3=p("NullpointException을 야기하는 코드는 만들지 말자"),uu=i(),jn=t("h3"),Ft=t("a"),U3=p("결론"),iu=i(),Gt=t("ul"),so=t("li"),O3=p("깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),ru=i(),Nn=t("h1"),Yt=t("a"),H3=p("8장 경계"),ku=i(),qn=t("h3"),$t=t("a"),D3=p("서드파티 코드 사용하기"),fu=i(),ws=t("ul"),no=t("li"),R3=p("인터페이스를 “제공하는” 입장과 “사용하는” 입장 사이에는 필연적인 긴장감이 존재한다."),C3=i(),ao=t("li"),M3=p("사용하는 입장에서 인터페이스의 변경을 우려한다면 래핑하는것도 하나의 방법이다."),vu=i(),xn=t("h3"),Bt=t("a"),j3=p("경계를 탐험하고 공부하기"),_u=i(),Ps=t("ul"),to=t("li"),N3=p("서드파티 코드를 사용할때 우리는 사용할 코드에 대해 테스트할 필요가 있다."),q3=i(),lo=t("li"),x3=p("log4j의 예"),Eu=i(),Fn=t("pre"),du=i(),Gn=t("h3"),Xt=t("a"),F3=p("아직 존재하지 않는 코드 사용하기"),hu=i(),As=t("ul"),eo=t("li"),G3=p("아직 개발되지 않은 모듈이 필요한데, 인터페이스를 정의하면 분업이 가능하다"),Y3=i(),po=t("li"),$3=p("인터페이스를 정의 함으로써 메인로직을 더 깔끔하게 짤 수 있다."),Lu=i(),Yn=t("h3"),Wt=t("a"),B3=p("Clean한 경계"),mu=i(),Vt=t("ul"),oo=t("li"),X3=p("좋은 소프트웨어는 변경에 유연하게 대처해야 한다. 내부 코드가 서드파티에 영향을 줄수 없게 래핑하듯 변경에 유연하게 대처할수 있는 경계를 만들어야 한다."),Iu=i(),$n=t("h1"),zt=t("a"),W3=p("9장 유닛테스트"),yu=i(),Jt=t("p"),V3=p("코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),wu=i(),Bn=t("h3"),Kt=t("a"),z3=p("The Three Laws of TDD"),Pu=i(),es=t("ul"),Qt=t("li"),co=t("strong"),J3=p("첫째 법칙:"),K3=p(" 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),Q3=i(),Zt=t("li"),uo=t("strong"),Z3=p("둘째 법칙:"),g3=p(" 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),sv=i(),gt=t("li"),io=t("strong"),nv=p("셋째 법칙:"),av=p(" 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),Au=i(),sl=t("p"),tv=p("위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),bu=i(),Xn=t("h3"),nl=t("a"),lv=p("깨끗한 테스트 코드 유지하기"),Tu=i(),C=t("ul"),ro=t("li"),ev=p("테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것"),pv=i(),ko=t("li"),ov=p("테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다"),cv=i(),fo=t("li"),vo=t("strong"),uv=p("코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),iv=i(),_o=t("li"),rv=p("테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다."),kv=i(),Eo=t("li"),fv=p("테스트 코드가 지저분하면 실제 코드도 망가진다"),Su=i(),Wn=t("h3"),al=t("a"),vv=p("깨끗한 테스트 코드"),Uu=i(),bs=t("ul"),Vn=t("li"),_v=p("깨끗한 코드를 만드려면 "),ho=t("strong"),Ev=p("가독성"),dv=p(" 이 필요하다"),hv=i(),Lo=t("li"),mo=t("strong"),Lv=p("BUILD-OPERATE-CHECK 패턴 → 테스트 자료 만들기, 자료 조작, 결과 확인"),Ou=i(),zn=t("pre"),Hu=i(),Jn=t("h3"),tl=t("a"),mv=p("도메인에 특화된 테스트 언어"),Du=i(),ll=t("ul"),Io=t("li"),Iv=p("시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),Ru=i(),Kn=t("h3"),el=t("a"),yv=p("이중 표준"),Cu=i(),pl=t("ul"),yo=t("li"),wv=p("테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),Mu=i(),Qn=t("pre"),ju=i(),Zn=t("pre"),Nu=i(),gn=t("h3"),ol=t("a"),Pv=p("테스트 당 assert 하나"),qu=i(),sa=t("pre"),xu=i(),Ts=t("ul"),wo=t("li"),Av=p("위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다"),bv=i(),Po=t("li"),Tv=p("이 부분은 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),Fu=i(),na=t("h3"),cl=t("a"),Sv=p("테스트당 개념 하나"),Gu=i(),aa=t("pre"),Yu=i(),Ss=t("ul"),ul=t("li"),Uv=p("테스트가 내포하는 의미"),ta=t("ul"),il=t("li"),Ov=p("(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),la=t("ol"),Ao=t("li"),Hv=p("(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),Dv=i(),bo=t("li"),Rv=p("두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),Cv=i(),rl=t("li"),Mv=p("(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),To=t("ol"),So=t("li"),jv=p("31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),Nv=i(),Uo=t("li"),qv=p("이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),$u=i(),ea=t("h3"),kl=t("a"),Oo=t("strong"),xv=p("F.I.R.S.T"),Bu=i(),fl=t("p"),Fv=p("테스트는 아래 5가지 요소를 충족해야 한다"),Xu=i(),M=t("ul"),Ho=t("li"),Do=t("strong"),Gv=p("빠르게Fast"),Yv=i(),Ro=t("li"),Co=t("strong"),$v=p("독립적으로Independent → 테스트간 의존관계가 있으면 안된다"),Bv=i(),Mo=t("li"),jo=t("strong"),Xv=p("반복가능하게Repeatable → 환경에 구애받지 않는"),Wv=i(),No=t("li"),qo=t("strong"),Vv=p("자가검증하는Self-Validating → 테스트가 스스로 bool로 결론나야 한다"),zv=i(),xo=t("li"),Fo=t("strong"),Jv=p("적시에Timely → 테스트 코드를 만들고 운영코드를 작성하라"),Wu=i(),pa=t("h3"),vl=t("a"),Kv=p("결론"),Vu=i(),Us=t("ul"),Go=t("li"),Qv=p("깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다"),Zv=i(),Yo=t("li"),gv=p("지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),this.h()},l(s){v=l(s,"H1",{id:!0});var c=e(v);E=l(c,"A",{href:!0});var x_=e(E);d=o(x_,"1장 깨끗한 코드"),x_.forEach(a),c.forEach(a),_=r(s),f=l(s,"UL",{});var _l=e(f);L=l(_l,"LI",{});var F_=e(L);x=o(F_,"빨리가는 유일한 방법은 언제나 코드를 깨끗하게 유지하는 습관이다."),F_.forEach(a),K=r(_l),y=l(_l,"LI",{});var s_=e(y);H=o(s_,"단순한 코드 규칙으로 구현을 시작하는법"),A=l(s_,"UL",{});var Os=e(A);Q=l(Os,"LI",{});var G_=e(Q);Cs=o(G_,"모든 테스트를 통과한다"),G_.forEach(a),Z=r(Os),g=l(Os,"LI",{});var Y_=e(g);Ms=o(Y_,"중복이 없다"),Y_.forEach(a),ss=r(Os),B=l(Os,"LI",{});var $_=e(B);_s=o($_,"시스템 내 모든 설계 아이디어를 표현한다"),$_.forEach(a),js=r(Os),X=l(Os,"LI",{});var B_=e(X);Ns=o(B_,"클래스, 메서드, 함수 등을 최대한 줄인다."),B_.forEach(a),Os.forEach(a),s_.forEach(a),F=r(_l),D=l(_l,"LI",{});var X_=e(D);w=o(X_,"캠프장을 처음 왔을 때 보다 더 깨끗하게 하고 떠나라"),X_.forEach(a),_l.forEach(a),b=r(s),N=l(s,"H1",{id:!0});var W_=e(N);W=l(W_,"A",{href:!0});var V_=e(W);ns=o(V_,"2장 의미있는 이름"),V_.forEach(a),W_.forEach(a),V=r(s),P=l(s,"UL",{});var O=e(P);Es=l(O,"LI",{});var z_=e(Es);oa=o(z_,"의도를 분명히 밝히자: 코드가 무엇을 의미하는지 독자로 하여금 납득이 되어야 한다."),z_.forEach(a),ca=r(O),Al=l(O,"LI",{});var J_=e(Al);Ai=o(J_,"그릇된 정보를 피하라: 변수나 함수 이름에 잘못된 정보를 포함시키지 말아야 한다. 다른 사람이 코드를 읽을 때 혼란을 줄 수 있으며, 잘못된 가정을 할 수도 있다."),J_.forEach(a),bi=r(O),bl=l(O,"LI",{});var K_=e(bl);Ti=o(K_,"의미 있게 구분하라: 변수나 함수 이름은 서로 다른 개념을 구분할 수 있도록 명확하고 일관성 있게 작성해야 한다. 혼란을 줄이고 코드의 가독성을 향상시킨다."),K_.forEach(a),Si=r(O),Tl=l(O,"LI",{});var Q_=e(Tl);Ui=o(Q_,"발음하기 쉬운 이름을 사용하라. 코드의 이름은 다른 사람들이 발음하기 쉽고 이해하기 쉽게 작성되어야 한다."),Q_.forEach(a),Oi=r(O),Sl=l(O,"LI",{});var Z_=e(Sl);Hi=o(Z_,"검색하기 쉬운 이름을 사용하라. 변수나 함수의 이름은 다른 사람들이 쉽게 검색할 수 있도록 작성되어야 한다. 명확하고 직관적인 이름을 선택하여 코드의 유지보수성을 높이는데 도움이 된다."),Z_.forEach(a),Di=r(O),Ul=l(O,"LI",{});var g_=e(Ul);Ri=o(g_,"인코딩을 피하라: 변수나 함수 이름에 인코딩을 사용하지 않는 것이 좋다. 의미 있는 이름을 사용하여 코드의 가독성을 높이는 것이 중요하다."),g_.forEach(a),Ci=r(O),Ol=l(O,"LI",{});var s2=e(Ol);Mi=o(s2,"자신의 기억력을 자랑하지 마라: 변수 이름을 자신만 아는 이름으로 변환하지 말아라."),s2.forEach(a),ji=r(O),Hl=l(O,"LI",{});var n2=e(Hl);Ni=o(n2,"불필요한 유머나 맥락을 벗어나는 명명법을 사용하지 말고 방법론에 의한 명명법을 쓰자."),n2.forEach(a),O.forEach(a),$o=r(s),qs=l(s,"H1",{id:!0});var a2=e(qs);ua=l(a2,"A",{href:!0});var t2=e(ua);qi=o(t2,"3장 함수"),t2.forEach(a),a2.forEach(a),Bo=r(s),xs=l(s,"H3",{id:!0});var l2=e(xs);ia=l(l2,"A",{href:!0});var e2=e(ia);xi=o(e2,"작게 만들어라"),e2.forEach(a),l2.forEach(a),Xo=r(s),ra=l(s,"UL",{});var p2=e(ra);Dl=l(p2,"LI",{});var o2=e(Dl);Fi=o(o2,"호출하는 함수 형식으로 함수는 짧을수록 좋다 2~3줄 내외면 더 좋다. 들여쓰기 구조도 1단이나 2단을 넘어서면 힘들어진다"),o2.forEach(a),p2.forEach(a),Wo=r(s),Fs=l(s,"H3",{id:!0});var c2=e(Fs);ka=l(c2,"A",{href:!0});var u2=e(ka);Gi=o(u2,"한 가지만 해라"),u2.forEach(a),c2.forEach(a),Vo=r(s),fa=l(s,"UL",{});var i2=e(fa);Rl=l(i2,"LI",{});var r2=e(Rl);Yi=o(r2,"추상화 단계에서 일을 하는 가짓수가 하나여야 한다 가령 다른 함수를 호출하는 함수가 존재한다면 그 함수는 한가지 일을 하고 있는것이다."),r2.forEach(a),i2.forEach(a),zo=r(s),Gs=l(s,"H3",{id:!0});var k2=e(Gs);va=l(k2,"A",{href:!0});var f2=e(va);$i=o(f2,"함수 당 추상화 수준은 하나로"),f2.forEach(a),k2.forEach(a),Jo=r(s),as=l(s,"UL",{});var El=e(as);Cl=l(El,"LI",{});var v2=e(Cl);Bi=o(v2,"한 함수내에 여러가지 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운 탓이다."),v2.forEach(a),Xi=r(El),Ml=l(El,"LI",{});var _2=e(Ml);Wi=o(_2,"내려가기 규칙을 활용하자 위에서 아래로 프로그램을 읽을수 있도록 함수 추상화 수준을 한단계씩 내려보자"),_2.forEach(a),Vi=r(El),_a=l(El,"LI",{});var n_=e(_a);zi=o(n_,"TO 설정 페이지와 해제 페이지를 포함라혀면, 설정 페이지를 폼학하고, 테스트 페이지 내용을 포함하고 해제 페이지를 포함한다."),is=l(n_,"UL",{});var dl=e(is);jl=l(dl,"LI",{});var E2=e(jl);Ji=o(E2,"To 설정 페이지를 포함하려면, 슈트이면 슈트 설정 페이지를 포함한 후 일반 설정 페이지를 포함한다."),E2.forEach(a),Ki=r(dl),Nl=l(dl,"LI",{});var d2=e(Nl);Qi=o(d2,"To 슈트 설정 페이지를 포함하려면, 부모 계층에서 SuiteSetUp 페이지를 찾아 Include문과 페이지 경로를 추가한다."),d2.forEach(a),Zi=r(dl),ql=l(dl,"LI",{});var h2=e(ql);gi=o(h2,"To 부모 계층을 검색하려면…"),h2.forEach(a),dl.forEach(a),n_.forEach(a),El.forEach(a),Ko=r(s),Ys=l(s,"H3",{id:!0});var L2=e(Ys);Ea=l(L2,"A",{href:!0});var m2=e(Ea);sr=o(m2,"Switch문"),m2.forEach(a),L2.forEach(a),Qo=r(s),da=l(s,"UL",{});var I2=e(da);xl=l(I2,"LI",{});var y2=e(xl);nr=o(y2,"스위치 문을 다형성 객체를 생성하는 코드 안에서 허용하고 상속관계로 숨기고 다른 코드에 노출하지 않는 방법이 있다."),y2.forEach(a),I2.forEach(a),Zo=r(s),$s=l(s,"H3",{id:!0});var w2=e($s);ha=l(w2,"A",{href:!0});var P2=e(ha);ar=o(P2,"서술적인 이름을 사용하라"),P2.forEach(a),w2.forEach(a),go=r(s),ds=l(s,"UL",{});var zu=e(ds);Fl=l(zu,"LI",{});var A2=e(Fl);tr=o(A2,"이름이 길어도 괜찮고 서술적인 이름이 짧고 어려운 이름보다 좋다. 함수 이름을 정할때 여러 단어가 쉽게 읽히는 명명법을 사용하는것이 좋다. 여러 단어를 사용해 함수 기능을 표현하라"),A2.forEach(a),lr=r(zu),Gl=l(zu,"LI",{});var b2=e(Gl);er=o(b2,"모듈 내에서 함수 이름은 같은 문구,명사,동사를 사용한다."),b2.forEach(a),zu.forEach(a),sc=r(s),Bs=l(s,"H3",{id:!0});var T2=e(Bs);La=l(T2,"A",{href:!0});var S2=e(La);pr=o(S2,"함수 인수"),S2.forEach(a),T2.forEach(a),nc=r(s),S=l(s,"UL",{});var Y=e(S);Yl=l(Y,"LI",{});var U2=e(Yl);or=o(U2,"함수에서 이상적인 인수 개수는 0개이다. 다음은 1개이고 다음은2개이다. 최선은 입력 인수가 없는 경우 ex: IncludeSetupPageInfo(new PageContent) → includeSetupPage()"),U2.forEach(a),cr=r(Y),ma=l(Y,"LI",{});var a_=e(ma);$l=l(a_,"EM",{});var O2=e($l);ur=o(O2,"많이쓰는 단항형식"),O2.forEach(a),Bl=l(a_,"UL",{});var H2=e(Bl);Ia=l(H2,"LI",{});var t_=e(Ia);ir=o(t_,"함수에 인수 1개를 넘기는 이유"),rs=l(t_,"OL",{});var hl=e(rs);Xl=l(hl,"LI",{});var D2=e(Xl);rr=o(D2,"인수에 질문을 던지는 경우"),D2.forEach(a),kr=r(hl),Wl=l(hl,"LI",{});var R2=e(Wl);fr=o(R2,"인수를 뭔가로 변환해 결과를 반환하는 경우"),R2.forEach(a),vr=r(hl),Vl=l(hl,"LI",{});var C2=e(Vl);_r=o(C2,"단항 함수 형식의 이벤트"),C2.forEach(a),hl.forEach(a),t_.forEach(a),H2.forEach(a),a_.forEach(a),Er=r(Y),zl=l(Y,"LI",{});var M2=e(zl);dr=o(M2,"플래그 인수는 추하다. 함수에 부울 값을 넘기는 관례는 차라리 인수별말고 상황별로 함수를 나누는 편이 좋다"),M2.forEach(a),hr=r(Y),ya=l(Y,"LI",{});var l_=e(ya);Jl=l(l_,"EM",{});var j2=e(Jl);Lr=o(j2,"이항함수"),j2.forEach(a),Kl=l(l_,"UL",{});var N2=e(Kl);Ql=l(N2,"LI",{});var q2=e(Ql);mr=o(q2,"인수가 2개인 함수는 1개인 함수보다 이해하기 어렵다. 프로그램을 짜다보면 불가피한 경우도 생기지만 그만큼 위험이 따른다"),q2.forEach(a),N2.forEach(a),l_.forEach(a),Ir=r(Y),wa=l(Y,"LI",{});var e_=e(wa);Zl=l(e_,"EM",{});var x2=e(Zl);yr=o(x2,"삼항함수"),x2.forEach(a),gl=l(e_,"UL",{});var F2=e(gl);se=l(F2,"LI",{});var G2=e(se);wr=o(G2,"삼항 함수부터는 신중히 고려해야 한다.."),G2.forEach(a),F2.forEach(a),e_.forEach(a),Pr=r(Y),Pa=l(Y,"LI",{});var p_=e(Pa);ne=l(p_,"EM",{});var Y2=e(ne);Ar=o(Y2,"동사와 키워드"),Y2.forEach(a),Xs=l(p_,"UL",{});var Ju=e(Xs);ae=l(Ju,"LI",{});var $2=e(ae);br=o($2,"단항 함수는 함수와 인수가 동사/명사 쌍을 이ㅝ야 한다."),$2.forEach(a),Tr=r(Ju),te=l(Ju,"LI",{});var B2=e(te);Sr=o(B2,"함수 이름에 키워드를 추가하는 편도 좋다"),B2.forEach(a),Ju.forEach(a),p_.forEach(a),Y.forEach(a),ac=r(s),Ws=l(s,"H3",{id:!0});var X2=e(Ws);Aa=l(X2,"A",{href:!0});var W2=e(Aa);Ur=o(W2,"부수 효과를 일으키지 마라"),W2.forEach(a),X2.forEach(a),tc=r(s),ba=l(s,"UL",{});var V2=e(ba);le=l(V2,"LI",{});var z2=e(le);Or=o(z2,"함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓을 하지 말아라!"),z2.forEach(a),V2.forEach(a),lc=r(s),Vs=l(s,"H3",{id:!0});var J2=e(Vs);Ta=l(J2,"A",{href:!0});var K2=e(Ta);Hr=o(K2,"명령과 조회를 분리하라!"),K2.forEach(a),J2.forEach(a),ec=r(s),Sa=l(s,"UL",{});var Q2=e(Sa);ee=l(Q2,"LI",{});var Z2=e(ee);Dr=o(Z2,"함수는 뭔가를 수행 하거나 뭔가에 답 하거나 둘중 하나만 해야한다. 둘 다 하면 안 된다. 객체 상태를 변경 하거나 아니면 객체 정보를 반환 하거나 둘 중 하나다."),Z2.forEach(a),Q2.forEach(a),pc=r(s),zs=l(s,"H3",{id:!0});var g2=e(zs);Ua=l(g2,"A",{href:!0});var sE=e(Ua);Rr=o(sE,"Try/Catch 블록은 한 함수에서 별도로 처리"),sE.forEach(a),g2.forEach(a),oc=r(s),Oa=l(s,"UL",{});var nE=e(Oa);pe=l(nE,"LI",{});var aE=e(pe);Cr=o(aE,"코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다."),aE.forEach(a),nE.forEach(a),cc=r(s),Js=l(s,"H3",{id:!0});var tE=e(Js);Ha=l(tE,"A",{href:!0});var lE=e(Ha);Mr=o(lE,"반복하지 마라"),lE.forEach(a),tE.forEach(a),uc=r(s),Da=l(s,"UL",{});var eE=e(Da);oe=l(eE,"LI",{});var pE=e(oe);jr=o(pE,"중복은 소트트웨어에서 모든 악의 근원이다. 많은 원칙과 기법이 중복을 없애거나 제어할 목적으로 나왔다."),pE.forEach(a),eE.forEach(a),ic=r(s),Ks=l(s,"H1",{id:!0});var oE=e(Ks);Ra=l(oE,"A",{href:!0});var cE=e(Ra);Nr=o(cE,"4장 주석"),cE.forEach(a),oE.forEach(a),rc=r(s),Ca=l(s,"P",{});var uE=e(Ca);qr=o(uE,`잘 달린 주석은 어떤 정보보다 유용하지만, 거짓말을 하는 경우가 많다. 일부가 여기서 저기로 옮겨지면서 발생하는 불상사
진실은 한 곳에만 존재한다. 바로 코드다 코드만이 자기가 하는 일을 진실되게 말한다.`),uE.forEach(a),kc=r(s),Qs=l(s,"H3",{id:!0});var iE=e(Qs);Ma=l(iE,"A",{href:!0});var rE=e(Ma);xr=o(rE,"주석은 나쁜 코드를 보완하지 못한다"),rE.forEach(a),iE.forEach(a),fc=r(s),ja=l(s,"UL",{});var kE=e(ja);ce=l(kE,"LI",{});var fE=e(ce);Fr=o(fE,"표현력이 풍부하고 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다."),fE.forEach(a),kE.forEach(a),vc=r(s),Zs=l(s,"H3",{id:!0});var vE=e(Zs);Na=l(vE,"A",{href:!0});var _E=e(Na);Gr=o(_E,"코드를 의도로 표현하라"),_E.forEach(a),vE.forEach(a),_c=r(s),qa=l(s,"UL",{});var EE=e(qa);ue=l(EE,"LI",{});var dE=e(ue);Yr=o(dE,"코드로 대다수 의도를 표현할수 있다 많은 경우 주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다."),dE.forEach(a),EE.forEach(a),Ec=r(s),gs=l(s,"H3",{id:!0});var hE=e(gs);xa=l(hE,"A",{href:!0});var LE=e(xa);$r=o(LE,"좋은 주석"),LE.forEach(a),hE.forEach(a),dc=r(s),U=l(s,"UL",{});var $=e(U);ie=l($,"LI",{});var mE=e(ie);Br=o(mE,"정말은 좋은 주석은 주석을 달지 않을 방법을 찾아낸 주석이라는 사실을 알아라"),mE.forEach(a),Xr=r($),re=l($,"LI",{});var IE=e(re);Wr=o(IE,`법적인 주석
각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보`),IE.forEach(a),Vr=r($),ke=l($,"LI",{});var yE=e(ke);zr=o(yE,`정보를 제공하는 주석
기본적인 정보를 주석으로 제공하면 편리하지만 그래도 함수 이름에 정보를 담는편이 좋다`),yE.forEach(a),Jr=r($),fe=l($,"LI",{});var wE=e(fe);Kr=o(wE,`의도를 설명하는 주석
두 객체를 비교하는 하는 코드가 있다고 가정했을때 저자의 의도를 보여주는 코드가 좋다`),wE.forEach(a),Qr=r($),ve=l($,"LI",{});var PE=e(ve);Zr=o(PE,`의미를 명료하게 밝히는 주석
일반적으로 인수나 반환값 자체를 명확하게 만들면 더 좋겠지만, 인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미를 명료하게 밝히는 주석이 유용하다.`),PE.forEach(a),gr=r($),_e=l($,"LI",{});var AE=e(_e);sk=o(AE,`ex
docs형..
결과를 경고하는 주석
TODO주석
중요성을 강조하는 주석`),AE.forEach(a),$.forEach(a),hc=r(s),sn=l(s,"H3",{id:!0});var bE=e(sn);Fa=l(bE,"A",{href:!0});var TE=e(Fa);nk=o(TE,"나쁜 주석"),TE.forEach(a),bE.forEach(a),Lc=r(s),h=l(s,"UL",{});var m=e(h);Ee=l(m,"LI",{});var SE=e(Ee);ak=o(SE,"주절거리는 주석: 저자에게만 의미가 있고 의사소통이 어려운 주석들"),SE.forEach(a),tk=r(m),de=l(m,"LI",{});var UE=e(de);lk=o(UE,"같은 이야기를 중복하는 주석: 주석이 코드보다 더 많은 정보를 제공하지 못하는 경우"),UE.forEach(a),ek=r(m),he=l(m,"LI",{});var OE=e(he);pk=o(OE,"오해할 여지가 있는 주석: 코드보다 읽기도 어려운 주석에 살짝 잘못된 정보를 포함한 경우"),OE.forEach(a),ok=r(m),Le=l(m,"LI",{});var HE=e(Le);ck=o(HE,"의무적으로 다는 주석: javadocs를 넣으라는 규칙이 낳은 아무가치없는 주석"),HE.forEach(a),uk=r(m),me=l(m,"LI",{});var DE=e(me);ik=o(DE,"이력을 기록하는 주석: git이 있으니 이제 없어도 된다"),DE.forEach(a),rk=r(m),Ie=l(m,"LI",{});var RE=e(Ie);kk=o(RE,"있으나 마나 한 주석: 너무 당연한 사실을 언급 가령 생성자를 알려주는 경우"),RE.forEach(a),fk=r(m),ye=l(m,"LI",{});var CE=e(ye);vk=o(CE,"위치를 표시하는 주석: 유용한 경우도 있지만 독자가 흔한 잡음으로 여겨 무시한다"),CE.forEach(a),_k=r(m),we=l(m,"LI",{});var ME=e(we);Ek=o(ME,"닫는 괄호에 다는 주석: 함수를 줄이는 편이 낫다."),ME.forEach(a),dk=r(m),Pe=l(m,"LI",{});var jE=e(Pe);hk=o(jE,"공로를 돌리거나 저자를 표시하는 주석: 이것도 git에 맡기자"),jE.forEach(a),Lk=r(m),Ae=l(m,"LI",{});var NE=e(Ae);mk=o(NE,"주석으로 처리한 코드: 주석으로 처리한 코드만큼 밉살스러운 관행도 드물다."),NE.forEach(a),Ik=r(m),be=l(m,"LI",{});var qE=e(be);yk=o(qE,"HTML 주석: 주석을 뽑아 웹페이지에 올릴 작정이라면 태그를 삽입해야 하는 책임은 프로그래머가 아니라 도구가 져야 맞다"),qE.forEach(a),wk=r(m),Te=l(m,"LI",{});var xE=e(Te);Pk=o(xE,"전역 정보: 상수 값은 코드와 주석이 전혀 통제할수 없다"),xE.forEach(a),Ak=r(m),Se=l(m,"LI",{});var FE=e(Se);bk=o(FE,"너무 많은 정보: 장황하게 늘어놓지 마라"),FE.forEach(a),Tk=r(m),Ue=l(m,"LI",{});var GE=e(Ue);Sk=o(GE,"모호한 관계: 주석과 주석이 설명하는 코드는 둘 사이에 관계가 명백해야 한다"),GE.forEach(a),Uk=r(m),Oe=l(m,"LI",{});var YE=e(Oe);Ok=o(YE,"함수 헤더: 짧은 함수는 긴 설명이 필요 없다. 짧고 한 가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다."),YE.forEach(a),Hk=r(m),He=l(m,"LI",{});var $E=e(He);Dk=o($E,"비공개 코드에서 Javadocs: 공개하지 않을 코드라면 자바독스는 쓸모가 없다"),$E.forEach(a),m.forEach(a),mc=r(s),nn=l(s,"H1",{id:!0});var BE=e(nn);Ga=l(BE,"A",{href:!0});var XE=e(Ga);Rk=o(XE,"5장 형식 맞추기"),XE.forEach(a),BE.forEach(a),Ic=r(s),Ya=l(s,"P",{});var WE=e(Ya);Ck=o(WE,"프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야 한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고 모두가 그 규칙을 따라야 한다."),WE.forEach(a),yc=r(s),an=l(s,"H3",{id:!0});var VE=e(an);$a=l(VE,"A",{href:!0});var zE=e($a);Mk=o(zE,"형식을 맞추는 목적"),zE.forEach(a),VE.forEach(a),wc=r(s),hs=l(s,"UL",{});var Ku=e(hs);De=l(Ku,"LI",{});var JE=e(De);jk=o(JE,"코드 형식은 매우 중요하다"),JE.forEach(a),Nk=r(Ku),Re=l(Ku,"LI",{});var KE=e(Re);qk=o(KE,"오늘 구현한 기능이 다음 버전에서 바뀔 확률은 아주 높다. 가독성이 바뀔 코드의 품질을 결정한다."),KE.forEach(a),Ku.forEach(a),Pc=r(s),tn=l(s,"H3",{id:!0});var QE=e(tn);Ba=l(QE,"A",{href:!0});var ZE=e(Ba);xk=o(ZE,"적절한 행 길이를 유지하라"),ZE.forEach(a),QE.forEach(a),Ac=r(s),G=l(s,"UL",{});var Hs=e(G);Ce=l(Hs,"LI",{});var gE=e(Ce);Fk=o(gE,"대다수가 500줄을 넘지 않고 대부분이 200줄 정도인 파일로도 커다란 시스템을 구축할수 있다."),gE.forEach(a),Gk=r(Hs),Xa=l(Hs,"LI",{});var o_=e(Xa);Yk=o(o_,"신문 기사처럼 작성하라"),z=l(o_,"UL",{});var Ds=e(z);Me=l(Ds,"LI",{});var sd=e(Me);$k=o(sd,"최상단 기사를 몇 마디로 요약하는 표제가 나오고, 첫 문단이 기사 내용을 요약한다."),sd.forEach(a),Bk=r(Ds),je=l(Ds,"LI",{});var nd=e(je);Xk=o(nd,"소스 파일도 이와 비슷하게 이름만 보고도 올바른 모듈을 판단 할 정도로 신경 써서 짓는다."),nd.forEach(a),Wk=r(Ds),Ne=l(Ds,"LI",{});var ad=e(Ne);Vk=o(ad,"소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명하고 아래로 내려갈수록 세세하게 묘사한다."),ad.forEach(a),zk=r(Ds),qe=l(Ds,"LI",{});var td=e(qe);Jk=o(td,"신문은 다양한 기사로 이뤄진다. 대다수 기사가 아주 짧고 날짜, 이름들을 뒤섞은 긴 기사 하나만 싣는다면 아무도 읽지 않을것이다."),td.forEach(a),Ds.forEach(a),o_.forEach(a),Kk=r(Hs),Wa=l(Hs,"LI",{});var c_=e(Wa);Qk=o(c_,"개념은 빈 행으로 분리하라"),ln=l(c_,"UL",{});var Qu=e(ln);xe=l(Qu,"LI",{});var ld=e(xe);Zk=o(ld,"모든 코드는 왼쪽에서 오른쪽으로 그리고 위에서 아래로 읽힌다."),ld.forEach(a),gk=r(Qu),Fe=l(Qu,"LI",{});var ed=e(Fe);sf=o(ed,"일련의 행 묶음은 완결된 생각 하나를 표현한다."),ed.forEach(a),Qu.forEach(a),c_.forEach(a),nf=r(Hs),Va=l(Hs,"LI",{});var u_=e(Va);af=o(u_,"세로 밀집도"),Ge=l(u_,"UL",{});var pd=e(Ge);Ye=l(pd,"LI",{});var od=e(Ye);tf=o(od,"줄바꿈이 개념을 분리한다면 세로 밀집도는 연광성을 의미한다. 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다는 뜻이다."),od.forEach(a),pd.forEach(a),u_.forEach(a),Hs.forEach(a),bc=r(s),en=l(s,"PRE",{class:!0});var a5=e(en);a5.forEach(a),Tc=r(s),Ls=l(s,"UL",{});var Zu=e(Ls);za=l(Zu,"LI",{});var i_=e(za);lf=o(i_,"수직 거리"),q=l(i_,"UL",{});var ps=e(q);$e=l(ps,"LI",{});var cd=e($e);ef=o(cd,"서로 밀접한 개념은 세로로 가까이 둬야 한다. 물론 두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않는다. 하지만 타당한 근거 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다."),cd.forEach(a),pf=r(ps),Ja=l(ps,"LI",{});var r_=e(Ja);of=o(r_,"변수선언 위치"),pn=l(r_,"UL",{});var gu=e(pn);Be=l(gu,"LI",{});var ud=e(Be);cf=o(ud,"사용하는 위치에 최대한 가까이 선언한다. 우리가 만든 함수는 매우 짧으므로 지역 변수는 각 함수 맨 처음에 선언한다."),ud.forEach(a),uf=r(gu),Xe=l(gu,"LI",{});var id=e(Xe);rf=o(id,"루프를 제어하는 변수는 흔히 루프문 내부에 선언한다. (아주 드물지만 블록 상단이나 루프 직전에 선언하는 사례도 있다)"),id.forEach(a),gu.forEach(a),r_.forEach(a),kf=r(ps),Ka=l(ps,"LI",{});var k_=e(Ka);ff=o(k_,"인스턴스 변수"),We=l(k_,"UL",{});var rd=e(We);Ve=l(rd,"LI",{});var kd=e(Ve);vf=o(kd,"클래스 맨 처음에 선언한다."),kd.forEach(a),rd.forEach(a),k_.forEach(a),_f=r(ps),Qa=l(ps,"LI",{});var f_=e(Qa);Ef=o(f_,"종속 함수"),ze=l(f_,"UL",{});var fd=e(ze);Je=l(fd,"LI",{});var vd=e(Je);df=o(vd,"한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다."),vd.forEach(a),fd.forEach(a),f_.forEach(a),hf=r(ps),Za=l(ps,"LI",{});var v_=e(Za);Lf=o(v_,"개념적 유사성"),on=l(v_,"UL",{});var si=e(on);Ke=l(si,"LI",{});var _d=e(Ke);mf=o(_d,"친화도가 높을수록 코드를 가까이 배치한다."),_d.forEach(a),If=r(si),Qe=l(si,"LI",{});var Ed=e(Qe);yf=o(Ed,"친화도가 높은 요인은 한 함수가 다른 함수를 호출해 생기는 종속성이 생기는 경우나 명명법이 똑가톡 기본 기능이 유사한 경우"),Ed.forEach(a),si.forEach(a),v_.forEach(a),ps.forEach(a),i_.forEach(a),wf=r(Zu),ga=l(Zu,"LI",{});var __=e(ga);Pf=o(__,"세로 순서"),cn=l(__,"UL",{});var ni=e(cn);Ze=l(ni,"LI",{});var dd=e(Ze);Af=o(dd,"가장 중요한 개념을 가장 먼저 표현한다."),dd.forEach(a),bf=r(ni),ge=l(ni,"LI",{});var hd=e(ge);Tf=o(hd,"세세한 사항을 최대한 배제한다."),hd.forEach(a),ni.forEach(a),__.forEach(a),Zu.forEach(a),Sc=r(s),un=l(s,"PRE",{class:!0});var t5=e(un);t5.forEach(a),Uc=r(s),rn=l(s,"H3",{id:!0});var Ld=e(rn);st=l(Ld,"A",{href:!0});var md=e(st);Sf=o(md,"가로 형식 맞추기"),md.forEach(a),Ld.forEach(a),Oc=r(s),T=l(s,"UL",{});var j=e(T);sp=l(j,"LI",{});var Id=e(sp);Uf=o(Id,"기존 오픈소스 코드들은 60자 이상부터 떨어진다. 프로그래머는 명백하게 짧은 행을 선호한다."),Id.forEach(a),Of=r(j),np=l(j,"LI",{});var yd=e(np);Hf=o(yd,"100자나 120자에 달해도 나쁘지 않지만 그 이상은 솔직히 주의 부족이다."),yd.forEach(a),Df=r(j),ap=l(j,"LI",{});var wd=e(ap);Rf=o(wd,"가로 공백과 밀집도 가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다."),wd.forEach(a),Cf=r(j),nt=l(j,"LI",{});var E_=e(nt);Mf=o(E_,"가로 정렬"),kn=l(E_,"UL",{});var ai=e(kn);tp=l(ai,"LI",{});var Pd=e(tp);jf=o(Pd,"코드의 변수값을 강조하기 위해 가로공백을 넣지 말아라 ide에서 다 잡힌다"),Pd.forEach(a),Nf=r(ai),lp=l(ai,"LI",{});var Ad=e(lp);qf=o(Ad,"선언부가 길고 강조할게 많다면 클래스를 쪼개야 한다는 의미이다."),Ad.forEach(a),ai.forEach(a),E_.forEach(a),xf=r(j),at=l(j,"LI",{});var d_=e(at);Ff=o(d_,"들여쓰기"),fn=l(d_,"UL",{});var ti=e(fn);ep=l(ti,"LI",{});var bd=e(ep);Gf=o(bd,"들여쓰기 자체가 윤곽도를 보여준다"),bd.forEach(a),Yf=r(ti),pp=l(ti,"LI",{});var Td=e(pp);$f=o(Td,"들여쓰기한 파일은 구조가 한눈에 들어온더. 변수, 생성자 함수, 접근자 함수, 메서드가 금방 보인다."),Td.forEach(a),ti.forEach(a),d_.forEach(a),Bf=r(j),op=l(j,"LI",{});var Sd=e(op);Xf=o(Sd,"때로는 간단한 if, while, 짧은 함수에서 들여쓰기를 무시하고픈 유혹이 생긴다. 원점으로 돌아가도록 하자"),Sd.forEach(a),Wf=r(j),tt=l(j,"LI",{});var h_=e(tt);Vf=o(h_,"팀 규칙"),cp=l(h_,"UL",{});var Ud=e(cp);up=l(Ud,"LI",{});var Od=e(up);zf=o(Od,"팀은 한 가지 규칙에 합의해야 한다. 그리고 모든 팀원은 그 규칙을 따라야 한다."),Od.forEach(a),Ud.forEach(a),h_.forEach(a),j.forEach(a),Hc=r(s),vn=l(s,"H1",{id:!0});var Hd=e(vn);lt=l(Hd,"A",{href:!0});var Dd=e(lt);Jf=o(Dd,"6장 객체와 자료구조"),Dd.forEach(a),Hd.forEach(a),Dc=r(s),et=l(s,"P",{});var Rd=e(et);Kf=o(Rd,"변수를 비공개로 정의 하는 이유는 남들이 변수에 의존하지 않게 만들고 싶어서다."),Rd.forEach(a),Rc=r(s),_n=l(s,"H3",{id:!0});var Cd=e(_n);pt=l(Cd,"A",{href:!0});var Md=e(pt);Qf=o(Md,"자료 추상화"),Md.forEach(a),Cd.forEach(a),Cc=r(s),ms=l(s,"UL",{});var li=e(ms);ip=l(li,"LI",{});var jd=e(ip);Zf=o(jd,"변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필요하다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다."),jd.forEach(a),gf=r(li),rp=l(li,"LI",{});var Nd=e(rp);s1=o(Nd,"개발자는 객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다."),Nd.forEach(a),li.forEach(a),Mc=r(s),En=l(s,"H3",{id:!0});var qd=e(En);ot=l(qd,"A",{href:!0});var xd=e(ot);n1=o(xd,"자료/객체 비대칭"),xd.forEach(a),qd.forEach(a),jc=r(s),Is=l(s,"UL",{});var ei=e(Is);ct=l(ei,"LI",{});var L_=e(ct);a1=o(L_,"객체와 자료 구조는 근본적으로 양분된다."),ks=l(L_,"UL",{});var Ll=e(ks);kp=l(Ll,"LI",{});var Fd=e(kp);t1=o(Fd,"절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 슆다."),Fd.forEach(a),l1=r(Ll),fp=l(Ll,"LI",{});var Gd=e(fp);e1=o(Gd,"절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야 한다."),Gd.forEach(a),p1=r(Ll),vp=l(Ll,"LI",{});var Yd=e(vp);o1=o(Yd,"둘다 참이다. 다시말해 객체 지향코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다."),Yd.forEach(a),Ll.forEach(a),L_.forEach(a),c1=r(ei),ut=l(ei,"LI",{});var m_=e(ut);u1=o(m_,"예시"),dn=l(m_,"UL",{});var pi=e(dn);hn=l(pi,"LI",{});var oi=e(hn);_p=l(oi,"P",{});var $d=e(_p);i1=o($d,"절차적인 접근예시"),$d.forEach(a),r1=r(oi),it=l(oi,"PRE",{class:!0});var l5=e(it);l5.forEach(a),oi.forEach(a),k1=r(pi),Ln=l(pi,"LI",{});var ci=e(Ln);Ep=l(ci,"P",{});var Bd=e(Ep);f1=o(Bd,"다형성 접근예시"),Bd.forEach(a),v1=r(ci),rt=l(ci,"PRE",{class:!0});var e5=e(rt);e5.forEach(a),ci.forEach(a),pi.forEach(a),m_.forEach(a),ei.forEach(a),Nc=r(s),mn=l(s,"H3",{id:!0});var Xd=e(mn);kt=l(Xd,"A",{href:!0});var Wd=e(kt);_1=o(Wd,"디미터 법칙"),Wd.forEach(a),Xd.forEach(a),qc=r(s),R=l(s,"UL",{});var os=e(R);dp=l(os,"LI",{});var Vd=e(dp);E1=o(Vd,"모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다."),Vd.forEach(a),d1=r(os),ft=l(os,"LI",{});var I_=e(ft);h1=o(I_,"클래스 C의 메서드 f는 다음과 같은 메서드만 호출해야 한다"),J=l(I_,"UL",{});var Rs=e(J);hp=l(Rs,"LI",{});var zd=e(hp);L1=o(zd,"클래스 C"),zd.forEach(a),m1=r(Rs),Lp=l(Rs,"LI",{});var Jd=e(Lp);I1=o(Jd,"f가 생성한 객체"),Jd.forEach(a),y1=r(Rs),mp=l(Rs,"LI",{});var Kd=e(mp);w1=o(Kd,"f 인수로 넘어온 객체"),Kd.forEach(a),P1=r(Rs),Ip=l(Rs,"LI",{});var Qd=e(Ip);A1=o(Qd,"C 인스턴스 변수에 저장된 객체"),Qd.forEach(a),Rs.forEach(a),I_.forEach(a),b1=r(os),vt=l(os,"LI",{});var y_=e(vt);T1=o(y_,"기차 충돌"),fs=l(y_,"UL",{});var ml=e(fs);_t=l(ml,"LI",{});var w_=e(_t);S1=o(w_,"as-is"),yp=l(w_,"UL",{});var Zd=e(yp);wp=l(Zd,"LI",{});var gd=e(wp);Pp=l(gd,"STRONG",{});var sh=e(Pp);U1=o(sh,"final String outputDir = ctext.getOptions().getScracthDir().getAbsolutePath();"),sh.forEach(a),gd.forEach(a),Zd.forEach(a),w_.forEach(a),O1=r(ml),Et=l(ml,"LI",{});var P_=e(Et);H1=o(P_,"to-be"),Ap=l(P_,"UL",{});var nh=e(Ap);bp=l(nh,"LI",{});var ah=e(bp);Tp=l(ah,"STRONG",{});var th=e(Tp);D1=o(th,`Options opts = ctxt.getOptions();
File scractchDir = opts.getScratchDir();
final String outputDir = scracthDir.getAbsolutePath();`),th.forEach(a),ah.forEach(a),nh.forEach(a),P_.forEach(a),R1=r(ml),Sp=l(ml,"LI",{});var lh=e(Sp);C1=o(lh,"객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 자료구조 라면 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다."),lh.forEach(a),ml.forEach(a),y_.forEach(a),M1=r(os),dt=l(os,"LI",{});var A_=e(dt);j1=o(A_,"잡종 구조"),In=l(A_,"UL",{});var ui=e(In);Up=l(ui,"LI",{});var eh=e(Up);N1=o(eh,"절반은 객체, 절반은 자료 구조인 잡종 구조가 나온다."),eh.forEach(a),q1=r(ui),Op=l(ui,"LI",{});var ph=e(Op);x1=o(ph,"이런 잡종 구조는 새로운 함수는 물론이고 새로운 자료 구조도 추가하기 어렵다. 단점만 모아놓은 구조"),ph.forEach(a),ui.forEach(a),A_.forEach(a),F1=r(os),ht=l(os,"LI",{});var b_=e(ht);G1=o(b_,"구조체 감추기"),vs=l(b_,"UL",{});var Il=e(vs);Hp=l(Il,"LI",{});var oh=e(Hp);Y1=o(oh,"그렇다면 임시 디렉토러의 절대 경로는 어떻게 얻어야 좋을까?"),oh.forEach(a),$1=r(Il),Dp=l(Il,"LI",{});var ch=e(Dp);B1=o(ch,`ctxt.getAboslutePathOfScratchDirectoryOption(); → ctxt 객체에 공개해야 하는 메서드가 너무 많아진다
ctx.getScratchDirectoryOption().getAbsolutePath(); → 자료 구조를 반환 한다고 가정한다.`),ch.forEach(a),X1=r(Il),Rp=l(Il,"LI",{});var uh=e(Rp);W1=o(uh,`그렇다면 ctxt 객체에 임시 파일을 생성하라고 시키면 어떨까?
BufferedOutputStream bos = ctxt.createScratchFilesStream(classFileName);
객체에게 맡기기에 적당한 임무로 보인다!`),uh.forEach(a),Il.forEach(a),b_.forEach(a),os.forEach(a),xc=r(s),yn=l(s,"H3",{id:!0});var ih=e(yn);Lt=l(ih,"A",{href:!0});var rh=e(Lt);V1=o(rh,"자료 전달 객체"),rh.forEach(a),ih.forEach(a),Fc=r(s),ts=l(s,"UL",{});var yl=e(ts);Cp=l(yl,"LI",{});var kh=e(Cp);Mp=l(kh,"P",{});var fh=e(Mp);z1=o(fh,"자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스이다. 이런 자료구조체를 DTO(Data Transfer Object)라 한다."),fh.forEach(a),kh.forEach(a),J1=r(yl),wn=l(yl,"LI",{});var ii=e(wn);jp=l(ii,"P",{});var vh=e(jp);K1=o(vh,"좀더 일반적인 형태는 Bean 구조이다. 비공개 변수를 조회 설정 함수로 조작하는 방식. 사이비 캡슐화로 일부 순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다."),vh.forEach(a),Q1=r(ii),mt=l(ii,"PRE",{class:!0});var p5=e(mt);p5.forEach(a),ii.forEach(a),Z1=r(yl),Pn=l(yl,"LI",{});var ri=e(Pn);Np=l(ri,"P",{});var _h=e(Np);g1=o(_h,"활성 레코드"),_h.forEach(a),s3=r(ri),qp=l(ri,"UL",{});var Eh=e(qp);xp=l(Eh,"LI",{});var dh=e(xp);n3=o(dh,"공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료구조, 대게 save나 find와 같이 탐색함수도 제공한다. 불행히도 비즈니스 규칙 메서드를 추가해 이런 자료 구조를 개체로 취급하는 개발자가 흔하다. 하지만 이는 바람직하지 않다. 활성 레코드는 자료 구조로 취급한다."),dh.forEach(a),Eh.forEach(a),ri.forEach(a),yl.forEach(a),Gc=r(s),An=l(s,"H3",{id:!0});var hh=e(An);It=l(hh,"A",{href:!0});var Lh=e(It);a3=o(Lh,"결론"),Lh.forEach(a),hh.forEach(a),Yc=r(s),ls=l(s,"UL",{});var wl=e(ls);Fp=l(wl,"LI",{});var mh=e(Fp);t3=o(mh,"객체는 동작을 공개하고 자료를 숨긴다. 기존 동작을 변경하지 않으면서 객체 타입을 추가하기는 쉬운 반면 기존 객체에 새 동작을 추가하기는 어렵다."),mh.forEach(a),l3=r(wl),Gp=l(wl,"LI",{});var Ih=e(Gp);e3=o(Ih,"자료 구조는 동작 없이 자료를 노출한다. 기존 자료 구조에 새 동작을 추가하기 쉬우나, 기존 함수에 새 자료 구조를 추가하기는 어렵다."),Ih.forEach(a),p3=r(wl),Yp=l(wl,"LI",{});var yh=e(Yp);o3=o(yh,"시스템을 구현할때 새로운 자료 타입을 추가하는 유연셩이 필요하면 객체가 더 적합하다. 새로운 동작을 추가하는 유연성이 필요하면 절차적인 코드가 더 적합하다. 어느쪽이 맞는가는 상황에 따라 다르다."),yh.forEach(a),wl.forEach(a),$c=r(s),bn=l(s,"H1",{id:!0});var wh=e(bn);yt=l(wh,"A",{href:!0});var Ph=e(yt);c3=o(Ph,"7장 오류처리"),Ph.forEach(a),wh.forEach(a),Bc=r(s),wt=l(s,"UL",{});var Ah=e(wt);$p=l(Ah,"LI",{});var bh=e($p);u3=o(bh,"깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),bh.forEach(a),Ah.forEach(a),Xc=r(s),Tn=l(s,"H3",{id:!0});var Th=e(Tn);Pt=l(Th,"A",{href:!0});var Sh=e(Pt);i3=o(Sh,"오류 코드보다 예외를 사용하라"),Sh.forEach(a),Th.forEach(a),Wc=r(s),At=l(s,"UL",{});var Uh=e(At);Bp=l(Uh,"LI",{});var Oh=e(Bp);r3=o(Oh,"과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),Oh.forEach(a),Uh.forEach(a),Vc=r(s),Sn=l(s,"H3",{id:!0});var Hh=e(Sn);bt=l(Hh,"A",{href:!0});var Dh=e(bt);k3=o(Dh,"Try-Catch-Finally 문부터 작성하라"),Dh.forEach(a),Hh.forEach(a),zc=r(s),ys=l(s,"UL",{});var ki=e(ys);Xp=l(ki,"LI",{});var Rh=e(Xp);f3=o(Rh,"예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),Rh.forEach(a),v3=r(ki),Wp=l(ki,"LI",{});var Ch=e(Wp);_3=o(Ch,"강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),Ch.forEach(a),ki.forEach(a),Jc=r(s),Un=l(s,"H3",{id:!0});var Mh=e(Un);Tt=l(Mh,"A",{href:!0});var jh=e(Tt);E3=o(jh,"미확인 예외를 사용하라"),jh.forEach(a),Mh.forEach(a),Kc=r(s),St=l(s,"UL",{});var Nh=e(St);Vp=l(Nh,"LI",{});var qh=e(Vp);d3=o(qh,"확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),qh.forEach(a),Nh.forEach(a),Qc=r(s),On=l(s,"H3",{id:!0});var xh=e(On);Ut=l(xh,"A",{href:!0});var Fh=e(Ut);h3=o(Fh,"예외에 의미를 제공하라"),Fh.forEach(a),xh.forEach(a),Zc=r(s),Ot=l(s,"UL",{});var Gh=e(Ot);zp=l(Gh,"LI",{});var Yh=e(zp);L3=o(Yh,"예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),Yh.forEach(a),Gh.forEach(a),gc=r(s),Hn=l(s,"H3",{id:!0});var $h=e(Hn);Ht=l($h,"A",{href:!0});var Bh=e(Ht);m3=o(Bh,"호출자를 고려해 예외 클래스를 정의하라"),Bh.forEach(a),$h.forEach(a),su=r(s),Dt=l(s,"UL",{});var Xh=e(Dt);Jp=l(Xh,"LI",{});var Wh=e(Jp);I3=o(Wh,"오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),Wh.forEach(a),Xh.forEach(a),nu=r(s),Dn=l(s,"PRE",{class:!0});var o5=e(Dn);o5.forEach(a),au=r(s),Rt=l(s,"UL",{});var Vh=e(Rt);Kp=l(Vh,"LI",{});var zh=e(Kp);y3=o(zh,"위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),zh.forEach(a),Vh.forEach(a),tu=r(s),Rn=l(s,"H3",{id:!0});var Jh=e(Rn);Ct=l(Jh,"A",{href:!0});var Kh=e(Ct);w3=o(Kh,"정상 흐름을 정의하라"),Kh.forEach(a),Jh.forEach(a),lu=r(s),Mt=l(s,"UL",{});var Qh=e(Mt);Qp=l(Qh,"LI",{});var Zh=e(Qp);P3=o(Zh,`앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다.
특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다.`),Zh.forEach(a),Qh.forEach(a),eu=r(s),Cn=l(s,"H3",{id:!0});var gh=e(Cn);jt=l(gh,"A",{href:!0});var s4=e(jt);A3=o(s4,"null을 반환하지 마라"),s4.forEach(a),gh.forEach(a),pu=r(s),Nt=l(s,"UL",{});var n4=e(Nt);Zp=l(n4,"LI",{});var a4=e(Zp);b3=o(a4,"null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),a4.forEach(a),n4.forEach(a),ou=r(s),Mn=l(s,"H3",{id:!0});var t4=e(Mn);qt=l(t4,"A",{href:!0});var l4=e(qt);T3=o(l4,"null을 전달하지 마라"),l4.forEach(a),t4.forEach(a),cu=r(s),xt=l(s,"UL",{});var e4=e(xt);gp=l(e4,"LI",{});var p4=e(gp);S3=o(p4,"NullpointException을 야기하는 코드는 만들지 말자"),p4.forEach(a),e4.forEach(a),uu=r(s),jn=l(s,"H3",{id:!0});var o4=e(jn);Ft=l(o4,"A",{href:!0});var c4=e(Ft);U3=o(c4,"결론"),c4.forEach(a),o4.forEach(a),iu=r(s),Gt=l(s,"UL",{});var u4=e(Gt);so=l(u4,"LI",{});var i4=e(so);O3=o(i4,"깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),i4.forEach(a),u4.forEach(a),ru=r(s),Nn=l(s,"H1",{id:!0});var r4=e(Nn);Yt=l(r4,"A",{href:!0});var k4=e(Yt);H3=o(k4,"8장 경계"),k4.forEach(a),r4.forEach(a),ku=r(s),qn=l(s,"H3",{id:!0});var f4=e(qn);$t=l(f4,"A",{href:!0});var v4=e($t);D3=o(v4,"서드파티 코드 사용하기"),v4.forEach(a),f4.forEach(a),fu=r(s),ws=l(s,"UL",{});var fi=e(ws);no=l(fi,"LI",{});var _4=e(no);R3=o(_4,"인터페이스를 “제공하는” 입장과 “사용하는” 입장 사이에는 필연적인 긴장감이 존재한다."),_4.forEach(a),C3=r(fi),ao=l(fi,"LI",{});var E4=e(ao);M3=o(E4,"사용하는 입장에서 인터페이스의 변경을 우려한다면 래핑하는것도 하나의 방법이다."),E4.forEach(a),fi.forEach(a),vu=r(s),xn=l(s,"H3",{id:!0});var d4=e(xn);Bt=l(d4,"A",{href:!0});var h4=e(Bt);j3=o(h4,"경계를 탐험하고 공부하기"),h4.forEach(a),d4.forEach(a),_u=r(s),Ps=l(s,"UL",{});var vi=e(Ps);to=l(vi,"LI",{});var L4=e(to);N3=o(L4,"서드파티 코드를 사용할때 우리는 사용할 코드에 대해 테스트할 필요가 있다."),L4.forEach(a),q3=r(vi),lo=l(vi,"LI",{});var m4=e(lo);x3=o(m4,"log4j의 예"),m4.forEach(a),vi.forEach(a),Eu=r(s),Fn=l(s,"PRE",{class:!0});var c5=e(Fn);c5.forEach(a),du=r(s),Gn=l(s,"H3",{id:!0});var I4=e(Gn);Xt=l(I4,"A",{href:!0});var y4=e(Xt);F3=o(y4,"아직 존재하지 않는 코드 사용하기"),y4.forEach(a),I4.forEach(a),hu=r(s),As=l(s,"UL",{});var _i=e(As);eo=l(_i,"LI",{});var w4=e(eo);G3=o(w4,"아직 개발되지 않은 모듈이 필요한데, 인터페이스를 정의하면 분업이 가능하다"),w4.forEach(a),Y3=r(_i),po=l(_i,"LI",{});var P4=e(po);$3=o(P4,"인터페이스를 정의 함으로써 메인로직을 더 깔끔하게 짤 수 있다."),P4.forEach(a),_i.forEach(a),Lu=r(s),Yn=l(s,"H3",{id:!0});var A4=e(Yn);Wt=l(A4,"A",{href:!0});var b4=e(Wt);B3=o(b4,"Clean한 경계"),b4.forEach(a),A4.forEach(a),mu=r(s),Vt=l(s,"UL",{});var T4=e(Vt);oo=l(T4,"LI",{});var S4=e(oo);X3=o(S4,"좋은 소프트웨어는 변경에 유연하게 대처해야 한다. 내부 코드가 서드파티에 영향을 줄수 없게 래핑하듯 변경에 유연하게 대처할수 있는 경계를 만들어야 한다."),S4.forEach(a),T4.forEach(a),Iu=r(s),$n=l(s,"H1",{id:!0});var U4=e($n);zt=l(U4,"A",{href:!0});var O4=e(zt);W3=o(O4,"9장 유닛테스트"),O4.forEach(a),U4.forEach(a),yu=r(s),Jt=l(s,"P",{});var H4=e(Jt);V3=o(H4,"코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),H4.forEach(a),wu=r(s),Bn=l(s,"H3",{id:!0});var D4=e(Bn);Kt=l(D4,"A",{href:!0});var R4=e(Kt);z3=o(R4,"The Three Laws of TDD"),R4.forEach(a),D4.forEach(a),Pu=r(s),es=l(s,"UL",{});var Pl=e(es);Qt=l(Pl,"LI",{});var T_=e(Qt);co=l(T_,"STRONG",{});var C4=e(co);J3=o(C4,"첫째 법칙:"),C4.forEach(a),K3=o(T_," 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),T_.forEach(a),Q3=r(Pl),Zt=l(Pl,"LI",{});var S_=e(Zt);uo=l(S_,"STRONG",{});var M4=e(uo);Z3=o(M4,"둘째 법칙:"),M4.forEach(a),g3=o(S_," 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),S_.forEach(a),sv=r(Pl),gt=l(Pl,"LI",{});var U_=e(gt);io=l(U_,"STRONG",{});var j4=e(io);nv=o(j4,"셋째 법칙:"),j4.forEach(a),av=o(U_," 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),U_.forEach(a),Pl.forEach(a),Au=r(s),sl=l(s,"P",{});var N4=e(sl);tv=o(N4,"위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),N4.forEach(a),bu=r(s),Xn=l(s,"H3",{id:!0});var q4=e(Xn);nl=l(q4,"A",{href:!0});var x4=e(nl);lv=o(x4,"깨끗한 테스트 코드 유지하기"),x4.forEach(a),q4.forEach(a),Tu=r(s),C=l(s,"UL",{});var cs=e(C);ro=l(cs,"LI",{});var F4=e(ro);ev=o(F4,"테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것"),F4.forEach(a),pv=r(cs),ko=l(cs,"LI",{});var G4=e(ko);ov=o(G4,"테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다"),G4.forEach(a),cv=r(cs),fo=l(cs,"LI",{});var Y4=e(fo);vo=l(Y4,"STRONG",{});var $4=e(vo);uv=o($4,"코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),$4.forEach(a),Y4.forEach(a),iv=r(cs),_o=l(cs,"LI",{});var B4=e(_o);rv=o(B4,"테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다."),B4.forEach(a),kv=r(cs),Eo=l(cs,"LI",{});var X4=e(Eo);fv=o(X4,"테스트 코드가 지저분하면 실제 코드도 망가진다"),X4.forEach(a),cs.forEach(a),Su=r(s),Wn=l(s,"H3",{id:!0});var W4=e(Wn);al=l(W4,"A",{href:!0});var V4=e(al);vv=o(V4,"깨끗한 테스트 코드"),V4.forEach(a),W4.forEach(a),Uu=r(s),bs=l(s,"UL",{});var Ei=e(bs);Vn=l(Ei,"LI",{});var di=e(Vn);_v=o(di,"깨끗한 코드를 만드려면 "),ho=l(di,"STRONG",{});var z4=e(ho);Ev=o(z4,"가독성"),z4.forEach(a),dv=o(di," 이 필요하다"),di.forEach(a),hv=r(Ei),Lo=l(Ei,"LI",{});var J4=e(Lo);mo=l(J4,"STRONG",{});var K4=e(mo);Lv=o(K4,"BUILD-OPERATE-CHECK 패턴 → 테스트 자료 만들기, 자료 조작, 결과 확인"),K4.forEach(a),J4.forEach(a),Ei.forEach(a),Ou=r(s),zn=l(s,"PRE",{class:!0});var u5=e(zn);u5.forEach(a),Hu=r(s),Jn=l(s,"H3",{id:!0});var Q4=e(Jn);tl=l(Q4,"A",{href:!0});var Z4=e(tl);mv=o(Z4,"도메인에 특화된 테스트 언어"),Z4.forEach(a),Q4.forEach(a),Du=r(s),ll=l(s,"UL",{});var g4=e(ll);Io=l(g4,"LI",{});var sL=e(Io);Iv=o(sL,"시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),sL.forEach(a),g4.forEach(a),Ru=r(s),Kn=l(s,"H3",{id:!0});var nL=e(Kn);el=l(nL,"A",{href:!0});var aL=e(el);yv=o(aL,"이중 표준"),aL.forEach(a),nL.forEach(a),Cu=r(s),pl=l(s,"UL",{});var tL=e(pl);yo=l(tL,"LI",{});var lL=e(yo);wv=o(lL,"테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),lL.forEach(a),tL.forEach(a),Mu=r(s),Qn=l(s,"PRE",{class:!0});var i5=e(Qn);i5.forEach(a),ju=r(s),Zn=l(s,"PRE",{class:!0});var r5=e(Zn);r5.forEach(a),Nu=r(s),gn=l(s,"H3",{id:!0});var eL=e(gn);ol=l(eL,"A",{href:!0});var pL=e(ol);Pv=o(pL,"테스트 당 assert 하나"),pL.forEach(a),eL.forEach(a),qu=r(s),sa=l(s,"PRE",{class:!0});var k5=e(sa);k5.forEach(a),xu=r(s),Ts=l(s,"UL",{});var hi=e(Ts);wo=l(hi,"LI",{});var oL=e(wo);Av=o(oL,"위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다"),oL.forEach(a),bv=r(hi),Po=l(hi,"LI",{});var cL=e(Po);Tv=o(cL,"이 부분은 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),cL.forEach(a),hi.forEach(a),Fu=r(s),na=l(s,"H3",{id:!0});var uL=e(na);cl=l(uL,"A",{href:!0});var iL=e(cl);Sv=o(iL,"테스트당 개념 하나"),iL.forEach(a),uL.forEach(a),Gu=r(s),aa=l(s,"PRE",{class:!0});var f5=e(aa);f5.forEach(a),Yu=r(s),Ss=l(s,"UL",{});var Li=e(Ss);ul=l(Li,"LI",{});var O_=e(ul);Uv=o(O_,"테스트가 내포하는 의미"),ta=l(O_,"UL",{});var mi=e(ta);il=l(mi,"LI",{});var H_=e(il);Ov=o(H_,"(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),la=l(H_,"OL",{});var Ii=e(la);Ao=l(Ii,"LI",{});var rL=e(Ao);Hv=o(rL,"(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),rL.forEach(a),Dv=r(Ii),bo=l(Ii,"LI",{});var kL=e(bo);Rv=o(kL,"두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),kL.forEach(a),Ii.forEach(a),H_.forEach(a),Cv=r(mi),rl=l(mi,"LI",{});var D_=e(rl);Mv=o(D_,"(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),To=l(D_,"OL",{});var fL=e(To);So=l(fL,"LI",{});var vL=e(So);jv=o(vL,"31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),vL.forEach(a),fL.forEach(a),D_.forEach(a),mi.forEach(a),O_.forEach(a),Nv=r(Li),Uo=l(Li,"LI",{});var _L=e(Uo);qv=o(_L,"이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),_L.forEach(a),Li.forEach(a),$u=r(s),ea=l(s,"H3",{id:!0});var EL=e(ea);kl=l(EL,"A",{href:!0});var dL=e(kl);Oo=l(dL,"STRONG",{});var hL=e(Oo);xv=o(hL,"F.I.R.S.T"),hL.forEach(a),dL.forEach(a),EL.forEach(a),Bu=r(s),fl=l(s,"P",{});var LL=e(fl);Fv=o(LL,"테스트는 아래 5가지 요소를 충족해야 한다"),LL.forEach(a),Xu=r(s),M=l(s,"UL",{});var us=e(M);Ho=l(us,"LI",{});var mL=e(Ho);Do=l(mL,"STRONG",{});var IL=e(Do);Gv=o(IL,"빠르게Fast"),IL.forEach(a),mL.forEach(a),Yv=r(us),Ro=l(us,"LI",{});var yL=e(Ro);Co=l(yL,"STRONG",{});var wL=e(Co);$v=o(wL,"독립적으로Independent → 테스트간 의존관계가 있으면 안된다"),wL.forEach(a),yL.forEach(a),Bv=r(us),Mo=l(us,"LI",{});var PL=e(Mo);jo=l(PL,"STRONG",{});var AL=e(jo);Xv=o(AL,"반복가능하게Repeatable → 환경에 구애받지 않는"),AL.forEach(a),PL.forEach(a),Wv=r(us),No=l(us,"LI",{});var bL=e(No);qo=l(bL,"STRONG",{});var TL=e(qo);Vv=o(TL,"자가검증하는Self-Validating → 테스트가 스스로 bool로 결론나야 한다"),TL.forEach(a),bL.forEach(a),zv=r(us),xo=l(us,"LI",{});var SL=e(xo);Fo=l(SL,"STRONG",{});var UL=e(Fo);Jv=o(UL,"적시에Timely → 테스트 코드를 만들고 운영코드를 작성하라"),UL.forEach(a),SL.forEach(a),us.forEach(a),Wu=r(s),pa=l(s,"H3",{id:!0});var OL=e(pa);vl=l(OL,"A",{href:!0});var HL=e(vl);Kv=o(HL,"결론"),HL.forEach(a),OL.forEach(a),Vu=r(s),Us=l(s,"UL",{});var yi=e(Us);Go=l(yi,"LI",{});var DL=e(Go);Qv=o(DL,"깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다"),DL.forEach(a),Zv=r(yi),Yo=l(yi,"LI",{});var RL=e(Yo);gv=o(RL,"지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),RL.forEach(a),yi.forEach(a),this.h()},h(){k(E,"href","#1장-깨끗한-코드"),k(v,"id","1장-깨끗한-코드"),k(W,"href","#2장-의미있는-이름"),k(N,"id","2장-의미있는-이름"),k(ua,"href","#3장-함수"),k(qs,"id","3장-함수"),k(ia,"href","#작게-만들어라"),k(xs,"id","작게-만들어라"),k(ka,"href","#한-가지만-해라"),k(Fs,"id","한-가지만-해라"),k(va,"href","#함수-당-추상화-수준은-하나로"),k(Gs,"id","함수-당-추상화-수준은-하나로"),k(Ea,"href","#switch문"),k(Ys,"id","switch문"),k(ha,"href","#서술적인-이름을-사용하라"),k($s,"id","서술적인-이름을-사용하라"),k(La,"href","#함수-인수"),k(Bs,"id","함수-인수"),k(Aa,"href","#부수-효과를-일으키지-마라"),k(Ws,"id","부수-효과를-일으키지-마라"),k(Ta,"href","#명령과-조회를-분리하라"),k(Vs,"id","명령과-조회를-분리하라"),k(Ua,"href","#trycatch-블록은-한-함수에서-별도로-처리"),k(zs,"id","trycatch-블록은-한-함수에서-별도로-처리"),k(Ha,"href","#반복하지-마라"),k(Js,"id","반복하지-마라"),k(Ra,"href","#4장-주석"),k(Ks,"id","4장-주석"),k(Ma,"href","#주석은-나쁜-코드를-보완하지-못한다"),k(Qs,"id","주석은-나쁜-코드를-보완하지-못한다"),k(Na,"href","#코드를-의도로-표현하라"),k(Zs,"id","코드를-의도로-표현하라"),k(xa,"href","#좋은-주석"),k(gs,"id","좋은-주석"),k(Fa,"href","#나쁜-주석"),k(sn,"id","나쁜-주석"),k(Ga,"href","#5장-형식-맞추기"),k(nn,"id","5장-형식-맞추기"),k($a,"href","#형식을-맞추는-목적"),k(an,"id","형식을-맞추는-목적"),k(Ba,"href","#적절한-행-길이를-유지하라"),k(tn,"id","적절한-행-길이를-유지하라"),k(en,"class","language-java"),k(un,"class","language-java"),k(st,"href","#가로-형식-맞추기"),k(rn,"id","가로-형식-맞추기"),k(lt,"href","#6장-객체와-자료구조"),k(vn,"id","6장-객체와-자료구조"),k(pt,"href","#자료-추상화"),k(_n,"id","자료-추상화"),k(ot,"href","#자료객체-비대칭"),k(En,"id","자료객체-비대칭"),k(it,"class","language-java"),k(rt,"class","language-java"),k(kt,"href","#디미터-법칙"),k(mn,"id","디미터-법칙"),k(Lt,"href","#자료-전달-객체"),k(yn,"id","자료-전달-객체"),k(mt,"class","language-java"),k(It,"href","#결론"),k(An,"id","결론"),k(yt,"href","#7장-오류처리"),k(bn,"id","7장-오류처리"),k(Pt,"href","#오류-코드보다-예외를-사용하라"),k(Tn,"id","오류-코드보다-예외를-사용하라"),k(bt,"href","#try-catch-finally-문부터-작성하라"),k(Sn,"id","try-catch-finally-문부터-작성하라"),k(Tt,"href","#미확인-예외를-사용하라"),k(Un,"id","미확인-예외를-사용하라"),k(Ut,"href","#예외에-의미를-제공하라"),k(On,"id","예외에-의미를-제공하라"),k(Ht,"href","#호출자를-고려해-예외-클래스를-정의하라"),k(Hn,"id","호출자를-고려해-예외-클래스를-정의하라"),k(Dn,"class","language-java"),k(Ct,"href","#정상-흐름을-정의하라"),k(Rn,"id","정상-흐름을-정의하라"),k(jt,"href","#null을-반환하지-마라"),k(Cn,"id","null을-반환하지-마라"),k(qt,"href","#null을-전달하지-마라"),k(Mn,"id","null을-전달하지-마라"),k(Ft,"href","#결론-1"),k(jn,"id","결론-1"),k(Yt,"href","#8장-경계"),k(Nn,"id","8장-경계"),k($t,"href","#서드파티-코드-사용하기"),k(qn,"id","서드파티-코드-사용하기"),k(Bt,"href","#경계를-탐험하고-공부하기"),k(xn,"id","경계를-탐험하고-공부하기"),k(Fn,"class","language-java"),k(Xt,"href","#아직-존재하지-않는-코드-사용하기"),k(Gn,"id","아직-존재하지-않는-코드-사용하기"),k(Wt,"href","#clean한-경계"),k(Yn,"id","clean한-경계"),k(zt,"href","#9장-유닛테스트"),k($n,"id","9장-유닛테스트"),k(Kt,"href","#the-three-laws-of-tdd"),k(Bn,"id","the-three-laws-of-tdd"),k(nl,"href","#깨끗한-테스트-코드-유지하기"),k(Xn,"id","깨끗한-테스트-코드-유지하기"),k(al,"href","#깨끗한-테스트-코드"),k(Wn,"id","깨끗한-테스트-코드"),k(zn,"class","language-java"),k(tl,"href","#도메인에-특화된-테스트-언어"),k(Jn,"id","도메인에-특화된-테스트-언어"),k(el,"href","#이중-표준"),k(Kn,"id","이중-표준"),k(Qn,"class","language-java"),k(Zn,"class","language-java"),k(ol,"href","#테스트-당-assert-하나"),k(gn,"id","테스트-당-assert-하나"),k(sa,"class","language-java"),k(cl,"href","#테스트당-개념-하나"),k(na,"id","테스트당-개념-하나"),k(aa,"class","language-java"),k(kl,"href","#first"),k(ea,"id","first"),k(vl,"href","#결론-2"),k(pa,"id","결론-2")},m(s,c){u(s,v,c),n(v,E),n(E,d),u(s,_,c),u(s,f,c),n(f,L),n(L,x),n(f,K),n(f,y),n(y,H),n(y,A),n(A,Q),n(Q,Cs),n(A,Z),n(A,g),n(g,Ms),n(A,ss),n(A,B),n(B,_s),n(A,js),n(A,X),n(X,Ns),n(f,F),n(f,D),n(D,w),u(s,b,c),u(s,N,c),n(N,W),n(W,ns),u(s,V,c),u(s,P,c),n(P,Es),n(Es,oa),n(P,ca),n(P,Al),n(Al,Ai),n(P,bi),n(P,bl),n(bl,Ti),n(P,Si),n(P,Tl),n(Tl,Ui),n(P,Oi),n(P,Sl),n(Sl,Hi),n(P,Di),n(P,Ul),n(Ul,Ri),n(P,Ci),n(P,Ol),n(Ol,Mi),n(P,ji),n(P,Hl),n(Hl,Ni),u(s,$o,c),u(s,qs,c),n(qs,ua),n(ua,qi),u(s,Bo,c),u(s,xs,c),n(xs,ia),n(ia,xi),u(s,Xo,c),u(s,ra,c),n(ra,Dl),n(Dl,Fi),u(s,Wo,c),u(s,Fs,c),n(Fs,ka),n(ka,Gi),u(s,Vo,c),u(s,fa,c),n(fa,Rl),n(Rl,Yi),u(s,zo,c),u(s,Gs,c),n(Gs,va),n(va,$i),u(s,Jo,c),u(s,as,c),n(as,Cl),n(Cl,Bi),n(as,Xi),n(as,Ml),n(Ml,Wi),n(as,Vi),n(as,_a),n(_a,zi),n(_a,is),n(is,jl),n(jl,Ji),n(is,Ki),n(is,Nl),n(Nl,Qi),n(is,Zi),n(is,ql),n(ql,gi),u(s,Ko,c),u(s,Ys,c),n(Ys,Ea),n(Ea,sr),u(s,Qo,c),u(s,da,c),n(da,xl),n(xl,nr),u(s,Zo,c),u(s,$s,c),n($s,ha),n(ha,ar),u(s,go,c),u(s,ds,c),n(ds,Fl),n(Fl,tr),n(ds,lr),n(ds,Gl),n(Gl,er),u(s,sc,c),u(s,Bs,c),n(Bs,La),n(La,pr),u(s,nc,c),u(s,S,c),n(S,Yl),n(Yl,or),n(S,cr),n(S,ma),n(ma,$l),n($l,ur),n(ma,Bl),n(Bl,Ia),n(Ia,ir),n(Ia,rs),n(rs,Xl),n(Xl,rr),n(rs,kr),n(rs,Wl),n(Wl,fr),n(rs,vr),n(rs,Vl),n(Vl,_r),n(S,Er),n(S,zl),n(zl,dr),n(S,hr),n(S,ya),n(ya,Jl),n(Jl,Lr),n(ya,Kl),n(Kl,Ql),n(Ql,mr),n(S,Ir),n(S,wa),n(wa,Zl),n(Zl,yr),n(wa,gl),n(gl,se),n(se,wr),n(S,Pr),n(S,Pa),n(Pa,ne),n(ne,Ar),n(Pa,Xs),n(Xs,ae),n(ae,br),n(Xs,Tr),n(Xs,te),n(te,Sr),u(s,ac,c),u(s,Ws,c),n(Ws,Aa),n(Aa,Ur),u(s,tc,c),u(s,ba,c),n(ba,le),n(le,Or),u(s,lc,c),u(s,Vs,c),n(Vs,Ta),n(Ta,Hr),u(s,ec,c),u(s,Sa,c),n(Sa,ee),n(ee,Dr),u(s,pc,c),u(s,zs,c),n(zs,Ua),n(Ua,Rr),u(s,oc,c),u(s,Oa,c),n(Oa,pe),n(pe,Cr),u(s,cc,c),u(s,Js,c),n(Js,Ha),n(Ha,Mr),u(s,uc,c),u(s,Da,c),n(Da,oe),n(oe,jr),u(s,ic,c),u(s,Ks,c),n(Ks,Ra),n(Ra,Nr),u(s,rc,c),u(s,Ca,c),n(Ca,qr),u(s,kc,c),u(s,Qs,c),n(Qs,Ma),n(Ma,xr),u(s,fc,c),u(s,ja,c),n(ja,ce),n(ce,Fr),u(s,vc,c),u(s,Zs,c),n(Zs,Na),n(Na,Gr),u(s,_c,c),u(s,qa,c),n(qa,ue),n(ue,Yr),u(s,Ec,c),u(s,gs,c),n(gs,xa),n(xa,$r),u(s,dc,c),u(s,U,c),n(U,ie),n(ie,Br),n(U,Xr),n(U,re),n(re,Wr),n(U,Vr),n(U,ke),n(ke,zr),n(U,Jr),n(U,fe),n(fe,Kr),n(U,Qr),n(U,ve),n(ve,Zr),n(U,gr),n(U,_e),n(_e,sk),u(s,hc,c),u(s,sn,c),n(sn,Fa),n(Fa,nk),u(s,Lc,c),u(s,h,c),n(h,Ee),n(Ee,ak),n(h,tk),n(h,de),n(de,lk),n(h,ek),n(h,he),n(he,pk),n(h,ok),n(h,Le),n(Le,ck),n(h,uk),n(h,me),n(me,ik),n(h,rk),n(h,Ie),n(Ie,kk),n(h,fk),n(h,ye),n(ye,vk),n(h,_k),n(h,we),n(we,Ek),n(h,dk),n(h,Pe),n(Pe,hk),n(h,Lk),n(h,Ae),n(Ae,mk),n(h,Ik),n(h,be),n(be,yk),n(h,wk),n(h,Te),n(Te,Pk),n(h,Ak),n(h,Se),n(Se,bk),n(h,Tk),n(h,Ue),n(Ue,Sk),n(h,Uk),n(h,Oe),n(Oe,Ok),n(h,Hk),n(h,He),n(He,Dk),u(s,mc,c),u(s,nn,c),n(nn,Ga),n(Ga,Rk),u(s,Ic,c),u(s,Ya,c),n(Ya,Ck),u(s,yc,c),u(s,an,c),n(an,$a),n($a,Mk),u(s,wc,c),u(s,hs,c),n(hs,De),n(De,jk),n(hs,Nk),n(hs,Re),n(Re,qk),u(s,Pc,c),u(s,tn,c),n(tn,Ba),n(Ba,xk),u(s,Ac,c),u(s,G,c),n(G,Ce),n(Ce,Fk),n(G,Gk),n(G,Xa),n(Xa,Yk),n(Xa,z),n(z,Me),n(Me,$k),n(z,Bk),n(z,je),n(je,Xk),n(z,Wk),n(z,Ne),n(Ne,Vk),n(z,zk),n(z,qe),n(qe,Jk),n(G,Kk),n(G,Wa),n(Wa,Qk),n(Wa,ln),n(ln,xe),n(xe,Zk),n(ln,gk),n(ln,Fe),n(Fe,sf),n(G,nf),n(G,Va),n(Va,af),n(Va,Ge),n(Ge,Ye),n(Ye,tf),u(s,bc,c),u(s,en,c),en.innerHTML=BL,u(s,Tc,c),u(s,Ls,c),n(Ls,za),n(za,lf),n(za,q),n(q,$e),n($e,ef),n(q,pf),n(q,Ja),n(Ja,of),n(Ja,pn),n(pn,Be),n(Be,cf),n(pn,uf),n(pn,Xe),n(Xe,rf),n(q,kf),n(q,Ka),n(Ka,ff),n(Ka,We),n(We,Ve),n(Ve,vf),n(q,_f),n(q,Qa),n(Qa,Ef),n(Qa,ze),n(ze,Je),n(Je,df),n(q,hf),n(q,Za),n(Za,Lf),n(Za,on),n(on,Ke),n(Ke,mf),n(on,If),n(on,Qe),n(Qe,yf),n(Ls,wf),n(Ls,ga),n(ga,Pf),n(ga,cn),n(cn,Ze),n(Ze,Af),n(cn,bf),n(cn,ge),n(ge,Tf),u(s,Sc,c),u(s,un,c),un.innerHTML=XL,u(s,Uc,c),u(s,rn,c),n(rn,st),n(st,Sf),u(s,Oc,c),u(s,T,c),n(T,sp),n(sp,Uf),n(T,Of),n(T,np),n(np,Hf),n(T,Df),n(T,ap),n(ap,Rf),n(T,Cf),n(T,nt),n(nt,Mf),n(nt,kn),n(kn,tp),n(tp,jf),n(kn,Nf),n(kn,lp),n(lp,qf),n(T,xf),n(T,at),n(at,Ff),n(at,fn),n(fn,ep),n(ep,Gf),n(fn,Yf),n(fn,pp),n(pp,$f),n(T,Bf),n(T,op),n(op,Xf),n(T,Wf),n(T,tt),n(tt,Vf),n(tt,cp),n(cp,up),n(up,zf),u(s,Hc,c),u(s,vn,c),n(vn,lt),n(lt,Jf),u(s,Dc,c),u(s,et,c),n(et,Kf),u(s,Rc,c),u(s,_n,c),n(_n,pt),n(pt,Qf),u(s,Cc,c),u(s,ms,c),n(ms,ip),n(ip,Zf),n(ms,gf),n(ms,rp),n(rp,s1),u(s,Mc,c),u(s,En,c),n(En,ot),n(ot,n1),u(s,jc,c),u(s,Is,c),n(Is,ct),n(ct,a1),n(ct,ks),n(ks,kp),n(kp,t1),n(ks,l1),n(ks,fp),n(fp,e1),n(ks,p1),n(ks,vp),n(vp,o1),n(Is,c1),n(Is,ut),n(ut,u1),n(ut,dn),n(dn,hn),n(hn,_p),n(_p,i1),n(hn,r1),n(hn,it),it.innerHTML=WL,n(dn,k1),n(dn,Ln),n(Ln,Ep),n(Ep,f1),n(Ln,v1),n(Ln,rt),rt.innerHTML=VL,u(s,Nc,c),u(s,mn,c),n(mn,kt),n(kt,_1),u(s,qc,c),u(s,R,c),n(R,dp),n(dp,E1),n(R,d1),n(R,ft),n(ft,h1),n(ft,J),n(J,hp),n(hp,L1),n(J,m1),n(J,Lp),n(Lp,I1),n(J,y1),n(J,mp),n(mp,w1),n(J,P1),n(J,Ip),n(Ip,A1),n(R,b1),n(R,vt),n(vt,T1),n(vt,fs),n(fs,_t),n(_t,S1),n(_t,yp),n(yp,wp),n(wp,Pp),n(Pp,U1),n(fs,O1),n(fs,Et),n(Et,H1),n(Et,Ap),n(Ap,bp),n(bp,Tp),n(Tp,D1),n(fs,R1),n(fs,Sp),n(Sp,C1),n(R,M1),n(R,dt),n(dt,j1),n(dt,In),n(In,Up),n(Up,N1),n(In,q1),n(In,Op),n(Op,x1),n(R,F1),n(R,ht),n(ht,G1),n(ht,vs),n(vs,Hp),n(Hp,Y1),n(vs,$1),n(vs,Dp),n(Dp,B1),n(vs,X1),n(vs,Rp),n(Rp,W1),u(s,xc,c),u(s,yn,c),n(yn,Lt),n(Lt,V1),u(s,Fc,c),u(s,ts,c),n(ts,Cp),n(Cp,Mp),n(Mp,z1),n(ts,J1),n(ts,wn),n(wn,jp),n(jp,K1),n(wn,Q1),n(wn,mt),mt.innerHTML=zL,n(ts,Z1),n(ts,Pn),n(Pn,Np),n(Np,g1),n(Pn,s3),n(Pn,qp),n(qp,xp),n(xp,n3),u(s,Gc,c),u(s,An,c),n(An,It),n(It,a3),u(s,Yc,c),u(s,ls,c),n(ls,Fp),n(Fp,t3),n(ls,l3),n(ls,Gp),n(Gp,e3),n(ls,p3),n(ls,Yp),n(Yp,o3),u(s,$c,c),u(s,bn,c),n(bn,yt),n(yt,c3),u(s,Bc,c),u(s,wt,c),n(wt,$p),n($p,u3),u(s,Xc,c),u(s,Tn,c),n(Tn,Pt),n(Pt,i3),u(s,Wc,c),u(s,At,c),n(At,Bp),n(Bp,r3),u(s,Vc,c),u(s,Sn,c),n(Sn,bt),n(bt,k3),u(s,zc,c),u(s,ys,c),n(ys,Xp),n(Xp,f3),n(ys,v3),n(ys,Wp),n(Wp,_3),u(s,Jc,c),u(s,Un,c),n(Un,Tt),n(Tt,E3),u(s,Kc,c),u(s,St,c),n(St,Vp),n(Vp,d3),u(s,Qc,c),u(s,On,c),n(On,Ut),n(Ut,h3),u(s,Zc,c),u(s,Ot,c),n(Ot,zp),n(zp,L3),u(s,gc,c),u(s,Hn,c),n(Hn,Ht),n(Ht,m3),u(s,su,c),u(s,Dt,c),n(Dt,Jp),n(Jp,I3),u(s,nu,c),u(s,Dn,c),Dn.innerHTML=JL,u(s,au,c),u(s,Rt,c),n(Rt,Kp),n(Kp,y3),u(s,tu,c),u(s,Rn,c),n(Rn,Ct),n(Ct,w3),u(s,lu,c),u(s,Mt,c),n(Mt,Qp),n(Qp,P3),u(s,eu,c),u(s,Cn,c),n(Cn,jt),n(jt,A3),u(s,pu,c),u(s,Nt,c),n(Nt,Zp),n(Zp,b3),u(s,ou,c),u(s,Mn,c),n(Mn,qt),n(qt,T3),u(s,cu,c),u(s,xt,c),n(xt,gp),n(gp,S3),u(s,uu,c),u(s,jn,c),n(jn,Ft),n(Ft,U3),u(s,iu,c),u(s,Gt,c),n(Gt,so),n(so,O3),u(s,ru,c),u(s,Nn,c),n(Nn,Yt),n(Yt,H3),u(s,ku,c),u(s,qn,c),n(qn,$t),n($t,D3),u(s,fu,c),u(s,ws,c),n(ws,no),n(no,R3),n(ws,C3),n(ws,ao),n(ao,M3),u(s,vu,c),u(s,xn,c),n(xn,Bt),n(Bt,j3),u(s,_u,c),u(s,Ps,c),n(Ps,to),n(to,N3),n(Ps,q3),n(Ps,lo),n(lo,x3),u(s,Eu,c),u(s,Fn,c),Fn.innerHTML=KL,u(s,du,c),u(s,Gn,c),n(Gn,Xt),n(Xt,F3),u(s,hu,c),u(s,As,c),n(As,eo),n(eo,G3),n(As,Y3),n(As,po),n(po,$3),u(s,Lu,c),u(s,Yn,c),n(Yn,Wt),n(Wt,B3),u(s,mu,c),u(s,Vt,c),n(Vt,oo),n(oo,X3),u(s,Iu,c),u(s,$n,c),n($n,zt),n(zt,W3),u(s,yu,c),u(s,Jt,c),n(Jt,V3),u(s,wu,c),u(s,Bn,c),n(Bn,Kt),n(Kt,z3),u(s,Pu,c),u(s,es,c),n(es,Qt),n(Qt,co),n(co,J3),n(Qt,K3),n(es,Q3),n(es,Zt),n(Zt,uo),n(uo,Z3),n(Zt,g3),n(es,sv),n(es,gt),n(gt,io),n(io,nv),n(gt,av),u(s,Au,c),u(s,sl,c),n(sl,tv),u(s,bu,c),u(s,Xn,c),n(Xn,nl),n(nl,lv),u(s,Tu,c),u(s,C,c),n(C,ro),n(ro,ev),n(C,pv),n(C,ko),n(ko,ov),n(C,cv),n(C,fo),n(fo,vo),n(vo,uv),n(C,iv),n(C,_o),n(_o,rv),n(C,kv),n(C,Eo),n(Eo,fv),u(s,Su,c),u(s,Wn,c),n(Wn,al),n(al,vv),u(s,Uu,c),u(s,bs,c),n(bs,Vn),n(Vn,_v),n(Vn,ho),n(ho,Ev),n(Vn,dv),n(bs,hv),n(bs,Lo),n(Lo,mo),n(mo,Lv),u(s,Ou,c),u(s,zn,c),zn.innerHTML=QL,u(s,Hu,c),u(s,Jn,c),n(Jn,tl),n(tl,mv),u(s,Du,c),u(s,ll,c),n(ll,Io),n(Io,Iv),u(s,Ru,c),u(s,Kn,c),n(Kn,el),n(el,yv),u(s,Cu,c),u(s,pl,c),n(pl,yo),n(yo,wv),u(s,Mu,c),u(s,Qn,c),Qn.innerHTML=ZL,u(s,ju,c),u(s,Zn,c),Zn.innerHTML=gL,u(s,Nu,c),u(s,gn,c),n(gn,ol),n(ol,Pv),u(s,qu,c),u(s,sa,c),sa.innerHTML=s5,u(s,xu,c),u(s,Ts,c),n(Ts,wo),n(wo,Av),n(Ts,bv),n(Ts,Po),n(Po,Tv),u(s,Fu,c),u(s,na,c),n(na,cl),n(cl,Sv),u(s,Gu,c),u(s,aa,c),aa.innerHTML=n5,u(s,Yu,c),u(s,Ss,c),n(Ss,ul),n(ul,Uv),n(ul,ta),n(ta,il),n(il,Ov),n(il,la),n(la,Ao),n(Ao,Hv),n(la,Dv),n(la,bo),n(bo,Rv),n(ta,Cv),n(ta,rl),n(rl,Mv),n(rl,To),n(To,So),n(So,jv),n(Ss,Nv),n(Ss,Uo),n(Uo,qv),u(s,$u,c),u(s,ea,c),n(ea,kl),n(kl,Oo),n(Oo,xv),u(s,Bu,c),u(s,fl,c),n(fl,Fv),u(s,Xu,c),u(s,M,c),n(M,Ho),n(Ho,Do),n(Do,Gv),n(M,Yv),n(M,Ro),n(Ro,Co),n(Co,$v),n(M,Bv),n(M,Mo),n(Mo,jo),n(jo,Xv),n(M,Wv),n(M,No),n(No,qo),n(qo,Vv),n(M,zv),n(M,xo),n(xo,Fo),n(Fo,Jv),u(s,Wu,c),u(s,pa,c),n(pa,vl),n(vl,Kv),u(s,Vu,c),u(s,Us,c),n(Us,Go),n(Go,Qv),n(Us,Zv),n(Us,Yo),n(Yo,gv)},p:d5,d(s){s&&a(v),s&&a(_),s&&a(f),s&&a(b),s&&a(N),s&&a(V),s&&a(P),s&&a($o),s&&a(qs),s&&a(Bo),s&&a(xs),s&&a(Xo),s&&a(ra),s&&a(Wo),s&&a(Fs),s&&a(Vo),s&&a(fa),s&&a(zo),s&&a(Gs),s&&a(Jo),s&&a(as),s&&a(Ko),s&&a(Ys),s&&a(Qo),s&&a(da),s&&a(Zo),s&&a($s),s&&a(go),s&&a(ds),s&&a(sc),s&&a(Bs),s&&a(nc),s&&a(S),s&&a(ac),s&&a(Ws),s&&a(tc),s&&a(ba),s&&a(lc),s&&a(Vs),s&&a(ec),s&&a(Sa),s&&a(pc),s&&a(zs),s&&a(oc),s&&a(Oa),s&&a(cc),s&&a(Js),s&&a(uc),s&&a(Da),s&&a(ic),s&&a(Ks),s&&a(rc),s&&a(Ca),s&&a(kc),s&&a(Qs),s&&a(fc),s&&a(ja),s&&a(vc),s&&a(Zs),s&&a(_c),s&&a(qa),s&&a(Ec),s&&a(gs),s&&a(dc),s&&a(U),s&&a(hc),s&&a(sn),s&&a(Lc),s&&a(h),s&&a(mc),s&&a(nn),s&&a(Ic),s&&a(Ya),s&&a(yc),s&&a(an),s&&a(wc),s&&a(hs),s&&a(Pc),s&&a(tn),s&&a(Ac),s&&a(G),s&&a(bc),s&&a(en),s&&a(Tc),s&&a(Ls),s&&a(Sc),s&&a(un),s&&a(Uc),s&&a(rn),s&&a(Oc),s&&a(T),s&&a(Hc),s&&a(vn),s&&a(Dc),s&&a(et),s&&a(Rc),s&&a(_n),s&&a(Cc),s&&a(ms),s&&a(Mc),s&&a(En),s&&a(jc),s&&a(Is),s&&a(Nc),s&&a(mn),s&&a(qc),s&&a(R),s&&a(xc),s&&a(yn),s&&a(Fc),s&&a(ts),s&&a(Gc),s&&a(An),s&&a(Yc),s&&a(ls),s&&a($c),s&&a(bn),s&&a(Bc),s&&a(wt),s&&a(Xc),s&&a(Tn),s&&a(Wc),s&&a(At),s&&a(Vc),s&&a(Sn),s&&a(zc),s&&a(ys),s&&a(Jc),s&&a(Un),s&&a(Kc),s&&a(St),s&&a(Qc),s&&a(On),s&&a(Zc),s&&a(Ot),s&&a(gc),s&&a(Hn),s&&a(su),s&&a(Dt),s&&a(nu),s&&a(Dn),s&&a(au),s&&a(Rt),s&&a(tu),s&&a(Rn),s&&a(lu),s&&a(Mt),s&&a(eu),s&&a(Cn),s&&a(pu),s&&a(Nt),s&&a(ou),s&&a(Mn),s&&a(cu),s&&a(xt),s&&a(uu),s&&a(jn),s&&a(iu),s&&a(Gt),s&&a(ru),s&&a(Nn),s&&a(ku),s&&a(qn),s&&a(fu),s&&a(ws),s&&a(vu),s&&a(xn),s&&a(_u),s&&a(Ps),s&&a(Eu),s&&a(Fn),s&&a(du),s&&a(Gn),s&&a(hu),s&&a(As),s&&a(Lu),s&&a(Yn),s&&a(mu),s&&a(Vt),s&&a(Iu),s&&a($n),s&&a(yu),s&&a(Jt),s&&a(wu),s&&a(Bn),s&&a(Pu),s&&a(es),s&&a(Au),s&&a(sl),s&&a(bu),s&&a(Xn),s&&a(Tu),s&&a(C),s&&a(Su),s&&a(Wn),s&&a(Uu),s&&a(bs),s&&a(Ou),s&&a(zn),s&&a(Hu),s&&a(Jn),s&&a(Du),s&&a(ll),s&&a(Ru),s&&a(Kn),s&&a(Cu),s&&a(pl),s&&a(Mu),s&&a(Qn),s&&a(ju),s&&a(Zn),s&&a(Nu),s&&a(gn),s&&a(qu),s&&a(sa),s&&a(xu),s&&a(Ts),s&&a(Fu),s&&a(na),s&&a(Gu),s&&a(aa),s&&a(Yu),s&&a(Ss),s&&a($u),s&&a(ea),s&&a(Bu),s&&a(fl),s&&a(Xu),s&&a(M),s&&a(Wu),s&&a(pa),s&&a(Vu),s&&a(Us)}}}function b5(I){let v,E;const d=[I[0],M_];let _={$$slots:{default:[A5]},$$scope:{ctx:I}};for(let f=0;f<d.length;f+=1)_=C_(_,d[f]);return v=new P5({props:_}),{c(){FL(v.$$.fragment)},l(f){GL(v.$$.fragment,f)},m(f,L){YL(v,f,L),E=!0},p(f,[L]){const x=L&1?E5(d,[L&1&&CL(f[0]),L&0&&CL(M_)]):{};L&2&&(x.$$scope={dirty:L,ctx:f}),v.$set(x)},i(f){E||(wi(v.$$.fragment,f),E=!0)},o(f){Pi(v.$$.fragment,f),E=!1},d(f){$L(v,f)}}}const M_={title:"클린코드 요약",summary:"클린코드 정독후 요약사항을 정리합니다.",date:"2023-11-09"};function T5(I,v,E){return I.$$set=d=>{E(0,v=C_(C_({},v),ML(d)))},v=ML(v),[v]}class S5 extends j_{constructor(v){super(),N_(this,v,T5,b5,q_,{})}}const O5=Object.freeze(Object.defineProperty({__proto__:null,default:S5,metadata:M_},Symbol.toStringTag,{value:"Module"}));export{S5 as P,O5 as _};
