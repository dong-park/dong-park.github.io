import{S as u5,i as i5,s as r5,Q as Nv,J as k5,K as f5,L as v5,R as _5,T as jL,w as E5,x as d5,M as h5,U as NL,e as t,t as p,a as i,c as l,b as e,d as o,f as n,g as r,o as k,h as u,j as a,n as L5}from"./index.17520f44.js";import{L as m5}from"./LayoutDefault.53ac5097.js";function y5(Wn){let E,T,B,J,_,b,Jn,Ii,Kn,Pi,U,el,Ai,Ti,pl,bi,Si,ol,Oi,Hi,cl,Ui,Ri,ul,Ci,wo,cs,zn,Di,Io,d,il,Mi,xi,rl,ji,Ni,kl,qi,Fi,fl,Gi,Yi,vl,Bi,$i,_l,Xi,Wi,El,Ji,Ki,dl,zi,Po,us,Vn,Vi,Ao,is,Qn,Qi,To,Zn,Zi,bo,rs,gn,gi,So,sa,sr,Oo,ks,na,nr,Ho,aa,ar,Uo,ta,tr,Ro,la,lr,Co,D,hl,er,pr,Ll,or,cr,ml,ur,Do,fs,ea,ir,Mo,pa,rr,xo,vs,oa,kr,jo,ca,fr,No,ua,vr,qo,_s,ia,_r,Fo,ra,Er,Go,Es,yl,dr,hr,Yo,M,wl,Lr,mr,Il,yr,wr,Pl,Ir,Bo,ka,Pr,$o,ds,Al,Ar,Tr,Xo,hs,Tl,br,Sr,Wo,Ls,bl,Or,Hr,Jo,ms,fa,Ur,Ko,va,Rr,zo,ys,_a,Cr,Vo,Ea,Dr,Qo,ws,da,Mr,Zo,ha,xr,go,Is,La,jr,sc,ma,Nr,nc,Ps,ya,qr,ac,wa,Fr,tc,Ia,Gr,lc,As,Pa,Yr,ec,Aa,Sl,Br,pc,Ts,Ta,$r,oc,ba,Ol,Xr,cc,bs,Sa,Wr,uc,L,Hl,Jr,Kr,Ul,zr,Vr,Rl,Qr,Zr,Cl,gr,sk,Dl,nk,ak,Ml,tk,ic,Ss,Oa,lk,rc,Ha,ek,kc,f,xl,pk,ok,jl,ck,uk,Nl,ik,rk,ql,kk,fk,Fl,vk,_k,Gl,Ek,dk,Yl,hk,Lk,Bl,mk,yk,$l,wk,Ik,Xl,Pk,Ak,Wl,Tk,bk,Jl,Sk,Ok,Kl,Hk,Uk,zl,Rk,Ck,Vl,Dk,Mk,Ql,xk,fc,Os,Ua,jk,vc,Ra,Nk,_c,Hs,Ca,qk,Ec,K,Zl,Fk,Gk,gl,Yk,dc,Us,Da,Bk,hc,m,se,ne,$k,Xk,Rs,ae,Wk,Jk,R,te,Kk,zk,le,Vk,Qk,ee,Zk,gk,pe,sf,nf,Cs,oe,af,tf,Ds,ce,lf,ef,ue,pf,of,Ms,ie,cf,uf,re,xs,ke,rf,kf,Ma,qL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReporterConfig</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 변수끼리는 세로로 묶어놓기</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> m_className<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Property</span><span class="token punctuation">></span></span> m_properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Property</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token class-name">Property</span> property<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		m_properties<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ff,js,fe,vf,_f,S,ve,_e,Ef,df,Ns,Ee,hf,Lf,qs,de,mf,yf,he,wf,If,Fs,Le,Pf,Af,me,ye,Tf,bf,Gs,we,Sf,Of,Ie,Ys,Pe,Hf,Uf,xa,FL=`<code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">makeResponse</span><span class="token punctuation">(</span><span class="token class-name">FitNesseContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Request</span> request<span class="token punctuation">)</span> 
	<span class="token keyword">throw</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">String</span> pageNmae <span class="token operator">=</span> <span class="token function">getPageNameOrDefault</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"FrontPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">loadPage</span><span class="token punctuation">(</span>pageName<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//////////////////////</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPageNameOrDefault</span><span class="token punctuation">(</span><span class="token class-name">Reuqest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultPageName<span class="token punctuation">)</span>
<span class="token comment">//////////////////////</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadPage</span><span class="token punctuation">(</span><span class="token class-name">String</span> resource<span class="token punctuation">,</span> <span class="token class-name">FitNesseContext</span> context<span class="token punctuation">)</span></code>`,Rf,Bs,Ae,Cf,Df,$s,Te,Mf,xf,be,jf,Nf,Xs,Se,qf,Ff,Ws,Oe,Gf,Yf,He,Bf,Lc,Js,ja,$f,mc,h,Ue,Xf,Wf,Re,Jf,Kf,Ce,zf,Vf,Na,Qf,Ks,De,Zf,gf,Me,s1,n1,qa,a1,zs,xe,t1,l1,je,e1,p1,Ne,o1,c1,Fa,u1,qe,Fe,i1,yc,Vs,Ga,r1,wc,Ya,k1,Ic,Qs,Ba,f1,Pc,z,Ge,v1,_1,Ye,E1,Ac,Zs,$a,d1,Tc,V,gs,Be,h1,L1,$,$e,m1,y1,Xe,w1,I1,We,P1,A1,sn,Je,T1,b1,nn,an,Ke,S1,O1,Xa,GL=`<code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">Point</span> center<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> redius<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Geometry</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token class-name">Object</span> shape<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token class-name">NoSuchShapeExcpetion</span><span class="token operator">~</span>
<span class="token punctuation">&#125;</span></code>`,H1,tn,ze,U1,R1,Wa,YL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> side<span class="token operator">*</span>side<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,bc,ln,Ja,C1,Sc,w,Ve,D1,M1,Ka,x1,C,Qe,j1,N1,Ze,q1,F1,ge,G1,Y1,sp,B1,$1,za,X1,X,Va,W1,np,ap,tp,J1,K1,Qa,z1,lp,ep,pp,V1,Q1,op,Z1,g1,Za,s3,en,cp,n3,a3,up,t3,l3,ga,e3,W,ip,p3,o3,rp,c3,u3,kp,i3,Oc,pn,st,r3,Hc,x,fp,vp,k3,f3,on,_p,v3,_3,nt,BL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> property1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> property2<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Default constructor</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> property1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperty1</span><span class="token punctuation">(</span><span class="token class-name">String</span> property1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>property1 <span class="token operator">=</span> property1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProperty2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> property2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperty2</span><span class="token punctuation">(</span><span class="token keyword">int</span> property2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>property2 <span class="token operator">=</span> property2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,E3,cn,Ep,d3,h3,dp,hp,L3,Uc,un,at,m3,Rc,j,Lp,y3,w3,mp,I3,P3,yp,A3,Cc,rn,tt,T3,Dc,lt,wp,b3,Mc,kn,et,S3,xc,pt,Ip,O3,jc,fn,ot,H3,Nc,Q,Pp,U3,R3,Ap,C3,qc,vn,ct,D3,Fc,ut,Tp,M3,Gc,_n,it,x3,Yc,rt,bp,j3,Bc,En,kt,N3,$c,ft,Sp,q3,Xc,dn,$L=`<code class="language-java"><span class="token class-name">LocalPort</span> port <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
	port<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PortDeviceFailure</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">reportError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
	logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//////////////</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalPort</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">ACMEPort</span> innerPort<span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token keyword">int</span> portNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		innerPort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ACMEPort</span><span class="token punctuation">(</span>portNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ATM1212UnlockedExcpetion</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Wc,vt,Op,F3,Jc,hn,_t,G3,Kc,Et,Hp,Y3,zc,Ln,dt,B3,Vc,ht,Up,$3,Qc,mn,Lt,X3,Zc,mt,Rp,W3,gc,yn,yt,J3,su,wt,Cp,K3,nu,wn,It,z3,au,In,Pt,V3,tu,Z,Dp,Q3,Z3,Mp,g3,lu,Pn,At,s2,eu,g,xp,n2,a2,jp,t2,pu,An,XL=`<code class="language-java">  	<span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogAddAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConsoleAppender</span> appender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span>appender<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogAddAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ConsoleAppender</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getRootLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BasicConfigurator</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"basicLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAppenderWithStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ConsoleAppender</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"addAppenderWithStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAppenderWithoutStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"addAppenderWithoutStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ou,Tn,Tt,l2,cu,ss,Np,e2,p2,qp,o2,uu,bn,bt,c2,iu,St,Fp,u2,ru,Sn,Ot,i2,ku,Ht,r2,fu,On,Ut,k2,vu,N,Rt,Gp,f2,v2,_2,Ct,Yp,E2,d2,h2,Dt,Bp,L2,m2,_u,Mt,y2,Eu,Hn,xt,w2,du,I,$p,I2,P2,Xp,A2,T2,Wp,Jp,b2,S2,Kp,O2,H2,zp,U2,hu,Un,jt,R2,Lu,ns,Rn,C2,Vp,D2,M2,x2,Qp,Zp,j2,mu,Cn,WL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
    <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSymbolicLinksAreNotInXmlPageHierarchy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">WikiPage</span> page <span class="token operator">=</span> <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">addLinkTo</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">,</span> <span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
    <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseDoesNotContain</span><span class="token punctuation">(</span><span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetDataAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token function">makePageWithContent</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"test page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"type:data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseContains</span><span class="token punctuation">(</span><span class="token string">"test page"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,yu,Dn,Nt,N2,wu,qt,gp,q2,Iu,Mn,Ft,F2,Pu,Gt,so,G2,Au,xn,JL=`<code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreashold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  hw<span class="token punctuation">.</span><span class="token function">setTemp</span><span class="token punctuation">(</span><span class="token constant">WAY_TOO_COLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  controller<span class="token punctuation">.</span><span class="token function">tic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">heaterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
  <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">blowerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">coolerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">hiTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
  <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">loTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Tu,jn,KL=`<code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token function">wayTooCold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"HBchL"</span><span class="token punctuation">,</span> hw<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code>`,bu,Nn,Yt,Y2,Su,qn,zL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> 
  <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">thenResponseShouldBeXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyHasRightTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> 
  <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">thenResponseShouldContain</span><span class="token punctuation">(</span>
    <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code>`,Ou,as,no,B2,$2,ao,X2,Hu,Fn,Bt,W2,Uu,Gn,VL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">SerialDate</span> d1 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SerialDate</span> d2 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SerialDate</span> d3 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SerialDate</span> d4 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ru,ts,$t,J2,Yn,Xt,K2,Bn,to,z2,V2,lo,Q2,Z2,Wt,g2,eo,po,sv,nv,oo,av,Cu,$n,Jt,co,tv,Du,Kt,lv,Mu,P,uo,io,ev,pv,ro,ko,ov,cv,fo,vo,uv,iv,_o,Eo,rv,kv,ho,Lo,fv,xu,Xn,zt,vv,ju,ls,mo,_v,Ev,yo,dv;return{c(){E=t("h1"),T=t("a"),B=p("1장 깨끗한 코드"),J=i(),_=t("ul"),b=t("li"),Jn=p("빨리가는 유일한 방법은 언제나 코드를 깨끗하게 유지하는 습관이다. p7"),Ii=i(),Kn=t("li"),Pi=p("단순한 코드 규칙으로 구현을 시작하는법 p13"),U=t("ul"),el=t("li"),Ai=p("모든 테스트를 통과한다"),Ti=i(),pl=t("li"),bi=p("중복이 없다"),Si=i(),ol=t("li"),Oi=p("시스템 내 모든 설계 아이디어를 표현한다"),Hi=i(),cl=t("li"),Ui=p("클래스, 메서드, 함수 등을 최대한 줄인다."),Ri=i(),ul=t("li"),Ci=p("캠프장을 처음 왔을 때 보다 더 깨끗하게 하고 떠나라 p19"),wo=i(),cs=t("h1"),zn=t("a"),Di=p("2장 의미있는 이름"),Io=i(),d=t("ul"),il=t("li"),Mi=p("의도를 분명히 밝히자: 코드가 무엇을 의미하는지 독자로 하여금 납득이 되어야 한다"),xi=i(),rl=t("li"),ji=p("그릇된 정보를 피하라: 변수나 함수 이름에 잘못된 정보를 포함시키지 말아야 한다. 다른 사람이 코드를 읽을 때 혼란을 줄 수 있으며, 잘못된 가정을 할 수도 있다."),Ni=i(),kl=t("li"),qi=p("의미 있게 구분하라: 변수나 함수 이름은 서로 다른 개념을 구분할 수 있도록 명확하고 일관성 있게 작성해야 한다. 혼란을 줄이고 코드의 가독성을 향상시킨다."),Fi=i(),fl=t("li"),Gi=p("발음하기 쉬운 이름을 사용하라. 코드의 이름은 다른 사람들이 발음하기 쉽고 이해하기 쉽게 작성되어야 한다."),Yi=i(),vl=t("li"),Bi=p("검색하기 쉬운 이름을 사용하라. 변수나 함수의 이름은 다른 사람들이 쉽게 검색할 수 있도록 작성되어야 한다. 명확하고 직관적인 이름을 선택하여 코드의 유지보수성을 높이는데 도움이 된다."),$i=i(),_l=t("li"),Xi=p("인코딩을 피하라: 변수나 함수 이름에 인코딩을 사용하지 않는 것이 좋다. 의미 있는 이름을 사용하여 코드의 가독성을 높이는 것이 중요하다."),Wi=i(),El=t("li"),Ji=p("자신의 기억력을 자랑하지 마라: 변수 이름을 자신만 아는 이름으로 변환하지 말아라"),Ki=i(),dl=t("li"),zi=p("불필요한 유머나 맥락을 벗어나는 명명법을 사용하지 말고 방법론에 의한 명명법을 쓰자"),Po=i(),us=t("h1"),Vn=t("a"),Vi=p("3장 함수"),Ao=i(),is=t("h3"),Qn=t("a"),Qi=p("작게 만들어라"),To=i(),Zn=t("p"),Zi=p("호출하는 함수 형식으로 함수는 짧을수록 좋다 2~3줄 내외면 더 좋다. 들여쓰기 구조도 1단이나 2단을 넘어서면 힘들어진다"),bo=i(),rs=t("h3"),gn=t("a"),gi=p("한 가지만 해라"),So=i(),sa=t("p"),sr=p("추상화 단계에서 일을 하는 가짓수가 하나여야 한다 가령 다른 함수를 호출하는 함수가 존재한다면 그 함수는 한가지 일을 하고 있는것이다."),Oo=i(),ks=t("h3"),na=t("a"),nr=p("함수 당 추상화 수준은 하나로"),Ho=i(),aa=t("p"),ar=p("한 함수내에 여러가지 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운 탓이다."),Uo=i(),ta=t("p"),tr=p("내려가기 규칙을 활용하자 위에서 아래로 프로그램을 읽을수 있도록 함수 추상화 수준을 한단계씩 내려보자"),Ro=i(),la=t("p"),lr=p("TO 설정 페이지와 해제 페이지를 포함라혀면, 설정 페이지를 폼학하고, 테스트 페이지 내용을 포함하고 해제 페이지를 포함한다."),Co=i(),D=t("ul"),hl=t("li"),er=p("To 설정 페이지를 포함하려면, 슈트이면 슈트 설정 페이지를 포함한 후 일반 설정 페이지를 포함한다."),pr=i(),Ll=t("li"),or=p("To 슈트 설정 페이지를 포함하려면, 부모 계층에서 SuiteSetUp 페이지를 찾아 Include문과 페이지 경로를 추가한다."),cr=i(),ml=t("li"),ur=p("To 부모 계층을 검색하려면…"),Do=i(),fs=t("h3"),ea=t("a"),ir=p("Switch문"),Mo=i(),pa=t("p"),rr=p("스위치 문을 다형성 객체를 생성하는 코드 안에서 허용하고 상속관계로 숨기고 다른 코드에 노출하지 않는 방법이 있다."),xo=i(),vs=t("h3"),oa=t("a"),kr=p("서술적인 이름을 사용하라"),jo=i(),ca=t("p"),fr=p("이름이 길어도 괜찮고 서술적인 이름이 짧고 어려운 이름보다 좋다. 함수 이름을 정할때 여러 단어가 쉽게 읽히는 명명법을 사용하는것이 좋다. 여러 단어를 사용해 함수 기능을 표현하라"),No=i(),ua=t("p"),vr=p("모듈 내에서 함수 이름은 같은 문구,명사,동사를 사용한다."),qo=i(),_s=t("h3"),ia=t("a"),_r=p("함수 인수"),Fo=i(),ra=t("p"),Er=p("함수에서 이상적인 인수 개수는 0개이다. 다음은 1개이고 다음은2개이다. 최선은 입력 인수가 없는 경우 ex: IncludeSetupPageInfo(new PageContent) → includeSetupPage()"),Go=i(),Es=t("p"),yl=t("em"),dr=p("많이쓰는 단항형식"),hr=p(`
함수에 인수 1개를 넘기는 이유`),Yo=i(),M=t("ol"),wl=t("li"),Lr=p("인수에 질문을 던지는 경우"),mr=i(),Il=t("li"),yr=p("인수를 뭔가로 변환해 결과를 반환하는 경우"),wr=i(),Pl=t("li"),Ir=p("단항 함수 형식의 이벤트"),Bo=i(),ka=t("p"),Pr=p("플래그 인수는 추하다. 함수에 부울 값을 넘기는 관례는 차라리 인수별말고 상황별로 함수를 나누는 편이 좋다"),$o=i(),ds=t("p"),Al=t("em"),Ar=p("이항함수"),Tr=p(`
인수가 2개인 함수는 1개인 함수보다 이해하기 어렵다. 프로그램을 짜다보면 불가피한 경우도 생기지만 그만큼 위험이 따른다`),Xo=i(),hs=t("p"),Tl=t("em"),br=p("삼항함수"),Sr=p(`
삼항 함수부터는 신중히 고려해야 한다..`),Wo=i(),Ls=t("p"),bl=t("em"),Or=p("동사와 키워드"),Hr=p(`
단항 함수는 함수와 인수가 동사/명사 쌍을 이ㅝ야 한다.
함수 이름에 키워드를 추가하는 편도 좋다`),Jo=i(),ms=t("h3"),fa=t("a"),Ur=p("부수 효과를 일으키지 마라"),Ko=i(),va=t("p"),Rr=p("함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓을 하지 말아라!"),zo=i(),ys=t("h3"),_a=t("a"),Cr=p("명령과 조회를 분리하라!"),Vo=i(),Ea=t("p"),Dr=p("함수는 뭔가를 수행하거나 뭔가에 답하거나 둘중 하나만 해야한다. 둘 다 하면 안 된다. 객체 상태를 변경하거나 아니면 객체 정보를 반환하거나 둘 중 하나다."),Qo=i(),ws=t("h3"),da=t("a"),Mr=p("Try/Catch 블록은 한 함수에서 별도로 처리"),Zo=i(),ha=t("p"),xr=p("코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다."),go=i(),Is=t("h3"),La=t("a"),jr=p("반복하지 마라"),sc=i(),ma=t("p"),Nr=p("중복은 소트트웨어에서 모든 악의 근원이다. 많은 원칙과 기법이 중복을 없애거나 제어할 목적으로 나왔다."),nc=i(),Ps=t("h1"),ya=t("a"),qr=p("4장 주석"),ac=i(),wa=t("p"),Fr=p("잘 달린 주석은 어떤 정보보다 유용하지만, 거짓말을 하는 경우가 많다. 일부가 여기서 저기로 옮겨지면서 발생하는 불상사"),tc=i(),Ia=t("p"),Gr=p("진실은 한 곳에만 존재한다. 바로 코드다 코드만이 자기가 하는 일을 진실되게 말한다."),lc=i(),As=t("h3"),Pa=t("a"),Yr=p("주석은 나쁜 코드를 보완하지 못한다"),ec=i(),Aa=t("ul"),Sl=t("li"),Br=p("표현력이 풍부하고 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다."),pc=i(),Ts=t("h3"),Ta=t("a"),$r=p("코드를 의도로 표현하라"),oc=i(),ba=t("ul"),Ol=t("li"),Xr=p("코드로 대다수 의도를 표현할수 있다 많은 경우 주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다."),cc=i(),bs=t("h3"),Sa=t("a"),Wr=p("좋은 주석"),uc=i(),L=t("ul"),Hl=t("li"),Jr=p("정말은 좋은 주석은 주석을 달지 않을 방법을 찾아낸 주석이라는 사실을 알아라"),Kr=i(),Ul=t("li"),zr=p(`법적인 주석
각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보`),Vr=i(),Rl=t("li"),Qr=p(`정보를 제공하는 주석
기본적인 정보를 주석으로 제공하면 편리하지만 그래도 함수 이름에 정보를 담는편이 좋다`),Zr=i(),Cl=t("li"),gr=p(`의도를 설명하는 주석
두 객체를 비교하는 하는 코드가 있다고 가정했을때 저자의 의도를 보여주는 코드가 좋다`),sk=i(),Dl=t("li"),nk=p(`의미를 명료하게 밝히는 주석
일반적으로 인수나 반환값 자체를 명확하게 만들면 더 좋겠지만, 인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미를 명료하게 밝히는 주석이 유용하다.`),ak=i(),Ml=t("li"),tk=p(`ex
docs형..
결과를 경고하는 주석
TODO주석
중요성을 강조하는 주석`),ic=i(),Ss=t("h3"),Oa=t("a"),lk=p("나쁜 주석"),rc=i(),Ha=t("p"),ek=p("대다수 주석이 속하는 범주, 허술한 코드를 지탱하거나, 엉뚱한 코드를 변명하거나, 미숙한 결정을 합리화 한다."),kc=i(),f=t("ul"),xl=t("li"),pk=p("주절거리는 주석: 저자에게만 의미가 있고 의사소통이 어려운 주석들"),ok=i(),jl=t("li"),ck=p("같은 이야기를 중복하는 주석: 주석이 코드보다 더 많은 정보를 제공하지 못하는 경우"),uk=i(),Nl=t("li"),ik=p("오해할 여지가 있는 주석: 코드보다 읽기도 어려운 주석에 살짝 잘못된 정보를 포함한 경우"),rk=i(),ql=t("li"),kk=p("의무적으로 다는 주석: javadocs를 넣으라는 규칙이 낳은 아무가치없는 주석"),fk=i(),Fl=t("li"),vk=p("이력을 기록하는 주석: git이 있으니 이제 없어도 된다"),_k=i(),Gl=t("li"),Ek=p("있으나 마나 한 주석: 너무 당연한 사실을 언급 가령 생성자를 알려주는 경우"),dk=i(),Yl=t("li"),hk=p("위치를 표시하는 주석: 유용한 경우도 있지만 독자가 흔한 잡음으로 여겨 무시한다"),Lk=i(),Bl=t("li"),mk=p("닫는 괄호에 다는 주석: 함수를 줄이는 편이 낫다."),yk=i(),$l=t("li"),wk=p("공로를 돌리거나 저자를 표시하는 주석: 이것도 git에 맡기자"),Ik=i(),Xl=t("li"),Pk=p("주석으로 처리한 코드: 주석으로 처리한 코드만큼 밉살스러운 관행도 드물다."),Ak=i(),Wl=t("li"),Tk=p("HTML 주석: 주석을 뽑아 웹페이지에 올릴 작정이라면 태그를 삽입해야 하는 책임은 프로그래머가 아니라 도구가 져야 맞다"),bk=i(),Jl=t("li"),Sk=p("전역 정보: 상수 값은 코드와 주석이 전혀 통제할수 없다"),Ok=i(),Kl=t("li"),Hk=p("너무 많은 정보: 장황하게 늘어놓지 마라"),Uk=i(),zl=t("li"),Rk=p("모호한 관계: 주석과 주석이 설명하는 코드는 둘 사이에 관계가 명백해야 한다"),Ck=i(),Vl=t("li"),Dk=p("함수 헤더: 짧은 함수는 긴 설명이 필요 없다. 짧고 한 가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다."),Mk=i(),Ql=t("li"),xk=p("비공개 코드에서 Javadocs: 공개하지 않을 코드라면 자바독스는 쓸모가 없다"),fc=i(),Os=t("h1"),Ua=t("a"),jk=p("5장 형식 맞추기"),vc=i(),Ra=t("p"),Nk=p("프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야 한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고 모두가 그 규칙을 따라야 한다."),_c=i(),Hs=t("h3"),Ca=t("a"),qk=p("형식을 맞추는 목적"),Ec=i(),K=t("ul"),Zl=t("li"),Fk=p("코드 형식은 매우 중요하다"),Gk=i(),gl=t("li"),Yk=p("오늘 구현한 기능이 다음 버전에서 바뀔 확률은 아주 높다. 가독성이 바뀔 코드의 품질을 결정한다."),dc=i(),Us=t("h3"),Da=t("a"),Bk=p("적절한 행 길이를 유지하라"),hc=i(),m=t("ul"),se=t("li"),ne=t("p"),$k=p("대다수가 500줄을 넘지 않고 대부분이 200줄 정도인 파일로도 커다란 시스템을 구축할수 있다."),Xk=i(),Rs=t("li"),ae=t("p"),Wk=p("신문 기사처럼 작성하라"),Jk=i(),R=t("ul"),te=t("li"),Kk=p("최상단 기사를 몇 마디로 요약하는 표제가 나오고, 첫 문단이 기사 내용을 요약한다."),zk=i(),le=t("li"),Vk=p("소스 파일도 이와 비슷하게 이름만 보고도 올바른 모듈을 판단 할 정도로 신경 써서 짓는다."),Qk=i(),ee=t("li"),Zk=p("소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명하고 아래로 내려갈수록 세세하게 묘사한다."),gk=i(),pe=t("li"),sf=p("신문은 다양한 기사로 이뤄진다. 대다수 기사가 아주 짧고 날짜, 이름들을 뒤섞은 긴 기사 하나만 싣는다면 아무도 읽지 않을것이다."),nf=i(),Cs=t("li"),oe=t("p"),af=p("개념은 빈 행으로 분리하라"),tf=i(),Ds=t("ul"),ce=t("li"),lf=p("모든 코드는 왼쪽에서 오른쪽으로 그리고 위에서 아래로 읽힌다."),ef=i(),ue=t("li"),pf=p("일련의 행 묶음은 완결된 생각 하나를 표현한다."),of=i(),Ms=t("li"),ie=t("p"),cf=p("세로 밀집도"),uf=i(),re=t("ul"),xs=t("li"),ke=t("p"),rf=p("줄바꿈이 개념을 분리한다면 세로 밀집도는 연광성을 의미한다. 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다는 뜻이다."),kf=i(),Ma=t("pre"),ff=i(),js=t("li"),fe=t("p"),vf=p("수직 거리"),_f=i(),S=t("ul"),ve=t("li"),_e=t("p"),Ef=p("서로 밀접한 개념은 세로로 가까이 둬야 한다. 물론 두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않는다. 하지만 타당한 근거 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다."),df=i(),Ns=t("li"),Ee=t("p"),hf=p("변수선언 위치"),Lf=i(),qs=t("ul"),de=t("li"),mf=p("사용하는 위치에 최대한 가까이 선언한다. 우리가 만든 함수는 매우 짧으므로 지역 변수는 각 함수 맨 처음에 선언한다."),yf=i(),he=t("li"),wf=p("루프를 제어하는 변수는 흔히 루프문 내부에 선언한다. (아주 드물지만 블록 상단이나 루프 직전에 선언하는 사례도 있다)"),If=i(),Fs=t("li"),Le=t("p"),Pf=p("인스턴스 변수"),Af=i(),me=t("ul"),ye=t("li"),Tf=p("클래스 맨 처음에 선언한다."),bf=i(),Gs=t("li"),we=t("p"),Sf=p("종속 함수"),Of=i(),Ie=t("ul"),Ys=t("li"),Pe=t("p"),Hf=p("한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다."),Uf=i(),xa=t("pre"),Rf=i(),Bs=t("li"),Ae=t("p"),Cf=p("개념적 유사성"),Df=i(),$s=t("ul"),Te=t("li"),Mf=p("친화도가 높을수록 코드를 가까이 배치한다."),xf=i(),be=t("li"),jf=p("친화도가 높은 요인은 한 함수가 다른 함수를 호출해 생기는 종속성이 생기는 경우나 명명법이 똑가톡 기본 기능이 유사한 경우"),Nf=i(),Xs=t("li"),Se=t("p"),qf=p("세로 순서"),Ff=i(),Ws=t("ul"),Oe=t("li"),Gf=p("가장 중요한 개념을 가장 먼저 표현한다."),Yf=i(),He=t("li"),Bf=p("세세한 사항을 최대한 배제한다."),Lc=i(),Js=t("h3"),ja=t("a"),$f=p("가로 형식 맞추기"),mc=i(),h=t("ul"),Ue=t("li"),Xf=p("기존 오픈소스 코드들은 60자 이상부터 떨어진다. 프로그래머는 명백하게 짧은 행을 선호한다."),Wf=i(),Re=t("li"),Jf=p("100자나 120자에 달해도 나쁘지 않지만 그 이상은 솔직히 주의 부족이다."),Kf=i(),Ce=t("li"),zf=p("가로 공백과 밀집도 가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다."),Vf=i(),Na=t("li"),Qf=p("가로 정렬"),Ks=t("ul"),De=t("li"),Zf=p("코드의 변수값을 강조하기 위해 가로공백을 넣지 말아라 ide에서 다 잡힌다"),gf=i(),Me=t("li"),s1=p("선언부가 길고 강조할게 많다면 클래스를 쪼개야 한다는 의미이다."),n1=i(),qa=t("li"),a1=p("들여쓰기"),zs=t("ul"),xe=t("li"),t1=p("들여쓰기 자체가 윤곽도를 보여준다"),l1=i(),je=t("li"),e1=p("들여쓰기한 파일은 구조가 한눈에 들어온더. 변수, 생성자 함수, 접근자 함수, 메서드가 금방 보인다."),p1=i(),Ne=t("li"),o1=p("때로는 간단한 if, while, 짧은 함수에서 들여쓰기를 무시하고픈 유혹이 생긴다. 원점으로 돌아가도록 하자"),c1=i(),Fa=t("li"),u1=p("팀 규칙"),qe=t("ul"),Fe=t("li"),i1=p("팀은 한 가지 규칙에 합의해야 한다. 그리고 모든 팀원은 그 규칙을 따라야 한다."),yc=i(),Vs=t("h1"),Ga=t("a"),r1=p("6장 객체와 자료구조"),wc=i(),Ya=t("p"),k1=p("변수를 비공개로 정의 하는 이유는 남들이 변수에 의존하지 않게 만들고 싶어서다."),Ic=i(),Qs=t("h3"),Ba=t("a"),f1=p("자료 추상화"),Pc=i(),z=t("ul"),Ge=t("li"),v1=p("변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필요하다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다."),_1=i(),Ye=t("li"),E1=p("개발자는 객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다."),Ac=i(),Zs=t("h3"),$a=t("a"),d1=p("자료/객체 비대칭"),Tc=i(),V=t("ul"),gs=t("li"),Be=t("p"),h1=p("객체와 자료 구조는 근본적으로 양분된다."),L1=i(),$=t("ul"),$e=t("li"),m1=p("절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 슆다."),y1=i(),Xe=t("li"),w1=p("절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야 한다."),I1=i(),We=t("li"),P1=p("둘다 참이다. 다시말해 객체 지향코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다."),A1=i(),sn=t("li"),Je=t("p"),T1=p("예시"),b1=i(),nn=t("ul"),an=t("li"),Ke=t("p"),S1=p("절차적인 접근예시"),O1=i(),Xa=t("pre"),H1=i(),tn=t("li"),ze=t("p"),U1=p("다형성 접근예시"),R1=i(),Wa=t("pre"),bc=i(),ln=t("h3"),Ja=t("a"),C1=p("디미터 법칙"),Sc=i(),w=t("ul"),Ve=t("li"),D1=p("모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다."),M1=i(),Ka=t("li"),x1=p("클래스 C의 메서드 f는 다음과 같은 메서드만 호출해야 한다"),C=t("ul"),Qe=t("li"),j1=p("클래스 C"),N1=i(),Ze=t("li"),q1=p("f가 생성한 객체"),F1=i(),ge=t("li"),G1=p("f 인수로 넘어온 객체"),Y1=i(),sp=t("li"),B1=p("C 인스턴스 변수에 저장된 객체"),$1=i(),za=t("li"),X1=p("기차 충돌"),X=t("ul"),Va=t("li"),W1=p("as-is"),np=t("ul"),ap=t("li"),tp=t("strong"),J1=p("final String outputDir = ctext.getOptions().getScracthDir().getAbsolutePath();"),K1=i(),Qa=t("li"),z1=p("to-be"),lp=t("ul"),ep=t("li"),pp=t("strong"),V1=p(`Options opts = ctxt.getOptions();
File scractchDir = opts.getScratchDir();
final String outputDir = scracthDir.getAbsolutePath();`),Q1=i(),op=t("li"),Z1=p("객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 자료구조 라면 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다."),g1=i(),Za=t("li"),s3=p("잡종 구조"),en=t("ul"),cp=t("li"),n3=p("절반은 객체, 절반은 자료 구조인 잡종 구조가 나온다."),a3=i(),up=t("li"),t3=p("이런 잡종 구조는 새로운 함수는 물론이고 새로운 자료 구조도 추가하기 어렵다. 단점만 모아놓은 구조"),l3=i(),ga=t("li"),e3=p("구조체 감추기"),W=t("ul"),ip=t("li"),p3=p("그렇다면 임시 디렉토러의 절대 경로는 어떻게 얻어야 좋을까?"),o3=i(),rp=t("li"),c3=p(`ctxt.getAboslutePathOfScratchDirectoryOption(); → ctxt 객체에 공개해야 하는 메서드가 너무 많아진다
ctx.getScratchDirectoryOption().getAbsolutePath(); → 자료 구조를 반환 한다고 가정한다.`),u3=i(),kp=t("li"),i3=p(`그렇다면 ctxt 객체에 임시 파일을 생성하라고 시키면 어떨까?
BufferedOutputStream bos = ctxt.createScratchFilesStream(classFileName);
객체에게 맡기기에 적당한 임무로 보인다!`),Oc=i(),pn=t("h3"),st=t("a"),r3=p("자료 전달 객체"),Hc=i(),x=t("ul"),fp=t("li"),vp=t("p"),k3=p("자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스이다. 이런 자료구조체를 DTO(Data Transfer Object)라 한다."),f3=i(),on=t("li"),_p=t("p"),v3=p("좀더 일반적인 형태는 Bean 구조이다. 비공개 변수를 조회 설정 함수로 조작하는 방식. 사이비 캡슐화로 일부 순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다."),_3=i(),nt=t("pre"),E3=i(),cn=t("li"),Ep=t("p"),d3=p("활성 레코드"),h3=i(),dp=t("ul"),hp=t("li"),L3=p("공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료구조, 대게 save나 find와 같이 탐색함수도 제공한다. 불행히도 비즈니스 규칙 메서드를 추가해 이런 자료 구조를 개체로 취급하는 개발자가 흔하다. 하지만 이는 바람직하지 않다. 활성 레코드는 자료 구조로 취급한다."),Uc=i(),un=t("h3"),at=t("a"),m3=p("결론"),Rc=i(),j=t("ul"),Lp=t("li"),y3=p("객체는 동작을 공개하고 자료를 숨긴다. 기존 동작을 변경하지 않으면서 객체 타입을 추가하기는 쉬운 반면 기존 객체에 새 동작을 추가하기는 어렵다."),w3=i(),mp=t("li"),I3=p("자료 구조는 동작 없이 자료를 노출한다. 기존 자료 구조에 새 동작을 추가하기 쉬우나, 기존 함수에 새 자료 구조를 추가하기는 어렵다."),P3=i(),yp=t("li"),A3=p("시스템을 구현할때 새로운 자료 타입을 추가하는 유연셩이 필요하면 객체가 더 적합하다. 새로운 동작을 추가하는 유연성이 필요하면 절차적인 코드가 더 적합하다. 어느쪽이 맞는가는 상황에 따라 다르다."),Cc=i(),rn=t("h1"),tt=t("a"),T3=p("7장 오류처리"),Dc=i(),lt=t("ul"),wp=t("li"),b3=p("깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),Mc=i(),kn=t("h3"),et=t("a"),S3=p("오류 코드보다 예외를 사용하라"),xc=i(),pt=t("ul"),Ip=t("li"),O3=p("과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),jc=i(),fn=t("h3"),ot=t("a"),H3=p("Try-Catch-Finally 문부터 작성하라"),Nc=i(),Q=t("ul"),Pp=t("li"),U3=p("예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),R3=i(),Ap=t("li"),C3=p("강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),qc=i(),vn=t("h3"),ct=t("a"),D3=p("미확인 예외를 사용하라"),Fc=i(),ut=t("ul"),Tp=t("li"),M3=p("확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),Gc=i(),_n=t("h3"),it=t("a"),x3=p("예외에 의미를 제공하라"),Yc=i(),rt=t("ul"),bp=t("li"),j3=p("예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),Bc=i(),En=t("h3"),kt=t("a"),N3=p("호출자를 고려해 예외 클래스를 정의하라"),$c=i(),ft=t("ul"),Sp=t("li"),q3=p("오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),Xc=i(),dn=t("pre"),Wc=i(),vt=t("ul"),Op=t("li"),F3=p("위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),Jc=i(),hn=t("h3"),_t=t("a"),G3=p("정상 흐름을 정의하라"),Kc=i(),Et=t("ul"),Hp=t("li"),Y3=p(`앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다.
특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다.`),zc=i(),Ln=t("h3"),dt=t("a"),B3=p("null을 반환하지 마라"),Vc=i(),ht=t("ul"),Up=t("li"),$3=p("null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),Qc=i(),mn=t("h3"),Lt=t("a"),X3=p("null을 전달하지 마라"),Zc=i(),mt=t("ul"),Rp=t("li"),W3=p("NullpointException을 야기하는 코드는 만들지 말자"),gc=i(),yn=t("h3"),yt=t("a"),J3=p("결론"),su=i(),wt=t("ul"),Cp=t("li"),K3=p("깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),nu=i(),wn=t("h1"),It=t("a"),z3=p("8장 경계"),au=i(),In=t("h3"),Pt=t("a"),V3=p("서드파티 코드 사용하기"),tu=i(),Z=t("ul"),Dp=t("li"),Q3=p("인터페이스를 “제공하는” 입장과 “사용하는” 입장 사이에는 필연적인 긴장감이 존재한다."),Z3=i(),Mp=t("li"),g3=p("사용하는 입장에서 인터페이스의 변경을 우려한다면 래핑하는것도 하나의 방법이다."),lu=i(),Pn=t("h3"),At=t("a"),s2=p("경계를 탐험하고 공부하기"),eu=i(),g=t("ul"),xp=t("li"),n2=p("서드파티 코드를 사용할때 우리는 사용할 코드에 대해 테스트할 필요가 있다."),a2=i(),jp=t("li"),t2=p("log4j의 예"),pu=i(),An=t("pre"),ou=i(),Tn=t("h3"),Tt=t("a"),l2=p("아직 존재하지 않는 코드 사용하기"),cu=i(),ss=t("ul"),Np=t("li"),e2=p("아직 개발되지 않은 모듈이 필요한데, 인터페이스를 정의하면 분업이 가능하다"),p2=i(),qp=t("li"),o2=p("인터페이스를 정의 함으로써 메인로직을 더 깔끔하게 짤 수 있다."),uu=i(),bn=t("h3"),bt=t("a"),c2=p("Clean한 경계"),iu=i(),St=t("ul"),Fp=t("li"),u2=p("좋은 소프트웨어는 변경에 유연하게 대처해야 한다. 내부 코드가 서드파티에 영향을 줄수 없게 래핑하듯 변경에 유연하게 대처할수 있는 경계를 만들어야 한다."),ru=i(),Sn=t("h1"),Ot=t("a"),i2=p("9장 유닛테스트"),ku=i(),Ht=t("p"),r2=p("코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),fu=i(),On=t("h3"),Ut=t("a"),k2=p("The Three Laws of TDD"),vu=i(),N=t("ul"),Rt=t("li"),Gp=t("strong"),f2=p("첫째 법칙:"),v2=p(" 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),_2=i(),Ct=t("li"),Yp=t("strong"),E2=p("둘째 법칙:"),d2=p(" 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),h2=i(),Dt=t("li"),Bp=t("strong"),L2=p("셋째 법칙:"),m2=p(" 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),_u=i(),Mt=t("p"),y2=p("위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),Eu=i(),Hn=t("h3"),xt=t("a"),w2=p("깨끗한 테스트 코드 유지하기"),du=i(),I=t("ul"),$p=t("li"),I2=p("테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것"),P2=i(),Xp=t("li"),A2=p("테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다"),T2=i(),Wp=t("li"),Jp=t("strong"),b2=p("코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),S2=i(),Kp=t("li"),O2=p("테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다."),H2=i(),zp=t("li"),U2=p("테스트 코드가 지저분하면 실제 코드도 망가진다"),hu=i(),Un=t("h3"),jt=t("a"),R2=p("깨끗한 테스트 코드"),Lu=i(),ns=t("ul"),Rn=t("li"),C2=p("깨끗한 코드를 만드려면 "),Vp=t("strong"),D2=p("가독성"),M2=p(" 이 필요하다"),x2=i(),Qp=t("li"),Zp=t("strong"),j2=p("BUILD-OPERATE-CHECK 패턴 → 테스트 자료 만들기, 자료 조작, 결과 확인"),mu=i(),Cn=t("pre"),yu=i(),Dn=t("h3"),Nt=t("a"),N2=p("도메인에 특화된 테스트 언어"),wu=i(),qt=t("ul"),gp=t("li"),q2=p("시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),Iu=i(),Mn=t("h3"),Ft=t("a"),F2=p("이중 표준"),Pu=i(),Gt=t("ul"),so=t("li"),G2=p("테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),Au=i(),xn=t("pre"),Tu=i(),jn=t("pre"),bu=i(),Nn=t("h3"),Yt=t("a"),Y2=p("테스트 당 assert 하나"),Su=i(),qn=t("pre"),Ou=i(),as=t("ul"),no=t("li"),B2=p("위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다"),$2=i(),ao=t("li"),X2=p("이 부분은 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),Hu=i(),Fn=t("h3"),Bt=t("a"),W2=p("테스트당 개념 하나"),Uu=i(),Gn=t("pre"),Ru=i(),ts=t("ul"),$t=t("li"),J2=p("테스트가 내포하는 의미"),Yn=t("ul"),Xt=t("li"),K2=p("(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),Bn=t("ol"),to=t("li"),z2=p("(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),V2=i(),lo=t("li"),Q2=p("두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),Z2=i(),Wt=t("li"),g2=p("(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),eo=t("ol"),po=t("li"),sv=p("31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),nv=i(),oo=t("li"),av=p("이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),Cu=i(),$n=t("h3"),Jt=t("a"),co=t("strong"),tv=p("F.I.R.S.T"),Du=i(),Kt=t("p"),lv=p("테스트는 아래 5가지 요소를 충족해야 한다"),Mu=i(),P=t("ul"),uo=t("li"),io=t("strong"),ev=p("빠르게Fast"),pv=i(),ro=t("li"),ko=t("strong"),ov=p("독립적으로Independent → 테스트간 의존관계가 있으면 안된다"),cv=i(),fo=t("li"),vo=t("strong"),uv=p("반복가능하게Repeatable → 환경에 구애받지 않는"),iv=i(),_o=t("li"),Eo=t("strong"),rv=p("자가검증하는Self-Validating → 테스트가 스스로 bool로 결론나야 한다"),kv=i(),ho=t("li"),Lo=t("strong"),fv=p("적시에Timely → 테스트 코드를 만들고 운영코드를 작성하라"),xu=i(),Xn=t("h3"),zt=t("a"),vv=p("결론"),ju=i(),ls=t("ul"),mo=t("li"),_v=p("깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다"),Ev=i(),yo=t("li"),dv=p("지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),this.h()},l(s){E=l(s,"H1",{id:!0});var c=e(E);T=l(c,"A",{href:!0});var Fv=e(T);B=o(Fv,"1장 깨끗한 코드"),Fv.forEach(n),c.forEach(n),J=r(s),_=l(s,"UL",{});var Vt=e(_);b=l(Vt,"LI",{});var Gv=e(b);Jn=o(Gv,"빨리가는 유일한 방법은 언제나 코드를 깨끗하게 유지하는 습관이다. p7"),Gv.forEach(n),Ii=r(Vt),Kn=l(Vt,"LI",{});var hv=e(Kn);Pi=o(hv,"단순한 코드 규칙으로 구현을 시작하는법 p13"),U=l(hv,"UL",{});var es=e(U);el=l(es,"LI",{});var Yv=e(el);Ai=o(Yv,"모든 테스트를 통과한다"),Yv.forEach(n),Ti=r(es),pl=l(es,"LI",{});var Bv=e(pl);bi=o(Bv,"중복이 없다"),Bv.forEach(n),Si=r(es),ol=l(es,"LI",{});var $v=e(ol);Oi=o($v,"시스템 내 모든 설계 아이디어를 표현한다"),$v.forEach(n),Hi=r(es),cl=l(es,"LI",{});var Xv=e(cl);Ui=o(Xv,"클래스, 메서드, 함수 등을 최대한 줄인다."),Xv.forEach(n),es.forEach(n),hv.forEach(n),Ri=r(Vt),ul=l(Vt,"LI",{});var Wv=e(ul);Ci=o(Wv,"캠프장을 처음 왔을 때 보다 더 깨끗하게 하고 떠나라 p19"),Wv.forEach(n),Vt.forEach(n),wo=r(s),cs=l(s,"H1",{id:!0});var Jv=e(cs);zn=l(Jv,"A",{href:!0});var Kv=e(zn);Di=o(Kv,"2장 의미있는 이름"),Kv.forEach(n),Jv.forEach(n),Io=r(s),d=l(s,"UL",{});var y=e(d);il=l(y,"LI",{});var zv=e(il);Mi=o(zv,"의도를 분명히 밝히자: 코드가 무엇을 의미하는지 독자로 하여금 납득이 되어야 한다"),zv.forEach(n),xi=r(y),rl=l(y,"LI",{});var Vv=e(rl);ji=o(Vv,"그릇된 정보를 피하라: 변수나 함수 이름에 잘못된 정보를 포함시키지 말아야 한다. 다른 사람이 코드를 읽을 때 혼란을 줄 수 있으며, 잘못된 가정을 할 수도 있다."),Vv.forEach(n),Ni=r(y),kl=l(y,"LI",{});var Qv=e(kl);qi=o(Qv,"의미 있게 구분하라: 변수나 함수 이름은 서로 다른 개념을 구분할 수 있도록 명확하고 일관성 있게 작성해야 한다. 혼란을 줄이고 코드의 가독성을 향상시킨다."),Qv.forEach(n),Fi=r(y),fl=l(y,"LI",{});var Zv=e(fl);Gi=o(Zv,"발음하기 쉬운 이름을 사용하라. 코드의 이름은 다른 사람들이 발음하기 쉽고 이해하기 쉽게 작성되어야 한다."),Zv.forEach(n),Yi=r(y),vl=l(y,"LI",{});var gv=e(vl);Bi=o(gv,"검색하기 쉬운 이름을 사용하라. 변수나 함수의 이름은 다른 사람들이 쉽게 검색할 수 있도록 작성되어야 한다. 명확하고 직관적인 이름을 선택하여 코드의 유지보수성을 높이는데 도움이 된다."),gv.forEach(n),$i=r(y),_l=l(y,"LI",{});var s_=e(_l);Xi=o(s_,"인코딩을 피하라: 변수나 함수 이름에 인코딩을 사용하지 않는 것이 좋다. 의미 있는 이름을 사용하여 코드의 가독성을 높이는 것이 중요하다."),s_.forEach(n),Wi=r(y),El=l(y,"LI",{});var n_=e(El);Ji=o(n_,"자신의 기억력을 자랑하지 마라: 변수 이름을 자신만 아는 이름으로 변환하지 말아라"),n_.forEach(n),Ki=r(y),dl=l(y,"LI",{});var a_=e(dl);zi=o(a_,"불필요한 유머나 맥락을 벗어나는 명명법을 사용하지 말고 방법론에 의한 명명법을 쓰자"),a_.forEach(n),y.forEach(n),Po=r(s),us=l(s,"H1",{id:!0});var t_=e(us);Vn=l(t_,"A",{href:!0});var l_=e(Vn);Vi=o(l_,"3장 함수"),l_.forEach(n),t_.forEach(n),Ao=r(s),is=l(s,"H3",{id:!0});var e_=e(is);Qn=l(e_,"A",{href:!0});var p_=e(Qn);Qi=o(p_,"작게 만들어라"),p_.forEach(n),e_.forEach(n),To=r(s),Zn=l(s,"P",{});var o_=e(Zn);Zi=o(o_,"호출하는 함수 형식으로 함수는 짧을수록 좋다 2~3줄 내외면 더 좋다. 들여쓰기 구조도 1단이나 2단을 넘어서면 힘들어진다"),o_.forEach(n),bo=r(s),rs=l(s,"H3",{id:!0});var c_=e(rs);gn=l(c_,"A",{href:!0});var u_=e(gn);gi=o(u_,"한 가지만 해라"),u_.forEach(n),c_.forEach(n),So=r(s),sa=l(s,"P",{});var i_=e(sa);sr=o(i_,"추상화 단계에서 일을 하는 가짓수가 하나여야 한다 가령 다른 함수를 호출하는 함수가 존재한다면 그 함수는 한가지 일을 하고 있는것이다."),i_.forEach(n),Oo=r(s),ks=l(s,"H3",{id:!0});var r_=e(ks);na=l(r_,"A",{href:!0});var k_=e(na);nr=o(k_,"함수 당 추상화 수준은 하나로"),k_.forEach(n),r_.forEach(n),Ho=r(s),aa=l(s,"P",{});var f_=e(aa);ar=o(f_,"한 함수내에 여러가지 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운 탓이다."),f_.forEach(n),Uo=r(s),ta=l(s,"P",{});var v_=e(ta);tr=o(v_,"내려가기 규칙을 활용하자 위에서 아래로 프로그램을 읽을수 있도록 함수 추상화 수준을 한단계씩 내려보자"),v_.forEach(n),Ro=r(s),la=l(s,"P",{});var __=e(la);lr=o(__,"TO 설정 페이지와 해제 페이지를 포함라혀면, 설정 페이지를 폼학하고, 테스트 페이지 내용을 포함하고 해제 페이지를 포함한다."),__.forEach(n),Co=r(s),D=l(s,"UL",{});var Qt=e(D);hl=l(Qt,"LI",{});var E_=e(hl);er=o(E_,"To 설정 페이지를 포함하려면, 슈트이면 슈트 설정 페이지를 포함한 후 일반 설정 페이지를 포함한다."),E_.forEach(n),pr=r(Qt),Ll=l(Qt,"LI",{});var d_=e(Ll);or=o(d_,"To 슈트 설정 페이지를 포함하려면, 부모 계층에서 SuiteSetUp 페이지를 찾아 Include문과 페이지 경로를 추가한다."),d_.forEach(n),cr=r(Qt),ml=l(Qt,"LI",{});var h_=e(ml);ur=o(h_,"To 부모 계층을 검색하려면…"),h_.forEach(n),Qt.forEach(n),Do=r(s),fs=l(s,"H3",{id:!0});var L_=e(fs);ea=l(L_,"A",{href:!0});var m_=e(ea);ir=o(m_,"Switch문"),m_.forEach(n),L_.forEach(n),Mo=r(s),pa=l(s,"P",{});var y_=e(pa);rr=o(y_,"스위치 문을 다형성 객체를 생성하는 코드 안에서 허용하고 상속관계로 숨기고 다른 코드에 노출하지 않는 방법이 있다."),y_.forEach(n),xo=r(s),vs=l(s,"H3",{id:!0});var w_=e(vs);oa=l(w_,"A",{href:!0});var I_=e(oa);kr=o(I_,"서술적인 이름을 사용하라"),I_.forEach(n),w_.forEach(n),jo=r(s),ca=l(s,"P",{});var P_=e(ca);fr=o(P_,"이름이 길어도 괜찮고 서술적인 이름이 짧고 어려운 이름보다 좋다. 함수 이름을 정할때 여러 단어가 쉽게 읽히는 명명법을 사용하는것이 좋다. 여러 단어를 사용해 함수 기능을 표현하라"),P_.forEach(n),No=r(s),ua=l(s,"P",{});var A_=e(ua);vr=o(A_,"모듈 내에서 함수 이름은 같은 문구,명사,동사를 사용한다."),A_.forEach(n),qo=r(s),_s=l(s,"H3",{id:!0});var T_=e(_s);ia=l(T_,"A",{href:!0});var b_=e(ia);_r=o(b_,"함수 인수"),b_.forEach(n),T_.forEach(n),Fo=r(s),ra=l(s,"P",{});var S_=e(ra);Er=o(S_,"함수에서 이상적인 인수 개수는 0개이다. 다음은 1개이고 다음은2개이다. 최선은 입력 인수가 없는 경우 ex: IncludeSetupPageInfo(new PageContent) → includeSetupPage()"),S_.forEach(n),Go=r(s),Es=l(s,"P",{});var Lv=e(Es);yl=l(Lv,"EM",{});var O_=e(yl);dr=o(O_,"많이쓰는 단항형식"),O_.forEach(n),hr=o(Lv,`
함수에 인수 1개를 넘기는 이유`),Lv.forEach(n),Yo=r(s),M=l(s,"OL",{});var Zt=e(M);wl=l(Zt,"LI",{});var H_=e(wl);Lr=o(H_,"인수에 질문을 던지는 경우"),H_.forEach(n),mr=r(Zt),Il=l(Zt,"LI",{});var U_=e(Il);yr=o(U_,"인수를 뭔가로 변환해 결과를 반환하는 경우"),U_.forEach(n),wr=r(Zt),Pl=l(Zt,"LI",{});var R_=e(Pl);Ir=o(R_,"단항 함수 형식의 이벤트"),R_.forEach(n),Zt.forEach(n),Bo=r(s),ka=l(s,"P",{});var C_=e(ka);Pr=o(C_,"플래그 인수는 추하다. 함수에 부울 값을 넘기는 관례는 차라리 인수별말고 상황별로 함수를 나누는 편이 좋다"),C_.forEach(n),$o=r(s),ds=l(s,"P",{});var mv=e(ds);Al=l(mv,"EM",{});var D_=e(Al);Ar=o(D_,"이항함수"),D_.forEach(n),Tr=o(mv,`
인수가 2개인 함수는 1개인 함수보다 이해하기 어렵다. 프로그램을 짜다보면 불가피한 경우도 생기지만 그만큼 위험이 따른다`),mv.forEach(n),Xo=r(s),hs=l(s,"P",{});var yv=e(hs);Tl=l(yv,"EM",{});var M_=e(Tl);br=o(M_,"삼항함수"),M_.forEach(n),Sr=o(yv,`
삼항 함수부터는 신중히 고려해야 한다..`),yv.forEach(n),Wo=r(s),Ls=l(s,"P",{});var wv=e(Ls);bl=l(wv,"EM",{});var x_=e(bl);Or=o(x_,"동사와 키워드"),x_.forEach(n),Hr=o(wv,`
단항 함수는 함수와 인수가 동사/명사 쌍을 이ㅝ야 한다.
함수 이름에 키워드를 추가하는 편도 좋다`),wv.forEach(n),Jo=r(s),ms=l(s,"H3",{id:!0});var j_=e(ms);fa=l(j_,"A",{href:!0});var N_=e(fa);Ur=o(N_,"부수 효과를 일으키지 마라"),N_.forEach(n),j_.forEach(n),Ko=r(s),va=l(s,"P",{});var q_=e(va);Rr=o(q_,"함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓을 하지 말아라!"),q_.forEach(n),zo=r(s),ys=l(s,"H3",{id:!0});var F_=e(ys);_a=l(F_,"A",{href:!0});var G_=e(_a);Cr=o(G_,"명령과 조회를 분리하라!"),G_.forEach(n),F_.forEach(n),Vo=r(s),Ea=l(s,"P",{});var Y_=e(Ea);Dr=o(Y_,"함수는 뭔가를 수행하거나 뭔가에 답하거나 둘중 하나만 해야한다. 둘 다 하면 안 된다. 객체 상태를 변경하거나 아니면 객체 정보를 반환하거나 둘 중 하나다."),Y_.forEach(n),Qo=r(s),ws=l(s,"H3",{id:!0});var B_=e(ws);da=l(B_,"A",{href:!0});var $_=e(da);Mr=o($_,"Try/Catch 블록은 한 함수에서 별도로 처리"),$_.forEach(n),B_.forEach(n),Zo=r(s),ha=l(s,"P",{});var X_=e(ha);xr=o(X_,"코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다."),X_.forEach(n),go=r(s),Is=l(s,"H3",{id:!0});var W_=e(Is);La=l(W_,"A",{href:!0});var J_=e(La);jr=o(J_,"반복하지 마라"),J_.forEach(n),W_.forEach(n),sc=r(s),ma=l(s,"P",{});var K_=e(ma);Nr=o(K_,"중복은 소트트웨어에서 모든 악의 근원이다. 많은 원칙과 기법이 중복을 없애거나 제어할 목적으로 나왔다."),K_.forEach(n),nc=r(s),Ps=l(s,"H1",{id:!0});var z_=e(Ps);ya=l(z_,"A",{href:!0});var V_=e(ya);qr=o(V_,"4장 주석"),V_.forEach(n),z_.forEach(n),ac=r(s),wa=l(s,"P",{});var Q_=e(wa);Fr=o(Q_,"잘 달린 주석은 어떤 정보보다 유용하지만, 거짓말을 하는 경우가 많다. 일부가 여기서 저기로 옮겨지면서 발생하는 불상사"),Q_.forEach(n),tc=r(s),Ia=l(s,"P",{});var Z_=e(Ia);Gr=o(Z_,"진실은 한 곳에만 존재한다. 바로 코드다 코드만이 자기가 하는 일을 진실되게 말한다."),Z_.forEach(n),lc=r(s),As=l(s,"H3",{id:!0});var g_=e(As);Pa=l(g_,"A",{href:!0});var sE=e(Pa);Yr=o(sE,"주석은 나쁜 코드를 보완하지 못한다"),sE.forEach(n),g_.forEach(n),ec=r(s),Aa=l(s,"UL",{});var nE=e(Aa);Sl=l(nE,"LI",{});var aE=e(Sl);Br=o(aE,"표현력이 풍부하고 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다."),aE.forEach(n),nE.forEach(n),pc=r(s),Ts=l(s,"H3",{id:!0});var tE=e(Ts);Ta=l(tE,"A",{href:!0});var lE=e(Ta);$r=o(lE,"코드를 의도로 표현하라"),lE.forEach(n),tE.forEach(n),oc=r(s),ba=l(s,"UL",{});var eE=e(ba);Ol=l(eE,"LI",{});var pE=e(Ol);Xr=o(pE,"코드로 대다수 의도를 표현할수 있다 많은 경우 주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다."),pE.forEach(n),eE.forEach(n),cc=r(s),bs=l(s,"H3",{id:!0});var oE=e(bs);Sa=l(oE,"A",{href:!0});var cE=e(Sa);Wr=o(cE,"좋은 주석"),cE.forEach(n),oE.forEach(n),uc=r(s),L=l(s,"UL",{});var O=e(L);Hl=l(O,"LI",{});var uE=e(Hl);Jr=o(uE,"정말은 좋은 주석은 주석을 달지 않을 방법을 찾아낸 주석이라는 사실을 알아라"),uE.forEach(n),Kr=r(O),Ul=l(O,"LI",{});var iE=e(Ul);zr=o(iE,`법적인 주석
각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보`),iE.forEach(n),Vr=r(O),Rl=l(O,"LI",{});var rE=e(Rl);Qr=o(rE,`정보를 제공하는 주석
기본적인 정보를 주석으로 제공하면 편리하지만 그래도 함수 이름에 정보를 담는편이 좋다`),rE.forEach(n),Zr=r(O),Cl=l(O,"LI",{});var kE=e(Cl);gr=o(kE,`의도를 설명하는 주석
두 객체를 비교하는 하는 코드가 있다고 가정했을때 저자의 의도를 보여주는 코드가 좋다`),kE.forEach(n),sk=r(O),Dl=l(O,"LI",{});var fE=e(Dl);nk=o(fE,`의미를 명료하게 밝히는 주석
일반적으로 인수나 반환값 자체를 명확하게 만들면 더 좋겠지만, 인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미를 명료하게 밝히는 주석이 유용하다.`),fE.forEach(n),ak=r(O),Ml=l(O,"LI",{});var vE=e(Ml);tk=o(vE,`ex
docs형..
결과를 경고하는 주석
TODO주석
중요성을 강조하는 주석`),vE.forEach(n),O.forEach(n),ic=r(s),Ss=l(s,"H3",{id:!0});var _E=e(Ss);Oa=l(_E,"A",{href:!0});var EE=e(Oa);lk=o(EE,"나쁜 주석"),EE.forEach(n),_E.forEach(n),rc=r(s),Ha=l(s,"P",{});var dE=e(Ha);ek=o(dE,"대다수 주석이 속하는 범주, 허술한 코드를 지탱하거나, 엉뚱한 코드를 변명하거나, 미숙한 결정을 합리화 한다."),dE.forEach(n),kc=r(s),f=l(s,"UL",{});var v=e(f);xl=l(v,"LI",{});var hE=e(xl);pk=o(hE,"주절거리는 주석: 저자에게만 의미가 있고 의사소통이 어려운 주석들"),hE.forEach(n),ok=r(v),jl=l(v,"LI",{});var LE=e(jl);ck=o(LE,"같은 이야기를 중복하는 주석: 주석이 코드보다 더 많은 정보를 제공하지 못하는 경우"),LE.forEach(n),uk=r(v),Nl=l(v,"LI",{});var mE=e(Nl);ik=o(mE,"오해할 여지가 있는 주석: 코드보다 읽기도 어려운 주석에 살짝 잘못된 정보를 포함한 경우"),mE.forEach(n),rk=r(v),ql=l(v,"LI",{});var yE=e(ql);kk=o(yE,"의무적으로 다는 주석: javadocs를 넣으라는 규칙이 낳은 아무가치없는 주석"),yE.forEach(n),fk=r(v),Fl=l(v,"LI",{});var wE=e(Fl);vk=o(wE,"이력을 기록하는 주석: git이 있으니 이제 없어도 된다"),wE.forEach(n),_k=r(v),Gl=l(v,"LI",{});var IE=e(Gl);Ek=o(IE,"있으나 마나 한 주석: 너무 당연한 사실을 언급 가령 생성자를 알려주는 경우"),IE.forEach(n),dk=r(v),Yl=l(v,"LI",{});var PE=e(Yl);hk=o(PE,"위치를 표시하는 주석: 유용한 경우도 있지만 독자가 흔한 잡음으로 여겨 무시한다"),PE.forEach(n),Lk=r(v),Bl=l(v,"LI",{});var AE=e(Bl);mk=o(AE,"닫는 괄호에 다는 주석: 함수를 줄이는 편이 낫다."),AE.forEach(n),yk=r(v),$l=l(v,"LI",{});var TE=e($l);wk=o(TE,"공로를 돌리거나 저자를 표시하는 주석: 이것도 git에 맡기자"),TE.forEach(n),Ik=r(v),Xl=l(v,"LI",{});var bE=e(Xl);Pk=o(bE,"주석으로 처리한 코드: 주석으로 처리한 코드만큼 밉살스러운 관행도 드물다."),bE.forEach(n),Ak=r(v),Wl=l(v,"LI",{});var SE=e(Wl);Tk=o(SE,"HTML 주석: 주석을 뽑아 웹페이지에 올릴 작정이라면 태그를 삽입해야 하는 책임은 프로그래머가 아니라 도구가 져야 맞다"),SE.forEach(n),bk=r(v),Jl=l(v,"LI",{});var OE=e(Jl);Sk=o(OE,"전역 정보: 상수 값은 코드와 주석이 전혀 통제할수 없다"),OE.forEach(n),Ok=r(v),Kl=l(v,"LI",{});var HE=e(Kl);Hk=o(HE,"너무 많은 정보: 장황하게 늘어놓지 마라"),HE.forEach(n),Uk=r(v),zl=l(v,"LI",{});var UE=e(zl);Rk=o(UE,"모호한 관계: 주석과 주석이 설명하는 코드는 둘 사이에 관계가 명백해야 한다"),UE.forEach(n),Ck=r(v),Vl=l(v,"LI",{});var RE=e(Vl);Dk=o(RE,"함수 헤더: 짧은 함수는 긴 설명이 필요 없다. 짧고 한 가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다."),RE.forEach(n),Mk=r(v),Ql=l(v,"LI",{});var CE=e(Ql);xk=o(CE,"비공개 코드에서 Javadocs: 공개하지 않을 코드라면 자바독스는 쓸모가 없다"),CE.forEach(n),v.forEach(n),fc=r(s),Os=l(s,"H1",{id:!0});var DE=e(Os);Ua=l(DE,"A",{href:!0});var ME=e(Ua);jk=o(ME,"5장 형식 맞추기"),ME.forEach(n),DE.forEach(n),vc=r(s),Ra=l(s,"P",{});var xE=e(Ra);Nk=o(xE,"프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야 한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고 모두가 그 규칙을 따라야 한다."),xE.forEach(n),_c=r(s),Hs=l(s,"H3",{id:!0});var jE=e(Hs);Ca=l(jE,"A",{href:!0});var NE=e(Ca);qk=o(NE,"형식을 맞추는 목적"),NE.forEach(n),jE.forEach(n),Ec=r(s),K=l(s,"UL",{});var Nu=e(K);Zl=l(Nu,"LI",{});var qE=e(Zl);Fk=o(qE,"코드 형식은 매우 중요하다"),qE.forEach(n),Gk=r(Nu),gl=l(Nu,"LI",{});var FE=e(gl);Yk=o(FE,"오늘 구현한 기능이 다음 버전에서 바뀔 확률은 아주 높다. 가독성이 바뀔 코드의 품질을 결정한다."),FE.forEach(n),Nu.forEach(n),dc=r(s),Us=l(s,"H3",{id:!0});var GE=e(Us);Da=l(GE,"A",{href:!0});var YE=e(Da);Bk=o(YE,"적절한 행 길이를 유지하라"),YE.forEach(n),GE.forEach(n),hc=r(s),m=l(s,"UL",{});var H=e(m);se=l(H,"LI",{});var BE=e(se);ne=l(BE,"P",{});var $E=e(ne);$k=o($E,"대다수가 500줄을 넘지 않고 대부분이 200줄 정도인 파일로도 커다란 시스템을 구축할수 있다."),$E.forEach(n),BE.forEach(n),Xk=r(H),Rs=l(H,"LI",{});var qu=e(Rs);ae=l(qu,"P",{});var XE=e(ae);Wk=o(XE,"신문 기사처럼 작성하라"),XE.forEach(n),Jk=r(qu),R=l(qu,"UL",{});var ps=e(R);te=l(ps,"LI",{});var WE=e(te);Kk=o(WE,"최상단 기사를 몇 마디로 요약하는 표제가 나오고, 첫 문단이 기사 내용을 요약한다."),WE.forEach(n),zk=r(ps),le=l(ps,"LI",{});var JE=e(le);Vk=o(JE,"소스 파일도 이와 비슷하게 이름만 보고도 올바른 모듈을 판단 할 정도로 신경 써서 짓는다."),JE.forEach(n),Qk=r(ps),ee=l(ps,"LI",{});var KE=e(ee);Zk=o(KE,"소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명하고 아래로 내려갈수록 세세하게 묘사한다."),KE.forEach(n),gk=r(ps),pe=l(ps,"LI",{});var zE=e(pe);sf=o(zE,"신문은 다양한 기사로 이뤄진다. 대다수 기사가 아주 짧고 날짜, 이름들을 뒤섞은 긴 기사 하나만 싣는다면 아무도 읽지 않을것이다."),zE.forEach(n),ps.forEach(n),qu.forEach(n),nf=r(H),Cs=l(H,"LI",{});var Fu=e(Cs);oe=l(Fu,"P",{});var VE=e(oe);af=o(VE,"개념은 빈 행으로 분리하라"),VE.forEach(n),tf=r(Fu),Ds=l(Fu,"UL",{});var Gu=e(Ds);ce=l(Gu,"LI",{});var QE=e(ce);lf=o(QE,"모든 코드는 왼쪽에서 오른쪽으로 그리고 위에서 아래로 읽힌다."),QE.forEach(n),ef=r(Gu),ue=l(Gu,"LI",{});var ZE=e(ue);pf=o(ZE,"일련의 행 묶음은 완결된 생각 하나를 표현한다."),ZE.forEach(n),Gu.forEach(n),Fu.forEach(n),of=r(H),Ms=l(H,"LI",{});var Yu=e(Ms);ie=l(Yu,"P",{});var gE=e(ie);cf=o(gE,"세로 밀집도"),gE.forEach(n),uf=r(Yu),re=l(Yu,"UL",{});var s4=e(re);xs=l(s4,"LI",{});var Bu=e(xs);ke=l(Bu,"P",{});var n4=e(ke);rf=o(n4,"줄바꿈이 개념을 분리한다면 세로 밀집도는 연광성을 의미한다. 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다는 뜻이다."),n4.forEach(n),kf=r(Bu),Ma=l(Bu,"PRE",{class:!0});var QL=e(Ma);QL.forEach(n),Bu.forEach(n),s4.forEach(n),Yu.forEach(n),ff=r(H),js=l(H,"LI",{});var $u=e(js);fe=l($u,"P",{});var a4=e(fe);vf=o(a4,"수직 거리"),a4.forEach(n),_f=r($u),S=l($u,"UL",{});var q=e(S);ve=l(q,"LI",{});var t4=e(ve);_e=l(t4,"P",{});var l4=e(_e);Ef=o(l4,"서로 밀접한 개념은 세로로 가까이 둬야 한다. 물론 두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않는다. 하지만 타당한 근거 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다."),l4.forEach(n),t4.forEach(n),df=r(q),Ns=l(q,"LI",{});var Xu=e(Ns);Ee=l(Xu,"P",{});var e4=e(Ee);hf=o(e4,"변수선언 위치"),e4.forEach(n),Lf=r(Xu),qs=l(Xu,"UL",{});var Wu=e(qs);de=l(Wu,"LI",{});var p4=e(de);mf=o(p4,"사용하는 위치에 최대한 가까이 선언한다. 우리가 만든 함수는 매우 짧으므로 지역 변수는 각 함수 맨 처음에 선언한다."),p4.forEach(n),yf=r(Wu),he=l(Wu,"LI",{});var o4=e(he);wf=o(o4,"루프를 제어하는 변수는 흔히 루프문 내부에 선언한다. (아주 드물지만 블록 상단이나 루프 직전에 선언하는 사례도 있다)"),o4.forEach(n),Wu.forEach(n),Xu.forEach(n),If=r(q),Fs=l(q,"LI",{});var Ju=e(Fs);Le=l(Ju,"P",{});var c4=e(Le);Pf=o(c4,"인스턴스 변수"),c4.forEach(n),Af=r(Ju),me=l(Ju,"UL",{});var u4=e(me);ye=l(u4,"LI",{});var i4=e(ye);Tf=o(i4,"클래스 맨 처음에 선언한다."),i4.forEach(n),u4.forEach(n),Ju.forEach(n),bf=r(q),Gs=l(q,"LI",{});var Ku=e(Gs);we=l(Ku,"P",{});var r4=e(we);Sf=o(r4,"종속 함수"),r4.forEach(n),Of=r(Ku),Ie=l(Ku,"UL",{});var k4=e(Ie);Ys=l(k4,"LI",{});var zu=e(Ys);Pe=l(zu,"P",{});var f4=e(Pe);Hf=o(f4,"한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다."),f4.forEach(n),Uf=r(zu),xa=l(zu,"PRE",{class:!0});var ZL=e(xa);ZL.forEach(n),zu.forEach(n),k4.forEach(n),Ku.forEach(n),Rf=r(q),Bs=l(q,"LI",{});var Vu=e(Bs);Ae=l(Vu,"P",{});var v4=e(Ae);Cf=o(v4,"개념적 유사성"),v4.forEach(n),Df=r(Vu),$s=l(Vu,"UL",{});var Qu=e($s);Te=l(Qu,"LI",{});var _4=e(Te);Mf=o(_4,"친화도가 높을수록 코드를 가까이 배치한다."),_4.forEach(n),xf=r(Qu),be=l(Qu,"LI",{});var E4=e(be);jf=o(E4,"친화도가 높은 요인은 한 함수가 다른 함수를 호출해 생기는 종속성이 생기는 경우나 명명법이 똑가톡 기본 기능이 유사한 경우"),E4.forEach(n),Qu.forEach(n),Vu.forEach(n),q.forEach(n),$u.forEach(n),Nf=r(H),Xs=l(H,"LI",{});var Zu=e(Xs);Se=l(Zu,"P",{});var d4=e(Se);qf=o(d4,"세로 순서"),d4.forEach(n),Ff=r(Zu),Ws=l(Zu,"UL",{});var gu=e(Ws);Oe=l(gu,"LI",{});var h4=e(Oe);Gf=o(h4,"가장 중요한 개념을 가장 먼저 표현한다."),h4.forEach(n),Yf=r(gu),He=l(gu,"LI",{});var L4=e(He);Bf=o(L4,"세세한 사항을 최대한 배제한다."),L4.forEach(n),gu.forEach(n),Zu.forEach(n),H.forEach(n),Lc=r(s),Js=l(s,"H3",{id:!0});var m4=e(Js);ja=l(m4,"A",{href:!0});var y4=e(ja);$f=o(y4,"가로 형식 맞추기"),y4.forEach(n),m4.forEach(n),mc=r(s),h=l(s,"UL",{});var A=e(h);Ue=l(A,"LI",{});var w4=e(Ue);Xf=o(w4,"기존 오픈소스 코드들은 60자 이상부터 떨어진다. 프로그래머는 명백하게 짧은 행을 선호한다."),w4.forEach(n),Wf=r(A),Re=l(A,"LI",{});var I4=e(Re);Jf=o(I4,"100자나 120자에 달해도 나쁘지 않지만 그 이상은 솔직히 주의 부족이다."),I4.forEach(n),Kf=r(A),Ce=l(A,"LI",{});var P4=e(Ce);zf=o(P4,"가로 공백과 밀집도 가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다."),P4.forEach(n),Vf=r(A),Na=l(A,"LI",{});var Iv=e(Na);Qf=o(Iv,"가로 정렬"),Ks=l(Iv,"UL",{});var si=e(Ks);De=l(si,"LI",{});var A4=e(De);Zf=o(A4,"코드의 변수값을 강조하기 위해 가로공백을 넣지 말아라 ide에서 다 잡힌다"),A4.forEach(n),gf=r(si),Me=l(si,"LI",{});var T4=e(Me);s1=o(T4,"선언부가 길고 강조할게 많다면 클래스를 쪼개야 한다는 의미이다."),T4.forEach(n),si.forEach(n),Iv.forEach(n),n1=r(A),qa=l(A,"LI",{});var Pv=e(qa);a1=o(Pv,"들여쓰기"),zs=l(Pv,"UL",{});var ni=e(zs);xe=l(ni,"LI",{});var b4=e(xe);t1=o(b4,"들여쓰기 자체가 윤곽도를 보여준다"),b4.forEach(n),l1=r(ni),je=l(ni,"LI",{});var S4=e(je);e1=o(S4,"들여쓰기한 파일은 구조가 한눈에 들어온더. 변수, 생성자 함수, 접근자 함수, 메서드가 금방 보인다."),S4.forEach(n),ni.forEach(n),Pv.forEach(n),p1=r(A),Ne=l(A,"LI",{});var O4=e(Ne);o1=o(O4,"때로는 간단한 if, while, 짧은 함수에서 들여쓰기를 무시하고픈 유혹이 생긴다. 원점으로 돌아가도록 하자"),O4.forEach(n),c1=r(A),Fa=l(A,"LI",{});var Av=e(Fa);u1=o(Av,"팀 규칙"),qe=l(Av,"UL",{});var H4=e(qe);Fe=l(H4,"LI",{});var U4=e(Fe);i1=o(U4,"팀은 한 가지 규칙에 합의해야 한다. 그리고 모든 팀원은 그 규칙을 따라야 한다."),U4.forEach(n),H4.forEach(n),Av.forEach(n),A.forEach(n),yc=r(s),Vs=l(s,"H1",{id:!0});var R4=e(Vs);Ga=l(R4,"A",{href:!0});var C4=e(Ga);r1=o(C4,"6장 객체와 자료구조"),C4.forEach(n),R4.forEach(n),wc=r(s),Ya=l(s,"P",{});var D4=e(Ya);k1=o(D4,"변수를 비공개로 정의 하는 이유는 남들이 변수에 의존하지 않게 만들고 싶어서다."),D4.forEach(n),Ic=r(s),Qs=l(s,"H3",{id:!0});var M4=e(Qs);Ba=l(M4,"A",{href:!0});var x4=e(Ba);f1=o(x4,"자료 추상화"),x4.forEach(n),M4.forEach(n),Pc=r(s),z=l(s,"UL",{});var ai=e(z);Ge=l(ai,"LI",{});var j4=e(Ge);v1=o(j4,"변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필요하다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다."),j4.forEach(n),_1=r(ai),Ye=l(ai,"LI",{});var N4=e(Ye);E1=o(N4,"개발자는 객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다."),N4.forEach(n),ai.forEach(n),Ac=r(s),Zs=l(s,"H3",{id:!0});var q4=e(Zs);$a=l(q4,"A",{href:!0});var F4=e($a);d1=o(F4,"자료/객체 비대칭"),F4.forEach(n),q4.forEach(n),Tc=r(s),V=l(s,"UL",{});var ti=e(V);gs=l(ti,"LI",{});var li=e(gs);Be=l(li,"P",{});var G4=e(Be);h1=o(G4,"객체와 자료 구조는 근본적으로 양분된다."),G4.forEach(n),L1=r(li),$=l(li,"UL",{});var gt=e($);$e=l(gt,"LI",{});var Y4=e($e);m1=o(Y4,"절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 슆다."),Y4.forEach(n),y1=r(gt),Xe=l(gt,"LI",{});var B4=e(Xe);w1=o(B4,"절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야 한다."),B4.forEach(n),I1=r(gt),We=l(gt,"LI",{});var $4=e(We);P1=o($4,"둘다 참이다. 다시말해 객체 지향코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다."),$4.forEach(n),gt.forEach(n),li.forEach(n),A1=r(ti),sn=l(ti,"LI",{});var ei=e(sn);Je=l(ei,"P",{});var X4=e(Je);T1=o(X4,"예시"),X4.forEach(n),b1=r(ei),nn=l(ei,"UL",{});var pi=e(nn);an=l(pi,"LI",{});var oi=e(an);Ke=l(oi,"P",{});var W4=e(Ke);S1=o(W4,"절차적인 접근예시"),W4.forEach(n),O1=r(oi),Xa=l(oi,"PRE",{class:!0});var gL=e(Xa);gL.forEach(n),oi.forEach(n),H1=r(pi),tn=l(pi,"LI",{});var ci=e(tn);ze=l(ci,"P",{});var J4=e(ze);U1=o(J4,"다형성 접근예시"),J4.forEach(n),R1=r(ci),Wa=l(ci,"PRE",{class:!0});var s5=e(Wa);s5.forEach(n),ci.forEach(n),pi.forEach(n),ei.forEach(n),ti.forEach(n),bc=r(s),ln=l(s,"H3",{id:!0});var K4=e(ln);Ja=l(K4,"A",{href:!0});var z4=e(Ja);C1=o(z4,"디미터 법칙"),z4.forEach(n),K4.forEach(n),Sc=r(s),w=l(s,"UL",{});var F=e(w);Ve=l(F,"LI",{});var V4=e(Ve);D1=o(V4,"모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다."),V4.forEach(n),M1=r(F),Ka=l(F,"LI",{});var Tv=e(Ka);x1=o(Tv,"클래스 C의 메서드 f는 다음과 같은 메서드만 호출해야 한다"),C=l(Tv,"UL",{});var os=e(C);Qe=l(os,"LI",{});var Q4=e(Qe);j1=o(Q4,"클래스 C"),Q4.forEach(n),N1=r(os),Ze=l(os,"LI",{});var Z4=e(Ze);q1=o(Z4,"f가 생성한 객체"),Z4.forEach(n),F1=r(os),ge=l(os,"LI",{});var g4=e(ge);G1=o(g4,"f 인수로 넘어온 객체"),g4.forEach(n),Y1=r(os),sp=l(os,"LI",{});var sd=e(sp);B1=o(sd,"C 인스턴스 변수에 저장된 객체"),sd.forEach(n),os.forEach(n),Tv.forEach(n),$1=r(F),za=l(F,"LI",{});var bv=e(za);X1=o(bv,"기차 충돌"),X=l(bv,"UL",{});var sl=e(X);Va=l(sl,"LI",{});var Sv=e(Va);W1=o(Sv,"as-is"),np=l(Sv,"UL",{});var nd=e(np);ap=l(nd,"LI",{});var ad=e(ap);tp=l(ad,"STRONG",{});var td=e(tp);J1=o(td,"final String outputDir = ctext.getOptions().getScracthDir().getAbsolutePath();"),td.forEach(n),ad.forEach(n),nd.forEach(n),Sv.forEach(n),K1=r(sl),Qa=l(sl,"LI",{});var Ov=e(Qa);z1=o(Ov,"to-be"),lp=l(Ov,"UL",{});var ld=e(lp);ep=l(ld,"LI",{});var ed=e(ep);pp=l(ed,"STRONG",{});var pd=e(pp);V1=o(pd,`Options opts = ctxt.getOptions();
File scractchDir = opts.getScratchDir();
final String outputDir = scracthDir.getAbsolutePath();`),pd.forEach(n),ed.forEach(n),ld.forEach(n),Ov.forEach(n),Q1=r(sl),op=l(sl,"LI",{});var od=e(op);Z1=o(od,"객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 자료구조 라면 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다."),od.forEach(n),sl.forEach(n),bv.forEach(n),g1=r(F),Za=l(F,"LI",{});var Hv=e(Za);s3=o(Hv,"잡종 구조"),en=l(Hv,"UL",{});var ui=e(en);cp=l(ui,"LI",{});var cd=e(cp);n3=o(cd,"절반은 객체, 절반은 자료 구조인 잡종 구조가 나온다."),cd.forEach(n),a3=r(ui),up=l(ui,"LI",{});var ud=e(up);t3=o(ud,"이런 잡종 구조는 새로운 함수는 물론이고 새로운 자료 구조도 추가하기 어렵다. 단점만 모아놓은 구조"),ud.forEach(n),ui.forEach(n),Hv.forEach(n),l3=r(F),ga=l(F,"LI",{});var Uv=e(ga);e3=o(Uv,"구조체 감추기"),W=l(Uv,"UL",{});var nl=e(W);ip=l(nl,"LI",{});var id=e(ip);p3=o(id,"그렇다면 임시 디렉토러의 절대 경로는 어떻게 얻어야 좋을까?"),id.forEach(n),o3=r(nl),rp=l(nl,"LI",{});var rd=e(rp);c3=o(rd,`ctxt.getAboslutePathOfScratchDirectoryOption(); → ctxt 객체에 공개해야 하는 메서드가 너무 많아진다
ctx.getScratchDirectoryOption().getAbsolutePath(); → 자료 구조를 반환 한다고 가정한다.`),rd.forEach(n),u3=r(nl),kp=l(nl,"LI",{});var kd=e(kp);i3=o(kd,`그렇다면 ctxt 객체에 임시 파일을 생성하라고 시키면 어떨까?
BufferedOutputStream bos = ctxt.createScratchFilesStream(classFileName);
객체에게 맡기기에 적당한 임무로 보인다!`),kd.forEach(n),nl.forEach(n),Uv.forEach(n),F.forEach(n),Oc=r(s),pn=l(s,"H3",{id:!0});var fd=e(pn);st=l(fd,"A",{href:!0});var vd=e(st);r3=o(vd,"자료 전달 객체"),vd.forEach(n),fd.forEach(n),Hc=r(s),x=l(s,"UL",{});var al=e(x);fp=l(al,"LI",{});var _d=e(fp);vp=l(_d,"P",{});var Ed=e(vp);k3=o(Ed,"자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스이다. 이런 자료구조체를 DTO(Data Transfer Object)라 한다."),Ed.forEach(n),_d.forEach(n),f3=r(al),on=l(al,"LI",{});var ii=e(on);_p=l(ii,"P",{});var dd=e(_p);v3=o(dd,"좀더 일반적인 형태는 Bean 구조이다. 비공개 변수를 조회 설정 함수로 조작하는 방식. 사이비 캡슐화로 일부 순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다."),dd.forEach(n),_3=r(ii),nt=l(ii,"PRE",{class:!0});var n5=e(nt);n5.forEach(n),ii.forEach(n),E3=r(al),cn=l(al,"LI",{});var ri=e(cn);Ep=l(ri,"P",{});var hd=e(Ep);d3=o(hd,"활성 레코드"),hd.forEach(n),h3=r(ri),dp=l(ri,"UL",{});var Ld=e(dp);hp=l(Ld,"LI",{});var md=e(hp);L3=o(md,"공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료구조, 대게 save나 find와 같이 탐색함수도 제공한다. 불행히도 비즈니스 규칙 메서드를 추가해 이런 자료 구조를 개체로 취급하는 개발자가 흔하다. 하지만 이는 바람직하지 않다. 활성 레코드는 자료 구조로 취급한다."),md.forEach(n),Ld.forEach(n),ri.forEach(n),al.forEach(n),Uc=r(s),un=l(s,"H3",{id:!0});var yd=e(un);at=l(yd,"A",{href:!0});var wd=e(at);m3=o(wd,"결론"),wd.forEach(n),yd.forEach(n),Rc=r(s),j=l(s,"UL",{});var tl=e(j);Lp=l(tl,"LI",{});var Id=e(Lp);y3=o(Id,"객체는 동작을 공개하고 자료를 숨긴다. 기존 동작을 변경하지 않으면서 객체 타입을 추가하기는 쉬운 반면 기존 객체에 새 동작을 추가하기는 어렵다."),Id.forEach(n),w3=r(tl),mp=l(tl,"LI",{});var Pd=e(mp);I3=o(Pd,"자료 구조는 동작 없이 자료를 노출한다. 기존 자료 구조에 새 동작을 추가하기 쉬우나, 기존 함수에 새 자료 구조를 추가하기는 어렵다."),Pd.forEach(n),P3=r(tl),yp=l(tl,"LI",{});var Ad=e(yp);A3=o(Ad,"시스템을 구현할때 새로운 자료 타입을 추가하는 유연셩이 필요하면 객체가 더 적합하다. 새로운 동작을 추가하는 유연성이 필요하면 절차적인 코드가 더 적합하다. 어느쪽이 맞는가는 상황에 따라 다르다."),Ad.forEach(n),tl.forEach(n),Cc=r(s),rn=l(s,"H1",{id:!0});var Td=e(rn);tt=l(Td,"A",{href:!0});var bd=e(tt);T3=o(bd,"7장 오류처리"),bd.forEach(n),Td.forEach(n),Dc=r(s),lt=l(s,"UL",{});var Sd=e(lt);wp=l(Sd,"LI",{});var Od=e(wp);b3=o(Od,"깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),Od.forEach(n),Sd.forEach(n),Mc=r(s),kn=l(s,"H3",{id:!0});var Hd=e(kn);et=l(Hd,"A",{href:!0});var Ud=e(et);S3=o(Ud,"오류 코드보다 예외를 사용하라"),Ud.forEach(n),Hd.forEach(n),xc=r(s),pt=l(s,"UL",{});var Rd=e(pt);Ip=l(Rd,"LI",{});var Cd=e(Ip);O3=o(Cd,"과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),Cd.forEach(n),Rd.forEach(n),jc=r(s),fn=l(s,"H3",{id:!0});var Dd=e(fn);ot=l(Dd,"A",{href:!0});var Md=e(ot);H3=o(Md,"Try-Catch-Finally 문부터 작성하라"),Md.forEach(n),Dd.forEach(n),Nc=r(s),Q=l(s,"UL",{});var ki=e(Q);Pp=l(ki,"LI",{});var xd=e(Pp);U3=o(xd,"예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),xd.forEach(n),R3=r(ki),Ap=l(ki,"LI",{});var jd=e(Ap);C3=o(jd,"강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),jd.forEach(n),ki.forEach(n),qc=r(s),vn=l(s,"H3",{id:!0});var Nd=e(vn);ct=l(Nd,"A",{href:!0});var qd=e(ct);D3=o(qd,"미확인 예외를 사용하라"),qd.forEach(n),Nd.forEach(n),Fc=r(s),ut=l(s,"UL",{});var Fd=e(ut);Tp=l(Fd,"LI",{});var Gd=e(Tp);M3=o(Gd,"확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),Gd.forEach(n),Fd.forEach(n),Gc=r(s),_n=l(s,"H3",{id:!0});var Yd=e(_n);it=l(Yd,"A",{href:!0});var Bd=e(it);x3=o(Bd,"예외에 의미를 제공하라"),Bd.forEach(n),Yd.forEach(n),Yc=r(s),rt=l(s,"UL",{});var $d=e(rt);bp=l($d,"LI",{});var Xd=e(bp);j3=o(Xd,"예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),Xd.forEach(n),$d.forEach(n),Bc=r(s),En=l(s,"H3",{id:!0});var Wd=e(En);kt=l(Wd,"A",{href:!0});var Jd=e(kt);N3=o(Jd,"호출자를 고려해 예외 클래스를 정의하라"),Jd.forEach(n),Wd.forEach(n),$c=r(s),ft=l(s,"UL",{});var Kd=e(ft);Sp=l(Kd,"LI",{});var zd=e(Sp);q3=o(zd,"오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),zd.forEach(n),Kd.forEach(n),Xc=r(s),dn=l(s,"PRE",{class:!0});var a5=e(dn);a5.forEach(n),Wc=r(s),vt=l(s,"UL",{});var Vd=e(vt);Op=l(Vd,"LI",{});var Qd=e(Op);F3=o(Qd,"위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),Qd.forEach(n),Vd.forEach(n),Jc=r(s),hn=l(s,"H3",{id:!0});var Zd=e(hn);_t=l(Zd,"A",{href:!0});var gd=e(_t);G3=o(gd,"정상 흐름을 정의하라"),gd.forEach(n),Zd.forEach(n),Kc=r(s),Et=l(s,"UL",{});var sh=e(Et);Hp=l(sh,"LI",{});var nh=e(Hp);Y3=o(nh,`앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다.
특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다.`),nh.forEach(n),sh.forEach(n),zc=r(s),Ln=l(s,"H3",{id:!0});var ah=e(Ln);dt=l(ah,"A",{href:!0});var th=e(dt);B3=o(th,"null을 반환하지 마라"),th.forEach(n),ah.forEach(n),Vc=r(s),ht=l(s,"UL",{});var lh=e(ht);Up=l(lh,"LI",{});var eh=e(Up);$3=o(eh,"null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),eh.forEach(n),lh.forEach(n),Qc=r(s),mn=l(s,"H3",{id:!0});var ph=e(mn);Lt=l(ph,"A",{href:!0});var oh=e(Lt);X3=o(oh,"null을 전달하지 마라"),oh.forEach(n),ph.forEach(n),Zc=r(s),mt=l(s,"UL",{});var ch=e(mt);Rp=l(ch,"LI",{});var uh=e(Rp);W3=o(uh,"NullpointException을 야기하는 코드는 만들지 말자"),uh.forEach(n),ch.forEach(n),gc=r(s),yn=l(s,"H3",{id:!0});var ih=e(yn);yt=l(ih,"A",{href:!0});var rh=e(yt);J3=o(rh,"결론"),rh.forEach(n),ih.forEach(n),su=r(s),wt=l(s,"UL",{});var kh=e(wt);Cp=l(kh,"LI",{});var fh=e(Cp);K3=o(fh,"깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),fh.forEach(n),kh.forEach(n),nu=r(s),wn=l(s,"H1",{id:!0});var vh=e(wn);It=l(vh,"A",{href:!0});var _h=e(It);z3=o(_h,"8장 경계"),_h.forEach(n),vh.forEach(n),au=r(s),In=l(s,"H3",{id:!0});var Eh=e(In);Pt=l(Eh,"A",{href:!0});var dh=e(Pt);V3=o(dh,"서드파티 코드 사용하기"),dh.forEach(n),Eh.forEach(n),tu=r(s),Z=l(s,"UL",{});var fi=e(Z);Dp=l(fi,"LI",{});var hh=e(Dp);Q3=o(hh,"인터페이스를 “제공하는” 입장과 “사용하는” 입장 사이에는 필연적인 긴장감이 존재한다."),hh.forEach(n),Z3=r(fi),Mp=l(fi,"LI",{});var Lh=e(Mp);g3=o(Lh,"사용하는 입장에서 인터페이스의 변경을 우려한다면 래핑하는것도 하나의 방법이다."),Lh.forEach(n),fi.forEach(n),lu=r(s),Pn=l(s,"H3",{id:!0});var mh=e(Pn);At=l(mh,"A",{href:!0});var yh=e(At);s2=o(yh,"경계를 탐험하고 공부하기"),yh.forEach(n),mh.forEach(n),eu=r(s),g=l(s,"UL",{});var vi=e(g);xp=l(vi,"LI",{});var wh=e(xp);n2=o(wh,"서드파티 코드를 사용할때 우리는 사용할 코드에 대해 테스트할 필요가 있다."),wh.forEach(n),a2=r(vi),jp=l(vi,"LI",{});var Ih=e(jp);t2=o(Ih,"log4j의 예"),Ih.forEach(n),vi.forEach(n),pu=r(s),An=l(s,"PRE",{class:!0});var t5=e(An);t5.forEach(n),ou=r(s),Tn=l(s,"H3",{id:!0});var Ph=e(Tn);Tt=l(Ph,"A",{href:!0});var Ah=e(Tt);l2=o(Ah,"아직 존재하지 않는 코드 사용하기"),Ah.forEach(n),Ph.forEach(n),cu=r(s),ss=l(s,"UL",{});var _i=e(ss);Np=l(_i,"LI",{});var Th=e(Np);e2=o(Th,"아직 개발되지 않은 모듈이 필요한데, 인터페이스를 정의하면 분업이 가능하다"),Th.forEach(n),p2=r(_i),qp=l(_i,"LI",{});var bh=e(qp);o2=o(bh,"인터페이스를 정의 함으로써 메인로직을 더 깔끔하게 짤 수 있다."),bh.forEach(n),_i.forEach(n),uu=r(s),bn=l(s,"H3",{id:!0});var Sh=e(bn);bt=l(Sh,"A",{href:!0});var Oh=e(bt);c2=o(Oh,"Clean한 경계"),Oh.forEach(n),Sh.forEach(n),iu=r(s),St=l(s,"UL",{});var Hh=e(St);Fp=l(Hh,"LI",{});var Uh=e(Fp);u2=o(Uh,"좋은 소프트웨어는 변경에 유연하게 대처해야 한다. 내부 코드가 서드파티에 영향을 줄수 없게 래핑하듯 변경에 유연하게 대처할수 있는 경계를 만들어야 한다."),Uh.forEach(n),Hh.forEach(n),ru=r(s),Sn=l(s,"H1",{id:!0});var Rh=e(Sn);Ot=l(Rh,"A",{href:!0});var Ch=e(Ot);i2=o(Ch,"9장 유닛테스트"),Ch.forEach(n),Rh.forEach(n),ku=r(s),Ht=l(s,"P",{});var Dh=e(Ht);r2=o(Dh,"코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),Dh.forEach(n),fu=r(s),On=l(s,"H3",{id:!0});var Mh=e(On);Ut=l(Mh,"A",{href:!0});var xh=e(Ut);k2=o(xh,"The Three Laws of TDD"),xh.forEach(n),Mh.forEach(n),vu=r(s),N=l(s,"UL",{});var ll=e(N);Rt=l(ll,"LI",{});var Rv=e(Rt);Gp=l(Rv,"STRONG",{});var jh=e(Gp);f2=o(jh,"첫째 법칙:"),jh.forEach(n),v2=o(Rv," 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),Rv.forEach(n),_2=r(ll),Ct=l(ll,"LI",{});var Cv=e(Ct);Yp=l(Cv,"STRONG",{});var Nh=e(Yp);E2=o(Nh,"둘째 법칙:"),Nh.forEach(n),d2=o(Cv," 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),Cv.forEach(n),h2=r(ll),Dt=l(ll,"LI",{});var Dv=e(Dt);Bp=l(Dv,"STRONG",{});var qh=e(Bp);L2=o(qh,"셋째 법칙:"),qh.forEach(n),m2=o(Dv," 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),Dv.forEach(n),ll.forEach(n),_u=r(s),Mt=l(s,"P",{});var Fh=e(Mt);y2=o(Fh,"위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),Fh.forEach(n),Eu=r(s),Hn=l(s,"H3",{id:!0});var Gh=e(Hn);xt=l(Gh,"A",{href:!0});var Yh=e(xt);w2=o(Yh,"깨끗한 테스트 코드 유지하기"),Yh.forEach(n),Gh.forEach(n),du=r(s),I=l(s,"UL",{});var G=e(I);$p=l(G,"LI",{});var Bh=e($p);I2=o(Bh,"테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것"),Bh.forEach(n),P2=r(G),Xp=l(G,"LI",{});var $h=e(Xp);A2=o($h,"테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다"),$h.forEach(n),T2=r(G),Wp=l(G,"LI",{});var Xh=e(Wp);Jp=l(Xh,"STRONG",{});var Wh=e(Jp);b2=o(Wh,"코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),Wh.forEach(n),Xh.forEach(n),S2=r(G),Kp=l(G,"LI",{});var Jh=e(Kp);O2=o(Jh,"테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다."),Jh.forEach(n),H2=r(G),zp=l(G,"LI",{});var Kh=e(zp);U2=o(Kh,"테스트 코드가 지저분하면 실제 코드도 망가진다"),Kh.forEach(n),G.forEach(n),hu=r(s),Un=l(s,"H3",{id:!0});var zh=e(Un);jt=l(zh,"A",{href:!0});var Vh=e(jt);R2=o(Vh,"깨끗한 테스트 코드"),Vh.forEach(n),zh.forEach(n),Lu=r(s),ns=l(s,"UL",{});var Ei=e(ns);Rn=l(Ei,"LI",{});var di=e(Rn);C2=o(di,"깨끗한 코드를 만드려면 "),Vp=l(di,"STRONG",{});var Qh=e(Vp);D2=o(Qh,"가독성"),Qh.forEach(n),M2=o(di," 이 필요하다"),di.forEach(n),x2=r(Ei),Qp=l(Ei,"LI",{});var Zh=e(Qp);Zp=l(Zh,"STRONG",{});var gh=e(Zp);j2=o(gh,"BUILD-OPERATE-CHECK 패턴 → 테스트 자료 만들기, 자료 조작, 결과 확인"),gh.forEach(n),Zh.forEach(n),Ei.forEach(n),mu=r(s),Cn=l(s,"PRE",{class:!0});var l5=e(Cn);l5.forEach(n),yu=r(s),Dn=l(s,"H3",{id:!0});var sL=e(Dn);Nt=l(sL,"A",{href:!0});var nL=e(Nt);N2=o(nL,"도메인에 특화된 테스트 언어"),nL.forEach(n),sL.forEach(n),wu=r(s),qt=l(s,"UL",{});var aL=e(qt);gp=l(aL,"LI",{});var tL=e(gp);q2=o(tL,"시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),tL.forEach(n),aL.forEach(n),Iu=r(s),Mn=l(s,"H3",{id:!0});var lL=e(Mn);Ft=l(lL,"A",{href:!0});var eL=e(Ft);F2=o(eL,"이중 표준"),eL.forEach(n),lL.forEach(n),Pu=r(s),Gt=l(s,"UL",{});var pL=e(Gt);so=l(pL,"LI",{});var oL=e(so);G2=o(oL,"테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),oL.forEach(n),pL.forEach(n),Au=r(s),xn=l(s,"PRE",{class:!0});var e5=e(xn);e5.forEach(n),Tu=r(s),jn=l(s,"PRE",{class:!0});var p5=e(jn);p5.forEach(n),bu=r(s),Nn=l(s,"H3",{id:!0});var cL=e(Nn);Yt=l(cL,"A",{href:!0});var uL=e(Yt);Y2=o(uL,"테스트 당 assert 하나"),uL.forEach(n),cL.forEach(n),Su=r(s),qn=l(s,"PRE",{class:!0});var o5=e(qn);o5.forEach(n),Ou=r(s),as=l(s,"UL",{});var hi=e(as);no=l(hi,"LI",{});var iL=e(no);B2=o(iL,"위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다"),iL.forEach(n),$2=r(hi),ao=l(hi,"LI",{});var rL=e(ao);X2=o(rL,"이 부분은 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),rL.forEach(n),hi.forEach(n),Hu=r(s),Fn=l(s,"H3",{id:!0});var kL=e(Fn);Bt=l(kL,"A",{href:!0});var fL=e(Bt);W2=o(fL,"테스트당 개념 하나"),fL.forEach(n),kL.forEach(n),Uu=r(s),Gn=l(s,"PRE",{class:!0});var c5=e(Gn);c5.forEach(n),Ru=r(s),ts=l(s,"UL",{});var Li=e(ts);$t=l(Li,"LI",{});var Mv=e($t);J2=o(Mv,"테스트가 내포하는 의미"),Yn=l(Mv,"UL",{});var mi=e(Yn);Xt=l(mi,"LI",{});var xv=e(Xt);K2=o(xv,"(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),Bn=l(xv,"OL",{});var yi=e(Bn);to=l(yi,"LI",{});var vL=e(to);z2=o(vL,"(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),vL.forEach(n),V2=r(yi),lo=l(yi,"LI",{});var _L=e(lo);Q2=o(_L,"두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),_L.forEach(n),yi.forEach(n),xv.forEach(n),Z2=r(mi),Wt=l(mi,"LI",{});var jv=e(Wt);g2=o(jv,"(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),eo=l(jv,"OL",{});var EL=e(eo);po=l(EL,"LI",{});var dL=e(po);sv=o(dL,"31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),dL.forEach(n),EL.forEach(n),jv.forEach(n),mi.forEach(n),Mv.forEach(n),nv=r(Li),oo=l(Li,"LI",{});var hL=e(oo);av=o(hL,"이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),hL.forEach(n),Li.forEach(n),Cu=r(s),$n=l(s,"H3",{id:!0});var LL=e($n);Jt=l(LL,"A",{href:!0});var mL=e(Jt);co=l(mL,"STRONG",{});var yL=e(co);tv=o(yL,"F.I.R.S.T"),yL.forEach(n),mL.forEach(n),LL.forEach(n),Du=r(s),Kt=l(s,"P",{});var wL=e(Kt);lv=o(wL,"테스트는 아래 5가지 요소를 충족해야 한다"),wL.forEach(n),Mu=r(s),P=l(s,"UL",{});var Y=e(P);uo=l(Y,"LI",{});var IL=e(uo);io=l(IL,"STRONG",{});var PL=e(io);ev=o(PL,"빠르게Fast"),PL.forEach(n),IL.forEach(n),pv=r(Y),ro=l(Y,"LI",{});var AL=e(ro);ko=l(AL,"STRONG",{});var TL=e(ko);ov=o(TL,"독립적으로Independent → 테스트간 의존관계가 있으면 안된다"),TL.forEach(n),AL.forEach(n),cv=r(Y),fo=l(Y,"LI",{});var bL=e(fo);vo=l(bL,"STRONG",{});var SL=e(vo);uv=o(SL,"반복가능하게Repeatable → 환경에 구애받지 않는"),SL.forEach(n),bL.forEach(n),iv=r(Y),_o=l(Y,"LI",{});var OL=e(_o);Eo=l(OL,"STRONG",{});var HL=e(Eo);rv=o(HL,"자가검증하는Self-Validating → 테스트가 스스로 bool로 결론나야 한다"),HL.forEach(n),OL.forEach(n),kv=r(Y),ho=l(Y,"LI",{});var UL=e(ho);Lo=l(UL,"STRONG",{});var RL=e(Lo);fv=o(RL,"적시에Timely → 테스트 코드를 만들고 운영코드를 작성하라"),RL.forEach(n),UL.forEach(n),Y.forEach(n),xu=r(s),Xn=l(s,"H3",{id:!0});var CL=e(Xn);zt=l(CL,"A",{href:!0});var DL=e(zt);vv=o(DL,"결론"),DL.forEach(n),CL.forEach(n),ju=r(s),ls=l(s,"UL",{});var wi=e(ls);mo=l(wi,"LI",{});var ML=e(mo);_v=o(ML,"깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다"),ML.forEach(n),Ev=r(wi),yo=l(wi,"LI",{});var xL=e(yo);dv=o(xL,"지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),xL.forEach(n),wi.forEach(n),this.h()},h(){k(T,"href","#1장-깨끗한-코드"),k(E,"id","1장-깨끗한-코드"),k(zn,"href","#2장-의미있는-이름"),k(cs,"id","2장-의미있는-이름"),k(Vn,"href","#3장-함수"),k(us,"id","3장-함수"),k(Qn,"href","#작게-만들어라"),k(is,"id","작게-만들어라"),k(gn,"href","#한-가지만-해라"),k(rs,"id","한-가지만-해라"),k(na,"href","#함수-당-추상화-수준은-하나로"),k(ks,"id","함수-당-추상화-수준은-하나로"),k(ea,"href","#switch문"),k(fs,"id","switch문"),k(oa,"href","#서술적인-이름을-사용하라"),k(vs,"id","서술적인-이름을-사용하라"),k(ia,"href","#함수-인수"),k(_s,"id","함수-인수"),k(fa,"href","#부수-효과를-일으키지-마라"),k(ms,"id","부수-효과를-일으키지-마라"),k(_a,"href","#명령과-조회를-분리하라"),k(ys,"id","명령과-조회를-분리하라"),k(da,"href","#trycatch-블록은-한-함수에서-별도로-처리"),k(ws,"id","trycatch-블록은-한-함수에서-별도로-처리"),k(La,"href","#반복하지-마라"),k(Is,"id","반복하지-마라"),k(ya,"href","#4장-주석"),k(Ps,"id","4장-주석"),k(Pa,"href","#주석은-나쁜-코드를-보완하지-못한다"),k(As,"id","주석은-나쁜-코드를-보완하지-못한다"),k(Ta,"href","#코드를-의도로-표현하라"),k(Ts,"id","코드를-의도로-표현하라"),k(Sa,"href","#좋은-주석"),k(bs,"id","좋은-주석"),k(Oa,"href","#나쁜-주석"),k(Ss,"id","나쁜-주석"),k(Ua,"href","#5장-형식-맞추기"),k(Os,"id","5장-형식-맞추기"),k(Ca,"href","#형식을-맞추는-목적"),k(Hs,"id","형식을-맞추는-목적"),k(Da,"href","#적절한-행-길이를-유지하라"),k(Us,"id","적절한-행-길이를-유지하라"),k(Ma,"class","language-java"),k(xa,"class","language-java"),k(ja,"href","#가로-형식-맞추기"),k(Js,"id","가로-형식-맞추기"),k(Ga,"href","#6장-객체와-자료구조"),k(Vs,"id","6장-객체와-자료구조"),k(Ba,"href","#자료-추상화"),k(Qs,"id","자료-추상화"),k($a,"href","#자료객체-비대칭"),k(Zs,"id","자료객체-비대칭"),k(Xa,"class","language-java"),k(Wa,"class","language-java"),k(Ja,"href","#디미터-법칙"),k(ln,"id","디미터-법칙"),k(st,"href","#자료-전달-객체"),k(pn,"id","자료-전달-객체"),k(nt,"class","language-java"),k(at,"href","#결론"),k(un,"id","결론"),k(tt,"href","#7장-오류처리"),k(rn,"id","7장-오류처리"),k(et,"href","#오류-코드보다-예외를-사용하라"),k(kn,"id","오류-코드보다-예외를-사용하라"),k(ot,"href","#try-catch-finally-문부터-작성하라"),k(fn,"id","try-catch-finally-문부터-작성하라"),k(ct,"href","#미확인-예외를-사용하라"),k(vn,"id","미확인-예외를-사용하라"),k(it,"href","#예외에-의미를-제공하라"),k(_n,"id","예외에-의미를-제공하라"),k(kt,"href","#호출자를-고려해-예외-클래스를-정의하라"),k(En,"id","호출자를-고려해-예외-클래스를-정의하라"),k(dn,"class","language-java"),k(_t,"href","#정상-흐름을-정의하라"),k(hn,"id","정상-흐름을-정의하라"),k(dt,"href","#null을-반환하지-마라"),k(Ln,"id","null을-반환하지-마라"),k(Lt,"href","#null을-전달하지-마라"),k(mn,"id","null을-전달하지-마라"),k(yt,"href","#결론-1"),k(yn,"id","결론-1"),k(It,"href","#8장-경계"),k(wn,"id","8장-경계"),k(Pt,"href","#서드파티-코드-사용하기"),k(In,"id","서드파티-코드-사용하기"),k(At,"href","#경계를-탐험하고-공부하기"),k(Pn,"id","경계를-탐험하고-공부하기"),k(An,"class","language-java"),k(Tt,"href","#아직-존재하지-않는-코드-사용하기"),k(Tn,"id","아직-존재하지-않는-코드-사용하기"),k(bt,"href","#clean한-경계"),k(bn,"id","clean한-경계"),k(Ot,"href","#9장-유닛테스트"),k(Sn,"id","9장-유닛테스트"),k(Ut,"href","#the-three-laws-of-tdd"),k(On,"id","the-three-laws-of-tdd"),k(xt,"href","#깨끗한-테스트-코드-유지하기"),k(Hn,"id","깨끗한-테스트-코드-유지하기"),k(jt,"href","#깨끗한-테스트-코드"),k(Un,"id","깨끗한-테스트-코드"),k(Cn,"class","language-java"),k(Nt,"href","#도메인에-특화된-테스트-언어"),k(Dn,"id","도메인에-특화된-테스트-언어"),k(Ft,"href","#이중-표준"),k(Mn,"id","이중-표준"),k(xn,"class","language-java"),k(jn,"class","language-java"),k(Yt,"href","#테스트-당-assert-하나"),k(Nn,"id","테스트-당-assert-하나"),k(qn,"class","language-java"),k(Bt,"href","#테스트당-개념-하나"),k(Fn,"id","테스트당-개념-하나"),k(Gn,"class","language-java"),k(Jt,"href","#first"),k($n,"id","first"),k(zt,"href","#결론-2"),k(Xn,"id","결론-2")},m(s,c){u(s,E,c),a(E,T),a(T,B),u(s,J,c),u(s,_,c),a(_,b),a(b,Jn),a(_,Ii),a(_,Kn),a(Kn,Pi),a(Kn,U),a(U,el),a(el,Ai),a(U,Ti),a(U,pl),a(pl,bi),a(U,Si),a(U,ol),a(ol,Oi),a(U,Hi),a(U,cl),a(cl,Ui),a(_,Ri),a(_,ul),a(ul,Ci),u(s,wo,c),u(s,cs,c),a(cs,zn),a(zn,Di),u(s,Io,c),u(s,d,c),a(d,il),a(il,Mi),a(d,xi),a(d,rl),a(rl,ji),a(d,Ni),a(d,kl),a(kl,qi),a(d,Fi),a(d,fl),a(fl,Gi),a(d,Yi),a(d,vl),a(vl,Bi),a(d,$i),a(d,_l),a(_l,Xi),a(d,Wi),a(d,El),a(El,Ji),a(d,Ki),a(d,dl),a(dl,zi),u(s,Po,c),u(s,us,c),a(us,Vn),a(Vn,Vi),u(s,Ao,c),u(s,is,c),a(is,Qn),a(Qn,Qi),u(s,To,c),u(s,Zn,c),a(Zn,Zi),u(s,bo,c),u(s,rs,c),a(rs,gn),a(gn,gi),u(s,So,c),u(s,sa,c),a(sa,sr),u(s,Oo,c),u(s,ks,c),a(ks,na),a(na,nr),u(s,Ho,c),u(s,aa,c),a(aa,ar),u(s,Uo,c),u(s,ta,c),a(ta,tr),u(s,Ro,c),u(s,la,c),a(la,lr),u(s,Co,c),u(s,D,c),a(D,hl),a(hl,er),a(D,pr),a(D,Ll),a(Ll,or),a(D,cr),a(D,ml),a(ml,ur),u(s,Do,c),u(s,fs,c),a(fs,ea),a(ea,ir),u(s,Mo,c),u(s,pa,c),a(pa,rr),u(s,xo,c),u(s,vs,c),a(vs,oa),a(oa,kr),u(s,jo,c),u(s,ca,c),a(ca,fr),u(s,No,c),u(s,ua,c),a(ua,vr),u(s,qo,c),u(s,_s,c),a(_s,ia),a(ia,_r),u(s,Fo,c),u(s,ra,c),a(ra,Er),u(s,Go,c),u(s,Es,c),a(Es,yl),a(yl,dr),a(Es,hr),u(s,Yo,c),u(s,M,c),a(M,wl),a(wl,Lr),a(M,mr),a(M,Il),a(Il,yr),a(M,wr),a(M,Pl),a(Pl,Ir),u(s,Bo,c),u(s,ka,c),a(ka,Pr),u(s,$o,c),u(s,ds,c),a(ds,Al),a(Al,Ar),a(ds,Tr),u(s,Xo,c),u(s,hs,c),a(hs,Tl),a(Tl,br),a(hs,Sr),u(s,Wo,c),u(s,Ls,c),a(Ls,bl),a(bl,Or),a(Ls,Hr),u(s,Jo,c),u(s,ms,c),a(ms,fa),a(fa,Ur),u(s,Ko,c),u(s,va,c),a(va,Rr),u(s,zo,c),u(s,ys,c),a(ys,_a),a(_a,Cr),u(s,Vo,c),u(s,Ea,c),a(Ea,Dr),u(s,Qo,c),u(s,ws,c),a(ws,da),a(da,Mr),u(s,Zo,c),u(s,ha,c),a(ha,xr),u(s,go,c),u(s,Is,c),a(Is,La),a(La,jr),u(s,sc,c),u(s,ma,c),a(ma,Nr),u(s,nc,c),u(s,Ps,c),a(Ps,ya),a(ya,qr),u(s,ac,c),u(s,wa,c),a(wa,Fr),u(s,tc,c),u(s,Ia,c),a(Ia,Gr),u(s,lc,c),u(s,As,c),a(As,Pa),a(Pa,Yr),u(s,ec,c),u(s,Aa,c),a(Aa,Sl),a(Sl,Br),u(s,pc,c),u(s,Ts,c),a(Ts,Ta),a(Ta,$r),u(s,oc,c),u(s,ba,c),a(ba,Ol),a(Ol,Xr),u(s,cc,c),u(s,bs,c),a(bs,Sa),a(Sa,Wr),u(s,uc,c),u(s,L,c),a(L,Hl),a(Hl,Jr),a(L,Kr),a(L,Ul),a(Ul,zr),a(L,Vr),a(L,Rl),a(Rl,Qr),a(L,Zr),a(L,Cl),a(Cl,gr),a(L,sk),a(L,Dl),a(Dl,nk),a(L,ak),a(L,Ml),a(Ml,tk),u(s,ic,c),u(s,Ss,c),a(Ss,Oa),a(Oa,lk),u(s,rc,c),u(s,Ha,c),a(Ha,ek),u(s,kc,c),u(s,f,c),a(f,xl),a(xl,pk),a(f,ok),a(f,jl),a(jl,ck),a(f,uk),a(f,Nl),a(Nl,ik),a(f,rk),a(f,ql),a(ql,kk),a(f,fk),a(f,Fl),a(Fl,vk),a(f,_k),a(f,Gl),a(Gl,Ek),a(f,dk),a(f,Yl),a(Yl,hk),a(f,Lk),a(f,Bl),a(Bl,mk),a(f,yk),a(f,$l),a($l,wk),a(f,Ik),a(f,Xl),a(Xl,Pk),a(f,Ak),a(f,Wl),a(Wl,Tk),a(f,bk),a(f,Jl),a(Jl,Sk),a(f,Ok),a(f,Kl),a(Kl,Hk),a(f,Uk),a(f,zl),a(zl,Rk),a(f,Ck),a(f,Vl),a(Vl,Dk),a(f,Mk),a(f,Ql),a(Ql,xk),u(s,fc,c),u(s,Os,c),a(Os,Ua),a(Ua,jk),u(s,vc,c),u(s,Ra,c),a(Ra,Nk),u(s,_c,c),u(s,Hs,c),a(Hs,Ca),a(Ca,qk),u(s,Ec,c),u(s,K,c),a(K,Zl),a(Zl,Fk),a(K,Gk),a(K,gl),a(gl,Yk),u(s,dc,c),u(s,Us,c),a(Us,Da),a(Da,Bk),u(s,hc,c),u(s,m,c),a(m,se),a(se,ne),a(ne,$k),a(m,Xk),a(m,Rs),a(Rs,ae),a(ae,Wk),a(Rs,Jk),a(Rs,R),a(R,te),a(te,Kk),a(R,zk),a(R,le),a(le,Vk),a(R,Qk),a(R,ee),a(ee,Zk),a(R,gk),a(R,pe),a(pe,sf),a(m,nf),a(m,Cs),a(Cs,oe),a(oe,af),a(Cs,tf),a(Cs,Ds),a(Ds,ce),a(ce,lf),a(Ds,ef),a(Ds,ue),a(ue,pf),a(m,of),a(m,Ms),a(Ms,ie),a(ie,cf),a(Ms,uf),a(Ms,re),a(re,xs),a(xs,ke),a(ke,rf),a(xs,kf),a(xs,Ma),Ma.innerHTML=qL,a(m,ff),a(m,js),a(js,fe),a(fe,vf),a(js,_f),a(js,S),a(S,ve),a(ve,_e),a(_e,Ef),a(S,df),a(S,Ns),a(Ns,Ee),a(Ee,hf),a(Ns,Lf),a(Ns,qs),a(qs,de),a(de,mf),a(qs,yf),a(qs,he),a(he,wf),a(S,If),a(S,Fs),a(Fs,Le),a(Le,Pf),a(Fs,Af),a(Fs,me),a(me,ye),a(ye,Tf),a(S,bf),a(S,Gs),a(Gs,we),a(we,Sf),a(Gs,Of),a(Gs,Ie),a(Ie,Ys),a(Ys,Pe),a(Pe,Hf),a(Ys,Uf),a(Ys,xa),xa.innerHTML=FL,a(S,Rf),a(S,Bs),a(Bs,Ae),a(Ae,Cf),a(Bs,Df),a(Bs,$s),a($s,Te),a(Te,Mf),a($s,xf),a($s,be),a(be,jf),a(m,Nf),a(m,Xs),a(Xs,Se),a(Se,qf),a(Xs,Ff),a(Xs,Ws),a(Ws,Oe),a(Oe,Gf),a(Ws,Yf),a(Ws,He),a(He,Bf),u(s,Lc,c),u(s,Js,c),a(Js,ja),a(ja,$f),u(s,mc,c),u(s,h,c),a(h,Ue),a(Ue,Xf),a(h,Wf),a(h,Re),a(Re,Jf),a(h,Kf),a(h,Ce),a(Ce,zf),a(h,Vf),a(h,Na),a(Na,Qf),a(Na,Ks),a(Ks,De),a(De,Zf),a(Ks,gf),a(Ks,Me),a(Me,s1),a(h,n1),a(h,qa),a(qa,a1),a(qa,zs),a(zs,xe),a(xe,t1),a(zs,l1),a(zs,je),a(je,e1),a(h,p1),a(h,Ne),a(Ne,o1),a(h,c1),a(h,Fa),a(Fa,u1),a(Fa,qe),a(qe,Fe),a(Fe,i1),u(s,yc,c),u(s,Vs,c),a(Vs,Ga),a(Ga,r1),u(s,wc,c),u(s,Ya,c),a(Ya,k1),u(s,Ic,c),u(s,Qs,c),a(Qs,Ba),a(Ba,f1),u(s,Pc,c),u(s,z,c),a(z,Ge),a(Ge,v1),a(z,_1),a(z,Ye),a(Ye,E1),u(s,Ac,c),u(s,Zs,c),a(Zs,$a),a($a,d1),u(s,Tc,c),u(s,V,c),a(V,gs),a(gs,Be),a(Be,h1),a(gs,L1),a(gs,$),a($,$e),a($e,m1),a($,y1),a($,Xe),a(Xe,w1),a($,I1),a($,We),a(We,P1),a(V,A1),a(V,sn),a(sn,Je),a(Je,T1),a(sn,b1),a(sn,nn),a(nn,an),a(an,Ke),a(Ke,S1),a(an,O1),a(an,Xa),Xa.innerHTML=GL,a(nn,H1),a(nn,tn),a(tn,ze),a(ze,U1),a(tn,R1),a(tn,Wa),Wa.innerHTML=YL,u(s,bc,c),u(s,ln,c),a(ln,Ja),a(Ja,C1),u(s,Sc,c),u(s,w,c),a(w,Ve),a(Ve,D1),a(w,M1),a(w,Ka),a(Ka,x1),a(Ka,C),a(C,Qe),a(Qe,j1),a(C,N1),a(C,Ze),a(Ze,q1),a(C,F1),a(C,ge),a(ge,G1),a(C,Y1),a(C,sp),a(sp,B1),a(w,$1),a(w,za),a(za,X1),a(za,X),a(X,Va),a(Va,W1),a(Va,np),a(np,ap),a(ap,tp),a(tp,J1),a(X,K1),a(X,Qa),a(Qa,z1),a(Qa,lp),a(lp,ep),a(ep,pp),a(pp,V1),a(X,Q1),a(X,op),a(op,Z1),a(w,g1),a(w,Za),a(Za,s3),a(Za,en),a(en,cp),a(cp,n3),a(en,a3),a(en,up),a(up,t3),a(w,l3),a(w,ga),a(ga,e3),a(ga,W),a(W,ip),a(ip,p3),a(W,o3),a(W,rp),a(rp,c3),a(W,u3),a(W,kp),a(kp,i3),u(s,Oc,c),u(s,pn,c),a(pn,st),a(st,r3),u(s,Hc,c),u(s,x,c),a(x,fp),a(fp,vp),a(vp,k3),a(x,f3),a(x,on),a(on,_p),a(_p,v3),a(on,_3),a(on,nt),nt.innerHTML=BL,a(x,E3),a(x,cn),a(cn,Ep),a(Ep,d3),a(cn,h3),a(cn,dp),a(dp,hp),a(hp,L3),u(s,Uc,c),u(s,un,c),a(un,at),a(at,m3),u(s,Rc,c),u(s,j,c),a(j,Lp),a(Lp,y3),a(j,w3),a(j,mp),a(mp,I3),a(j,P3),a(j,yp),a(yp,A3),u(s,Cc,c),u(s,rn,c),a(rn,tt),a(tt,T3),u(s,Dc,c),u(s,lt,c),a(lt,wp),a(wp,b3),u(s,Mc,c),u(s,kn,c),a(kn,et),a(et,S3),u(s,xc,c),u(s,pt,c),a(pt,Ip),a(Ip,O3),u(s,jc,c),u(s,fn,c),a(fn,ot),a(ot,H3),u(s,Nc,c),u(s,Q,c),a(Q,Pp),a(Pp,U3),a(Q,R3),a(Q,Ap),a(Ap,C3),u(s,qc,c),u(s,vn,c),a(vn,ct),a(ct,D3),u(s,Fc,c),u(s,ut,c),a(ut,Tp),a(Tp,M3),u(s,Gc,c),u(s,_n,c),a(_n,it),a(it,x3),u(s,Yc,c),u(s,rt,c),a(rt,bp),a(bp,j3),u(s,Bc,c),u(s,En,c),a(En,kt),a(kt,N3),u(s,$c,c),u(s,ft,c),a(ft,Sp),a(Sp,q3),u(s,Xc,c),u(s,dn,c),dn.innerHTML=$L,u(s,Wc,c),u(s,vt,c),a(vt,Op),a(Op,F3),u(s,Jc,c),u(s,hn,c),a(hn,_t),a(_t,G3),u(s,Kc,c),u(s,Et,c),a(Et,Hp),a(Hp,Y3),u(s,zc,c),u(s,Ln,c),a(Ln,dt),a(dt,B3),u(s,Vc,c),u(s,ht,c),a(ht,Up),a(Up,$3),u(s,Qc,c),u(s,mn,c),a(mn,Lt),a(Lt,X3),u(s,Zc,c),u(s,mt,c),a(mt,Rp),a(Rp,W3),u(s,gc,c),u(s,yn,c),a(yn,yt),a(yt,J3),u(s,su,c),u(s,wt,c),a(wt,Cp),a(Cp,K3),u(s,nu,c),u(s,wn,c),a(wn,It),a(It,z3),u(s,au,c),u(s,In,c),a(In,Pt),a(Pt,V3),u(s,tu,c),u(s,Z,c),a(Z,Dp),a(Dp,Q3),a(Z,Z3),a(Z,Mp),a(Mp,g3),u(s,lu,c),u(s,Pn,c),a(Pn,At),a(At,s2),u(s,eu,c),u(s,g,c),a(g,xp),a(xp,n2),a(g,a2),a(g,jp),a(jp,t2),u(s,pu,c),u(s,An,c),An.innerHTML=XL,u(s,ou,c),u(s,Tn,c),a(Tn,Tt),a(Tt,l2),u(s,cu,c),u(s,ss,c),a(ss,Np),a(Np,e2),a(ss,p2),a(ss,qp),a(qp,o2),u(s,uu,c),u(s,bn,c),a(bn,bt),a(bt,c2),u(s,iu,c),u(s,St,c),a(St,Fp),a(Fp,u2),u(s,ru,c),u(s,Sn,c),a(Sn,Ot),a(Ot,i2),u(s,ku,c),u(s,Ht,c),a(Ht,r2),u(s,fu,c),u(s,On,c),a(On,Ut),a(Ut,k2),u(s,vu,c),u(s,N,c),a(N,Rt),a(Rt,Gp),a(Gp,f2),a(Rt,v2),a(N,_2),a(N,Ct),a(Ct,Yp),a(Yp,E2),a(Ct,d2),a(N,h2),a(N,Dt),a(Dt,Bp),a(Bp,L2),a(Dt,m2),u(s,_u,c),u(s,Mt,c),a(Mt,y2),u(s,Eu,c),u(s,Hn,c),a(Hn,xt),a(xt,w2),u(s,du,c),u(s,I,c),a(I,$p),a($p,I2),a(I,P2),a(I,Xp),a(Xp,A2),a(I,T2),a(I,Wp),a(Wp,Jp),a(Jp,b2),a(I,S2),a(I,Kp),a(Kp,O2),a(I,H2),a(I,zp),a(zp,U2),u(s,hu,c),u(s,Un,c),a(Un,jt),a(jt,R2),u(s,Lu,c),u(s,ns,c),a(ns,Rn),a(Rn,C2),a(Rn,Vp),a(Vp,D2),a(Rn,M2),a(ns,x2),a(ns,Qp),a(Qp,Zp),a(Zp,j2),u(s,mu,c),u(s,Cn,c),Cn.innerHTML=WL,u(s,yu,c),u(s,Dn,c),a(Dn,Nt),a(Nt,N2),u(s,wu,c),u(s,qt,c),a(qt,gp),a(gp,q2),u(s,Iu,c),u(s,Mn,c),a(Mn,Ft),a(Ft,F2),u(s,Pu,c),u(s,Gt,c),a(Gt,so),a(so,G2),u(s,Au,c),u(s,xn,c),xn.innerHTML=JL,u(s,Tu,c),u(s,jn,c),jn.innerHTML=KL,u(s,bu,c),u(s,Nn,c),a(Nn,Yt),a(Yt,Y2),u(s,Su,c),u(s,qn,c),qn.innerHTML=zL,u(s,Ou,c),u(s,as,c),a(as,no),a(no,B2),a(as,$2),a(as,ao),a(ao,X2),u(s,Hu,c),u(s,Fn,c),a(Fn,Bt),a(Bt,W2),u(s,Uu,c),u(s,Gn,c),Gn.innerHTML=VL,u(s,Ru,c),u(s,ts,c),a(ts,$t),a($t,J2),a($t,Yn),a(Yn,Xt),a(Xt,K2),a(Xt,Bn),a(Bn,to),a(to,z2),a(Bn,V2),a(Bn,lo),a(lo,Q2),a(Yn,Z2),a(Yn,Wt),a(Wt,g2),a(Wt,eo),a(eo,po),a(po,sv),a(ts,nv),a(ts,oo),a(oo,av),u(s,Cu,c),u(s,$n,c),a($n,Jt),a(Jt,co),a(co,tv),u(s,Du,c),u(s,Kt,c),a(Kt,lv),u(s,Mu,c),u(s,P,c),a(P,uo),a(uo,io),a(io,ev),a(P,pv),a(P,ro),a(ro,ko),a(ko,ov),a(P,cv),a(P,fo),a(fo,vo),a(vo,uv),a(P,iv),a(P,_o),a(_o,Eo),a(Eo,rv),a(P,kv),a(P,ho),a(ho,Lo),a(Lo,fv),u(s,xu,c),u(s,Xn,c),a(Xn,zt),a(zt,vv),u(s,ju,c),u(s,ls,c),a(ls,mo),a(mo,_v),a(ls,Ev),a(ls,yo),a(yo,dv)},p:L5,d(s){s&&n(E),s&&n(J),s&&n(_),s&&n(wo),s&&n(cs),s&&n(Io),s&&n(d),s&&n(Po),s&&n(us),s&&n(Ao),s&&n(is),s&&n(To),s&&n(Zn),s&&n(bo),s&&n(rs),s&&n(So),s&&n(sa),s&&n(Oo),s&&n(ks),s&&n(Ho),s&&n(aa),s&&n(Uo),s&&n(ta),s&&n(Ro),s&&n(la),s&&n(Co),s&&n(D),s&&n(Do),s&&n(fs),s&&n(Mo),s&&n(pa),s&&n(xo),s&&n(vs),s&&n(jo),s&&n(ca),s&&n(No),s&&n(ua),s&&n(qo),s&&n(_s),s&&n(Fo),s&&n(ra),s&&n(Go),s&&n(Es),s&&n(Yo),s&&n(M),s&&n(Bo),s&&n(ka),s&&n($o),s&&n(ds),s&&n(Xo),s&&n(hs),s&&n(Wo),s&&n(Ls),s&&n(Jo),s&&n(ms),s&&n(Ko),s&&n(va),s&&n(zo),s&&n(ys),s&&n(Vo),s&&n(Ea),s&&n(Qo),s&&n(ws),s&&n(Zo),s&&n(ha),s&&n(go),s&&n(Is),s&&n(sc),s&&n(ma),s&&n(nc),s&&n(Ps),s&&n(ac),s&&n(wa),s&&n(tc),s&&n(Ia),s&&n(lc),s&&n(As),s&&n(ec),s&&n(Aa),s&&n(pc),s&&n(Ts),s&&n(oc),s&&n(ba),s&&n(cc),s&&n(bs),s&&n(uc),s&&n(L),s&&n(ic),s&&n(Ss),s&&n(rc),s&&n(Ha),s&&n(kc),s&&n(f),s&&n(fc),s&&n(Os),s&&n(vc),s&&n(Ra),s&&n(_c),s&&n(Hs),s&&n(Ec),s&&n(K),s&&n(dc),s&&n(Us),s&&n(hc),s&&n(m),s&&n(Lc),s&&n(Js),s&&n(mc),s&&n(h),s&&n(yc),s&&n(Vs),s&&n(wc),s&&n(Ya),s&&n(Ic),s&&n(Qs),s&&n(Pc),s&&n(z),s&&n(Ac),s&&n(Zs),s&&n(Tc),s&&n(V),s&&n(bc),s&&n(ln),s&&n(Sc),s&&n(w),s&&n(Oc),s&&n(pn),s&&n(Hc),s&&n(x),s&&n(Uc),s&&n(un),s&&n(Rc),s&&n(j),s&&n(Cc),s&&n(rn),s&&n(Dc),s&&n(lt),s&&n(Mc),s&&n(kn),s&&n(xc),s&&n(pt),s&&n(jc),s&&n(fn),s&&n(Nc),s&&n(Q),s&&n(qc),s&&n(vn),s&&n(Fc),s&&n(ut),s&&n(Gc),s&&n(_n),s&&n(Yc),s&&n(rt),s&&n(Bc),s&&n(En),s&&n($c),s&&n(ft),s&&n(Xc),s&&n(dn),s&&n(Wc),s&&n(vt),s&&n(Jc),s&&n(hn),s&&n(Kc),s&&n(Et),s&&n(zc),s&&n(Ln),s&&n(Vc),s&&n(ht),s&&n(Qc),s&&n(mn),s&&n(Zc),s&&n(mt),s&&n(gc),s&&n(yn),s&&n(su),s&&n(wt),s&&n(nu),s&&n(wn),s&&n(au),s&&n(In),s&&n(tu),s&&n(Z),s&&n(lu),s&&n(Pn),s&&n(eu),s&&n(g),s&&n(pu),s&&n(An),s&&n(ou),s&&n(Tn),s&&n(cu),s&&n(ss),s&&n(uu),s&&n(bn),s&&n(iu),s&&n(St),s&&n(ru),s&&n(Sn),s&&n(ku),s&&n(Ht),s&&n(fu),s&&n(On),s&&n(vu),s&&n(N),s&&n(_u),s&&n(Mt),s&&n(Eu),s&&n(Hn),s&&n(du),s&&n(I),s&&n(hu),s&&n(Un),s&&n(Lu),s&&n(ns),s&&n(mu),s&&n(Cn),s&&n(yu),s&&n(Dn),s&&n(wu),s&&n(qt),s&&n(Iu),s&&n(Mn),s&&n(Pu),s&&n(Gt),s&&n(Au),s&&n(xn),s&&n(Tu),s&&n(jn),s&&n(bu),s&&n(Nn),s&&n(Su),s&&n(qn),s&&n(Ou),s&&n(as),s&&n(Hu),s&&n(Fn),s&&n(Uu),s&&n(Gn),s&&n(Ru),s&&n(ts),s&&n(Cu),s&&n($n),s&&n(Du),s&&n(Kt),s&&n(Mu),s&&n(P),s&&n(xu),s&&n(Xn),s&&n(ju),s&&n(ls)}}}function w5(Wn){let E,T;const B=[Wn[0],qv];let J={$$slots:{default:[y5]},$$scope:{ctx:Wn}};for(let _=0;_<B.length;_+=1)J=Nv(J,B[_]);return E=new m5({props:J}),{c(){k5(E.$$.fragment)},l(_){f5(E.$$.fragment,_)},m(_,b){v5(E,_,b),T=!0},p(_,[b]){const Jn=b&1?_5(B,[b&1&&jL(_[0]),b&0&&jL(qv)]):{};b&2&&(Jn.$$scope={dirty:b,ctx:_}),E.$set(Jn)},i(_){T||(E5(E.$$.fragment,_),T=!0)},o(_){d5(E.$$.fragment,_),T=!1},d(_){h5(E,_)}}}const qv={title:"클린코드 요약",summary:"클린코드 정독후 요약사항을 정리합니다.",date:"2023-11-09"};function I5(Wn,E,T){return Wn.$$set=B=>{T(0,E=Nv(Nv({},E),NL(B)))},E=NL(E),[E]}class P5 extends u5{constructor(E){super(),i5(this,E,I5,w5,r5,{})}}const b5=Object.freeze(Object.defineProperty({__proto__:null,default:P5,metadata:qv},Symbol.toStringTag,{value:"Module"}));export{P5 as P,b5 as _};
