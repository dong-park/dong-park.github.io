import{S as F5,i as G5,s as Y5,I as _L,e as t,a as i,t as p,m as EL,c as l,f as a,g as r,b as e,d as o,o as k,P as dL,j as n,h as u,k as xv,J as hL,K as LL,L as mL,w as B5,u as X5,Q as qv,E as yL,F as wL,G as IL,R as PL,T as x5,H as AL,U as q5,n as bL}from"./index.f97ab432.js";function TL(w){let v,L,O,P,f,y,q,K,h,R,A,z,Ss,Q,Z,Os,$,X,ks,Hs,W,Us,F,S;document.title=v=w[0];const Ds=w[5].default,b=_L(Ds,w,w[4],null);return{c(){L=t("meta"),O=i(),P=t("main"),f=t("article"),y=t("img"),K=i(),h=t("div"),R=t("div"),A=t("h1"),z=p(w[0]),Ss=i(),Q=t("h2"),Z=p(w[1]),Os=i(),$=t("p"),X=t("time"),ks=p(w[2]),Hs=i(),W=t("div"),Us=i(),F=t("div"),b&&b.c(),this.h()},l(d){const I=EL("svelte-15b3ill",document.head);L=l(I,"META",{name:!0,content:!0}),I.forEach(a),O=r(d),P=l(d,"MAIN",{});var Ea=e(P);f=l(Ea,"ARTICLE",{class:!0});var cs=e(f);y=l(cs,"IMG",{src:!0,alt:!0,class:!0}),K=r(cs),h=l(cs,"DIV",{class:!0});var m=e(h);R=l(m,"DIV",{class:!0,style:!0});var G=e(R);A=l(G,"H1",{class:!0});var da=e(A);z=o(da,w[0]),da.forEach(a),Ss=r(G),Q=l(G,"H2",{class:!0});var ha=e(Q);Z=o(ha,w[1]),ha.forEach(a),Os=r(G),$=l(G,"P",{class:!0});var fs=e($);X=l(fs,"TIME",{});var La=e(X);ks=o(La,w[2]),La.forEach(a),fs.forEach(a),G.forEach(a),Hs=r(m),W=l(m,"DIV",{class:!0}),e(W).forEach(a),Us=r(m),F=l(m,"DIV",{class:!0,"data-animate":!0,"data-animate-speed":!0});var ma=e(F);b&&b.l(ma),ma.forEach(a),m.forEach(a),cs.forEach(a),Ea.forEach(a),this.h()},h(){k(L,"name","description"),k(L,"content",w[1]),dL(y.src,q="/auction.png")||k(y,"src",q),k(y,"alt",""),k(y,"class","background-image svelte-koec5l"),k(A,"class","cover-title svelte-koec5l"),k(Q,"class","cover-subtitle"),k($,"class","info"),k(R,"class","cover svelte-koec5l"),k(R,"style",""),k(W,"class","cover-line svelte-koec5l"),k(F,"class","post-content svelte-koec5l"),k(F,"data-animate",""),k(F,"data-animate-speed","slow"),k(h,"class","content-wrapper svelte-koec5l"),k(f,"class","post")},m(d,I){n(document.head,L),u(d,O,I),u(d,P,I),n(P,f),n(f,y),n(f,K),n(f,h),n(h,R),n(R,A),n(A,z),n(R,Ss),n(R,Q),n(Q,Z),n(R,Os),n(R,$),n($,X),n(X,ks),n(h,Hs),n(h,W),n(h,Us),n(h,F),b&&b.m(F,null),S=!0},p(d,[I]){(!S||I&1)&&v!==(v=d[0])&&(document.title=v),(!S||I&2)&&k(L,"content",d[1]),(!S||I&1)&&xv(z,d[0]),(!S||I&2)&&xv(Z,d[1]),(!S||I&4)&&xv(ks,d[2]),b&&b.p&&(!S||I&16)&&hL(b,Ds,d,d[4],S?mL(Ds,d[4],I,null):LL(d[4]),null)},i(d){S||(B5(b,d),S=!0)},o(d){X5(b,d),S=!1},d(d){a(L),d&&a(O),d&&a(P),b&&b.d(d)}}}function SL(w,v,L){let{$$slots:O={},$$scope:P}=v,{title:f=""}=v,{summary:y=""}=v,{publishedAt:q=""}=v,{thumbnail:K=""}=v;return w.$$set=h=>{"title"in h&&L(0,f=h.title),"summary"in h&&L(1,y=h.summary),"publishedAt"in h&&L(2,q=h.publishedAt),"thumbnail"in h&&L(3,K=h.thumbnail),"$$scope"in h&&L(4,P=h.$$scope)},[f,y,q,K,P,O]}class OL extends F5{constructor(v){super(),G5(this,v,SL,TL,Y5,{title:0,summary:1,publishedAt:2,thumbnail:3})}}function HL(w){let v,L,O,P,f,y,q,K,h,R,A,z,Ss,Q,Z,Os,$,X,ks,Hs,W,Us,F,S,Ds,b,d,I,Ea,cs,m,G,da,ha,fs,La,ma,Hl,qi,Fi,Ul,Gi,Yi,Dl,Bi,Xi,Rl,Wi,Vi,Cl,Ji,Ki,Ml,zi,Fo,Rs,ya,Qi,Go,Cs,wa,Zi,Yo,Ia,$i,Bo,Ms,Pa,gi,Xo,Aa,sr,Wo,js,ba,nr,Vo,Ta,ar,Jo,Sa,tr,Ko,Oa,lr,zo,g,jl,er,pr,Nl,or,cr,xl,ur,Qo,Ns,Ha,ir,Zo,Ua,rr,$o,xs,Da,kr,go,Ra,fr,sc,Ca,vr,nc,qs,Ma,_r,ac,ja,Er,tc,Fs,ql,dr,hr,lc,ss,Fl,Lr,mr,Gl,yr,wr,Yl,Ir,ec,Na,Pr,pc,Gs,Bl,Ar,br,oc,Ys,Xl,Tr,Sr,cc,Bs,Wl,Or,Hr,uc,Xs,xa,Ur,ic,qa,Dr,rc,Ws,Fa,Rr,kc,Ga,Cr,fc,Vs,Ya,Mr,vc,Ba,jr,_c,Js,Xa,Nr,Ec,Wa,xr,dc,Ks,Va,qr,hc,Ja,Fr,Lc,Ka,Gr,mc,zs,za,Yr,yc,Qa,Vl,Br,wc,Qs,Za,Xr,Ic,$a,Jl,Wr,Pc,Zs,ga,Vr,Ac,H,Kl,Jr,Kr,zl,zr,Qr,Ql,Zr,$r,Zl,gr,sk,$l,nk,ak,gl,tk,bc,$s,st,lk,Tc,nt,ek,Sc,_,se,pk,ok,ne,ck,uk,ae,ik,rk,te,kk,fk,le,vk,_k,ee,Ek,dk,pe,hk,Lk,oe,mk,yk,ce,wk,Ik,ue,Pk,Ak,ie,bk,Tk,re,Sk,Ok,ke,Hk,Uk,fe,Dk,Rk,ve,Ck,Mk,_e,jk,Oc,gs,at,Nk,Hc,tt,xk,Uc,sn,lt,qk,Dc,vs,Ee,Fk,Gk,de,Yk,Rc,nn,et,Bk,Cc,U,he,Le,Xk,Wk,an,me,Vk,Jk,V,ye,Kk,zk,we,Qk,Zk,Ie,$k,gk,Pe,sf,nf,tn,Ae,af,tf,ln,be,lf,ef,Te,pf,of,en,Se,cf,uf,Oe,pn,He,rf,kf,pt,W5=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReporterConfig</span> <span class="token punctuation">&#123;</span>
	<span class="token comment">// 변수끼리는 세로로 묶어놓기</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> m_className<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Property</span><span class="token punctuation">></span></span> m_properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Property</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token class-name">Property</span> property<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		m_properties<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>property<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,ff,on,Ue,vf,_f,x,De,Re,Ef,df,cn,Ce,hf,Lf,un,Me,mf,yf,je,wf,If,rn,Ne,Pf,Af,xe,qe,bf,Tf,kn,Fe,Sf,Of,Ge,fn,Ye,Hf,Uf,ot,V5=`<code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Response</span> <span class="token function">makeResponse</span><span class="token punctuation">(</span><span class="token class-name">FitNesseContext</span> context<span class="token punctuation">,</span> <span class="token class-name">Request</span> request<span class="token punctuation">)</span> 
	<span class="token keyword">throw</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
		<span class="token class-name">String</span> pageNmae <span class="token operator">=</span> <span class="token function">getPageNameOrDefault</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">"FrontPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">loadPage</span><span class="token punctuation">(</span>pageName<span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//////////////////////</span>
<span class="token keyword">private</span> <span class="token class-name">String</span> <span class="token function">getPageNameOrDefault</span><span class="token punctuation">(</span><span class="token class-name">Reuqest</span> request<span class="token punctuation">,</span> <span class="token class-name">String</span> defaultPageName<span class="token punctuation">)</span>
<span class="token comment">//////////////////////</span>
<span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">loadPage</span><span class="token punctuation">(</span><span class="token class-name">String</span> resource<span class="token punctuation">,</span> <span class="token class-name">FitNesseContext</span> context<span class="token punctuation">)</span></code>`,Df,vn,Be,Rf,Cf,_n,Xe,Mf,jf,We,Nf,xf,En,Ve,qf,Ff,dn,Je,Gf,Yf,Ke,Bf,Mc,hn,ct,Xf,jc,T,ze,Wf,Vf,Qe,Jf,Kf,Ze,zf,Qf,ut,Zf,Ln,$e,$f,gf,ge,s1,n1,it,a1,mn,sp,t1,l1,np,e1,p1,ap,o1,c1,rt,u1,tp,lp,i1,Nc,yn,kt,r1,xc,ft,k1,qc,wn,vt,f1,Fc,_s,ep,v1,_1,pp,E1,Gc,In,_t,d1,Yc,Es,Pn,op,h1,L1,us,cp,m1,y1,up,w1,I1,ip,P1,A1,An,rp,b1,T1,bn,Tn,kp,S1,O1,Et,J5=`<code class="language-java">
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rectangle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token class-name">Point</span> center<span class="token punctuation">;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> redius<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Geometry</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token class-name">Object</span> shape<span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token class-name">NoSuchShapeExcpetion</span><span class="token operator">~</span>
<span class="token punctuation">&#125;</span></code>`,H1,Sn,fp,U1,D1,dt,K5=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Square</span> <span class="token keyword">implements</span> <span class="token class-name">Shape</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">Point</span> topLeft<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token keyword">double</span> side<span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">area</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> side<span class="token operator">*</span>side<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Bc,On,ht,R1,Xc,C,vp,C1,M1,Lt,j1,J,_p,N1,x1,Ep,q1,F1,dp,G1,Y1,hp,B1,X1,mt,W1,is,yt,V1,Lp,mp,yp,J1,K1,wt,z1,wp,Ip,Pp,Q1,Z1,Ap,$1,g1,It,s3,Hn,bp,n3,a3,Tp,t3,l3,Pt,e3,rs,Sp,p3,o3,Op,c3,u3,Hp,i3,Wc,Un,At,r3,Vc,ns,Up,Dp,k3,f3,Dn,Rp,v3,_3,bt,z5=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">String</span> property1<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">int</span> property2<span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// Default constructor</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getProperty1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> property1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperty1</span><span class="token punctuation">(</span><span class="token class-name">String</span> property1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>property1 <span class="token operator">=</span> property1<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getProperty2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> property2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setProperty2</span><span class="token punctuation">(</span><span class="token keyword">int</span> property2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>property2 <span class="token operator">=</span> property2<span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,E3,Rn,Cp,d3,h3,Mp,jp,L3,Jc,Cn,Tt,m3,Kc,as,Np,y3,w3,xp,I3,P3,qp,A3,zc,Mn,St,b3,Qc,Ot,Fp,T3,Zc,jn,Ht,S3,$c,Ut,Gp,O3,gc,Nn,Dt,H3,su,ds,Yp,U3,D3,Bp,R3,nu,xn,Rt,C3,au,Ct,Xp,M3,tu,qn,Mt,j3,lu,jt,Wp,N3,eu,Fn,Nt,x3,pu,xt,Vp,q3,ou,Gn,Q5=`<code class="language-java"><span class="token class-name">LocalPort</span> port <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
	port<span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PortDeviceFailure</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token function">reportError</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
	logger<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//////////////</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LocalPort</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token class-name">ACMEPort</span> innerPort<span class="token punctuation">;</span>
	
	<span class="token keyword">public</span> <span class="token class-name">LocalPort</span><span class="token punctuation">(</span><span class="token keyword">int</span> portNumber<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		innerPort <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ACMEPort</span><span class="token punctuation">(</span>portNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">DeviceResponseException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ATM1212UnlockedExcpetion</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">PortDeviceFailure</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,cu,qt,Jp,F3,uu,Yn,Ft,G3,iu,Gt,Kp,Y3,ru,Bn,Yt,B3,ku,Bt,zp,X3,fu,Xn,Xt,W3,vu,Wt,Qp,V3,_u,Wn,Vt,J3,Eu,Jt,Zp,K3,du,Vn,Kt,z3,hu,Jn,zt,Q3,Lu,hs,$p,Z3,$3,gp,g3,mu,Kn,Qt,s2,yu,Ls,so,n2,a2,no,t2,wu,zn,Z5=`<code class="language-java">  	<span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogAddAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ConsoleAppender</span> appender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span>appender<span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testLogAddAppender</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Logger</span> logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"MyLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ConsoleAppender</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogTest</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token class-name">Logger</span> logger<span class="token punctuation">;</span>

    <span class="token annotation punctuation">@Before</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger <span class="token operator">=</span> <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getLogger</span><span class="token punctuation">(</span><span class="token string">"logger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Logger</span><span class="token punctuation">.</span><span class="token function">getRootLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeAllAppenders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basicLogger</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">BasicConfigurator</span><span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"basicLogger"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAppenderWithStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            <span class="token class-name">ConsoleAppender</span><span class="token punctuation">.</span><span class="token constant">SYSTEM_OUT</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"addAppenderWithStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Test</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addAppenderWithoutStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        logger<span class="token punctuation">.</span><span class="token function">addAppender</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConsoleAppender</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">PatternLayout</span><span class="token punctuation">(</span><span class="token string">"%p %t %m%n"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        logger<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"addAppenderWithoutStream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code>`,Iu,Qn,Zt,l2,Pu,ms,ao,e2,p2,to,o2,Au,Zn,$t,c2,bu,gt,lo,u2,Tu,$n,sl,i2,Su,nl,r2,Ou,gn,al,k2,Hu,ts,tl,eo,f2,v2,_2,ll,po,E2,d2,h2,el,oo,L2,m2,Uu,pl,y2,Du,sa,ol,w2,Ru,M,co,I2,P2,uo,A2,b2,io,ro,T2,S2,ko,O2,H2,fo,U2,Cu,na,cl,D2,Mu,ys,aa,R2,vo,C2,M2,j2,_o,Eo,N2,ju,ta,$5=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
    <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testSymbolicLinksAreNotInXmlPageHierarchy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">WikiPage</span> page <span class="token operator">=</span> <span class="token function">makePage</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">makePages</span><span class="token punctuation">(</span><span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">addLinkTo</span><span class="token punctuation">(</span>page<span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">,</span> <span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseContains</span><span class="token punctuation">(</span>
    <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseDoesNotContain</span><span class="token punctuation">(</span><span class="token string">"SymPage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetDataAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token function">makePageWithContent</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"test page"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">submitRequest</span><span class="token punctuation">(</span><span class="token string">"TestPageOne"</span><span class="token punctuation">,</span> <span class="token string">"type:data"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">assertResponseIsXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertResponseContains</span><span class="token punctuation">(</span><span class="token string">"test page"</span><span class="token punctuation">,</span> <span class="token string">"&lt;Test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Nu,la,ul,x2,xu,il,ho,q2,qu,ea,rl,F2,Fu,kl,Lo,G2,Gu,pa,g5=`<code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreashold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  hw<span class="token punctuation">.</span><span class="token function">setTemp</span><span class="token punctuation">(</span><span class="token constant">WAY_TOO_COLD</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  controller<span class="token punctuation">.</span><span class="token function">tic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">heaterState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
  <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">blowerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">coolerState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertFalse</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">hiTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
  <span class="token function">assertTrue</span><span class="token punctuation">(</span>hw<span class="token punctuation">.</span><span class="token function">loTempAlarm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Yu,oa,sL=`<code class="language-java"><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnOnLoTempAlarmAtThreshold</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
  <span class="token function">wayTooCold</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token string">"HBchL"</span><span class="token punctuation">,</span> hw<span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code>`,Bu,ca,fl,Y2,Xu,ua,nL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyAsXml</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> 
  <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">thenResponseShouldBeXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testGetPageHierarchyHasRightTags</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span> 
  <span class="token function">givenPages</span><span class="token punctuation">(</span><span class="token string">"PageOne"</span><span class="token punctuation">,</span> <span class="token string">"PageOne.ChildOne"</span><span class="token punctuation">,</span> <span class="token string">"PageTwo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">whenRequestIsIssued</span><span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span> <span class="token string">"type:pages"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token function">thenResponseShouldContain</span><span class="token punctuation">(</span>
    <span class="token string">"&lt;name>PageOne&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>PageTwo&lt;/name>"</span><span class="token punctuation">,</span> <span class="token string">"&lt;name>ChildOne&lt;/name>"</span>
  <span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span></code>`,Wu,ws,mo,B2,X2,yo,W2,Vu,ia,vl,V2,Ju,ra,aL=`<code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAddMonths</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token class-name">SerialDate</span> d1 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">createInstance</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2004</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SerialDate</span> d2 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d2<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SerialDate</span> d3 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d3<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

  <span class="token class-name">SerialDate</span> d4 <span class="token operator">=</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token class-name">SerialDate</span><span class="token punctuation">.</span><span class="token function">addMonths</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> d1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2004</span><span class="token punctuation">,</span> d4<span class="token punctuation">.</span><span class="token function">getYYYY</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code>`,Ku,Is,_l,J2,ka,El,K2,fa,wo,z2,Q2,Io,Z2,$2,dl,g2,Po,Ao,sv,nv,bo,av,zu,va,hl,To,tv,Qu,Ll,lv,Zu,j,So,Oo,ev,pv,Ho,Uo,ov,cv,Do,Ro,uv,iv,Co,Mo,rv,kv,jo,No,fv,$u,_a,ml,vv,gu,Ps,xo,_v,Ev,qo,dv;return{c(){v=t("h1"),L=t("a"),O=p("1장 깨끗한 코드"),P=i(),f=t("ul"),y=t("li"),q=p("빨리가는 유일한 방법은 언제나 코드를 깨끗하게 유지하는 습관이다. p7"),K=i(),h=t("li"),R=p("단순한 코드 규칙으로 구현을 시작하는법 p13"),A=t("ul"),z=t("li"),Ss=p("모든 테스트를 통과한다"),Q=i(),Z=t("li"),Os=p("중복이 없다"),$=i(),X=t("li"),ks=p("시스템 내 모든 설계 아이디어를 표현한다"),Hs=i(),W=t("li"),Us=p("클래스, 메서드, 함수 등을 최대한 줄인다."),F=i(),S=t("li"),Ds=p("캠프장을 처음 왔을 때 보다 더 깨끗하게 하고 떠나라 p19"),b=i(),d=t("h1"),I=t("a"),Ea=p("2장 의미있는 이름"),cs=i(),m=t("ul"),G=t("li"),da=p("의도를 분명히 밝히자: 코드가 무엇을 의미하는지 독자로 하여금 납득이 되어야 한다"),ha=i(),fs=t("li"),La=p("그릇된 정보를 피하라: 변수나 함수 이름에 잘못된 정보를 포함시키지 말아야 한다. 다른 사람이 코드를 읽을 때 혼란을 줄 수 있으며, 잘못된 가정을 할 수도 있다."),ma=i(),Hl=t("li"),qi=p("의미 있게 구분하라: 변수나 함수 이름은 서로 다른 개념을 구분할 수 있도록 명확하고 일관성 있게 작성해야 한다. 혼란을 줄이고 코드의 가독성을 향상시킨다."),Fi=i(),Ul=t("li"),Gi=p("발음하기 쉬운 이름을 사용하라. 코드의 이름은 다른 사람들이 발음하기 쉽고 이해하기 쉽게 작성되어야 한다."),Yi=i(),Dl=t("li"),Bi=p("검색하기 쉬운 이름을 사용하라. 변수나 함수의 이름은 다른 사람들이 쉽게 검색할 수 있도록 작성되어야 한다. 명확하고 직관적인 이름을 선택하여 코드의 유지보수성을 높이는데 도움이 된다."),Xi=i(),Rl=t("li"),Wi=p("인코딩을 피하라: 변수나 함수 이름에 인코딩을 사용하지 않는 것이 좋다. 의미 있는 이름을 사용하여 코드의 가독성을 높이는 것이 중요하다."),Vi=i(),Cl=t("li"),Ji=p("자신의 기억력을 자랑하지 마라: 변수 이름을 자신만 아는 이름으로 변환하지 말아라"),Ki=i(),Ml=t("li"),zi=p("불필요한 유머나 맥락을 벗어나는 명명법을 사용하지 말고 방법론에 의한 명명법을 쓰자"),Fo=i(),Rs=t("h1"),ya=t("a"),Qi=p("3장 함수"),Go=i(),Cs=t("h3"),wa=t("a"),Zi=p("작게 만들어라"),Yo=i(),Ia=t("p"),$i=p("호출하는 함수 형식으로 함수는 짧을수록 좋다 2~3줄 내외면 더 좋다. 들여쓰기 구조도 1단이나 2단을 넘어서면 힘들어진다"),Bo=i(),Ms=t("h3"),Pa=t("a"),gi=p("한 가지만 해라"),Xo=i(),Aa=t("p"),sr=p("추상화 단계에서 일을 하는 가짓수가 하나여야 한다 가령 다른 함수를 호출하는 함수가 존재한다면 그 함수는 한가지 일을 하고 있는것이다."),Wo=i(),js=t("h3"),ba=t("a"),nr=p("함수 당 추상화 수준은 하나로"),Vo=i(),Ta=t("p"),ar=p("한 함수내에 여러가지 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운 탓이다."),Jo=i(),Sa=t("p"),tr=p("내려가기 규칙을 활용하자 위에서 아래로 프로그램을 읽을수 있도록 함수 추상화 수준을 한단계씩 내려보자"),Ko=i(),Oa=t("p"),lr=p("TO 설정 페이지와 해제 페이지를 포함라혀면, 설정 페이지를 폼학하고, 테스트 페이지 내용을 포함하고 해제 페이지를 포함한다."),zo=i(),g=t("ul"),jl=t("li"),er=p("To 설정 페이지를 포함하려면, 슈트이면 슈트 설정 페이지를 포함한 후 일반 설정 페이지를 포함한다."),pr=i(),Nl=t("li"),or=p("To 슈트 설정 페이지를 포함하려면, 부모 계층에서 SuiteSetUp 페이지를 찾아 Include문과 페이지 경로를 추가한다."),cr=i(),xl=t("li"),ur=p("To 부모 계층을 검색하려면…"),Qo=i(),Ns=t("h3"),Ha=t("a"),ir=p("Switch문"),Zo=i(),Ua=t("p"),rr=p("스위치 문을 다형성 객체를 생성하는 코드 안에서 허용하고 상속관계로 숨기고 다른 코드에 노출하지 않는 방법이 있다."),$o=i(),xs=t("h3"),Da=t("a"),kr=p("서술적인 이름을 사용하라"),go=i(),Ra=t("p"),fr=p("이름이 길어도 괜찮고 서술적인 이름이 짧고 어려운 이름보다 좋다. 함수 이름을 정할때 여러 단어가 쉽게 읽히는 명명법을 사용하는것이 좋다. 여러 단어를 사용해 함수 기능을 표현하라"),sc=i(),Ca=t("p"),vr=p("모듈 내에서 함수 이름은 같은 문구,명사,동사를 사용한다."),nc=i(),qs=t("h3"),Ma=t("a"),_r=p("함수 인수"),ac=i(),ja=t("p"),Er=p("함수에서 이상적인 인수 개수는 0개이다. 다음은 1개이고 다음은2개이다. 최선은 입력 인수가 없는 경우 ex: IncludeSetupPageInfo(new PageContent) → includeSetupPage()"),tc=i(),Fs=t("p"),ql=t("em"),dr=p("많이쓰는 단항형식"),hr=p(`
함수에 인수 1개를 넘기는 이유`),lc=i(),ss=t("ol"),Fl=t("li"),Lr=p("인수에 질문을 던지는 경우"),mr=i(),Gl=t("li"),yr=p("인수를 뭔가로 변환해 결과를 반환하는 경우"),wr=i(),Yl=t("li"),Ir=p("단항 함수 형식의 이벤트"),ec=i(),Na=t("p"),Pr=p("플래그 인수는 추하다. 함수에 부울 값을 넘기는 관례는 차라리 인수별말고 상황별로 함수를 나누는 편이 좋다"),pc=i(),Gs=t("p"),Bl=t("em"),Ar=p("이항함수"),br=p(`
인수가 2개인 함수는 1개인 함수보다 이해하기 어렵다. 프로그램을 짜다보면 불가피한 경우도 생기지만 그만큼 위험이 따른다`),oc=i(),Ys=t("p"),Xl=t("em"),Tr=p("삼항함수"),Sr=p(`
삼항 함수부터는 신중히 고려해야 한다..`),cc=i(),Bs=t("p"),Wl=t("em"),Or=p("동사와 키워드"),Hr=p(`
단항 함수는 함수와 인수가 동사/명사 쌍을 이ㅝ야 한다.
함수 이름에 키워드를 추가하는 편도 좋다`),uc=i(),Xs=t("h3"),xa=t("a"),Ur=p("부수 효과를 일으키지 마라"),ic=i(),qa=t("p"),Dr=p("함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓을 하지 말아라!"),rc=i(),Ws=t("h3"),Fa=t("a"),Rr=p("명령과 조회를 분리하라!"),kc=i(),Ga=t("p"),Cr=p("함수는 뭔가를 수행하거나 뭔가에 답하거나 둘중 하나만 해야한다. 둘 다 하면 안 된다. 객체 상태를 변경하거나 아니면 객체 정보를 반환하거나 둘 중 하나다."),fc=i(),Vs=t("h3"),Ya=t("a"),Mr=p("Try/Catch 블록은 한 함수에서 별도로 처리"),vc=i(),Ba=t("p"),jr=p("코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다."),_c=i(),Js=t("h3"),Xa=t("a"),Nr=p("반복하지 마라"),Ec=i(),Wa=t("p"),xr=p("중복은 소트트웨어에서 모든 악의 근원이다. 많은 원칙과 기법이 중복을 없애거나 제어할 목적으로 나왔다."),dc=i(),Ks=t("h1"),Va=t("a"),qr=p("4장 주석"),hc=i(),Ja=t("p"),Fr=p("잘 달린 주석은 어떤 정보보다 유용하지만, 거짓말을 하는 경우가 많다. 일부가 여기서 저기로 옮겨지면서 발생하는 불상사"),Lc=i(),Ka=t("p"),Gr=p("진실은 한 곳에만 존재한다. 바로 코드다 코드만이 자기가 하는 일을 진실되게 말한다."),mc=i(),zs=t("h3"),za=t("a"),Yr=p("주석은 나쁜 코드를 보완하지 못한다"),yc=i(),Qa=t("ul"),Vl=t("li"),Br=p("표현력이 풍부하고 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다."),wc=i(),Qs=t("h3"),Za=t("a"),Xr=p("코드를 의도로 표현하라"),Ic=i(),$a=t("ul"),Jl=t("li"),Wr=p("코드로 대다수 의도를 표현할수 있다 많은 경우 주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다."),Pc=i(),Zs=t("h3"),ga=t("a"),Vr=p("좋은 주석"),Ac=i(),H=t("ul"),Kl=t("li"),Jr=p("정말은 좋은 주석은 주석을 달지 않을 방법을 찾아낸 주석이라는 사실을 알아라"),Kr=i(),zl=t("li"),zr=p(`법적인 주석
각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보`),Qr=i(),Ql=t("li"),Zr=p(`정보를 제공하는 주석
기본적인 정보를 주석으로 제공하면 편리하지만 그래도 함수 이름에 정보를 담는편이 좋다`),$r=i(),Zl=t("li"),gr=p(`의도를 설명하는 주석
두 객체를 비교하는 하는 코드가 있다고 가정했을때 저자의 의도를 보여주는 코드가 좋다`),sk=i(),$l=t("li"),nk=p(`의미를 명료하게 밝히는 주석
일반적으로 인수나 반환값 자체를 명확하게 만들면 더 좋겠지만, 인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미를 명료하게 밝히는 주석이 유용하다.`),ak=i(),gl=t("li"),tk=p(`ex
docs형..
결과를 경고하는 주석
TODO주석
중요성을 강조하는 주석`),bc=i(),$s=t("h3"),st=t("a"),lk=p("나쁜 주석"),Tc=i(),nt=t("p"),ek=p("대다수 주석이 속하는 범주, 허술한 코드를 지탱하거나, 엉뚱한 코드를 변명하거나, 미숙한 결정을 합리화 한다."),Sc=i(),_=t("ul"),se=t("li"),pk=p("주절거리는 주석: 저자에게만 의미가 있고 의사소통이 어려운 주석들"),ok=i(),ne=t("li"),ck=p("같은 이야기를 중복하는 주석: 주석이 코드보다 더 많은 정보를 제공하지 못하는 경우"),uk=i(),ae=t("li"),ik=p("오해할 여지가 있는 주석: 코드보다 읽기도 어려운 주석에 살짝 잘못된 정보를 포함한 경우"),rk=i(),te=t("li"),kk=p("의무적으로 다는 주석: javadocs를 넣으라는 규칙이 낳은 아무가치없는 주석"),fk=i(),le=t("li"),vk=p("이력을 기록하는 주석: git이 있으니 이제 없어도 된다"),_k=i(),ee=t("li"),Ek=p("있으나 마나 한 주석: 너무 당연한 사실을 언급 가령 생성자를 알려주는 경우"),dk=i(),pe=t("li"),hk=p("위치를 표시하는 주석: 유용한 경우도 있지만 독자가 흔한 잡음으로 여겨 무시한다"),Lk=i(),oe=t("li"),mk=p("닫는 괄호에 다는 주석: 함수를 줄이는 편이 낫다."),yk=i(),ce=t("li"),wk=p("공로를 돌리거나 저자를 표시하는 주석: 이것도 git에 맡기자"),Ik=i(),ue=t("li"),Pk=p("주석으로 처리한 코드: 주석으로 처리한 코드만큼 밉살스러운 관행도 드물다."),Ak=i(),ie=t("li"),bk=p("HTML 주석: 주석을 뽑아 웹페이지에 올릴 작정이라면 태그를 삽입해야 하는 책임은 프로그래머가 아니라 도구가 져야 맞다"),Tk=i(),re=t("li"),Sk=p("전역 정보: 상수 값은 코드와 주석이 전혀 통제할수 없다"),Ok=i(),ke=t("li"),Hk=p("너무 많은 정보: 장황하게 늘어놓지 마라"),Uk=i(),fe=t("li"),Dk=p("모호한 관계: 주석과 주석이 설명하는 코드는 둘 사이에 관계가 명백해야 한다"),Rk=i(),ve=t("li"),Ck=p("함수 헤더: 짧은 함수는 긴 설명이 필요 없다. 짧고 한 가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다."),Mk=i(),_e=t("li"),jk=p("비공개 코드에서 Javadocs: 공개하지 않을 코드라면 자바독스는 쓸모가 없다"),Oc=i(),gs=t("h1"),at=t("a"),Nk=p("5장 형식 맞추기"),Hc=i(),tt=t("p"),xk=p("프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야 한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고 모두가 그 규칙을 따라야 한다."),Uc=i(),sn=t("h3"),lt=t("a"),qk=p("형식을 맞추는 목적"),Dc=i(),vs=t("ul"),Ee=t("li"),Fk=p("코드 형식은 매우 중요하다"),Gk=i(),de=t("li"),Yk=p("오늘 구현한 기능이 다음 버전에서 바뀔 확률은 아주 높다. 가독성이 바뀔 코드의 품질을 결정한다."),Rc=i(),nn=t("h3"),et=t("a"),Bk=p("적절한 행 길이를 유지하라"),Cc=i(),U=t("ul"),he=t("li"),Le=t("p"),Xk=p("대다수가 500줄을 넘지 않고 대부분이 200줄 정도인 파일로도 커다란 시스템을 구축할수 있다."),Wk=i(),an=t("li"),me=t("p"),Vk=p("신문 기사처럼 작성하라"),Jk=i(),V=t("ul"),ye=t("li"),Kk=p("최상단 기사를 몇 마디로 요약하는 표제가 나오고, 첫 문단이 기사 내용을 요약한다."),zk=i(),we=t("li"),Qk=p("소스 파일도 이와 비슷하게 이름만 보고도 올바른 모듈을 판단 할 정도로 신경 써서 짓는다."),Zk=i(),Ie=t("li"),$k=p("소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명하고 아래로 내려갈수록 세세하게 묘사한다."),gk=i(),Pe=t("li"),sf=p("신문은 다양한 기사로 이뤄진다. 대다수 기사가 아주 짧고 날짜, 이름들을 뒤섞은 긴 기사 하나만 싣는다면 아무도 읽지 않을것이다."),nf=i(),tn=t("li"),Ae=t("p"),af=p("개념은 빈 행으로 분리하라"),tf=i(),ln=t("ul"),be=t("li"),lf=p("모든 코드는 왼쪽에서 오른쪽으로 그리고 위에서 아래로 읽힌다."),ef=i(),Te=t("li"),pf=p("일련의 행 묶음은 완결된 생각 하나를 표현한다."),of=i(),en=t("li"),Se=t("p"),cf=p("세로 밀집도"),uf=i(),Oe=t("ul"),pn=t("li"),He=t("p"),rf=p("줄바꿈이 개념을 분리한다면 세로 밀집도는 연광성을 의미한다. 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다는 뜻이다."),kf=i(),pt=t("pre"),ff=i(),on=t("li"),Ue=t("p"),vf=p("수직 거리"),_f=i(),x=t("ul"),De=t("li"),Re=t("p"),Ef=p("서로 밀접한 개념은 세로로 가까이 둬야 한다. 물론 두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않는다. 하지만 타당한 근거 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다."),df=i(),cn=t("li"),Ce=t("p"),hf=p("변수선언 위치"),Lf=i(),un=t("ul"),Me=t("li"),mf=p("사용하는 위치에 최대한 가까이 선언한다. 우리가 만든 함수는 매우 짧으므로 지역 변수는 각 함수 맨 처음에 선언한다."),yf=i(),je=t("li"),wf=p("루프를 제어하는 변수는 흔히 루프문 내부에 선언한다. (아주 드물지만 블록 상단이나 루프 직전에 선언하는 사례도 있다)"),If=i(),rn=t("li"),Ne=t("p"),Pf=p("인스턴스 변수"),Af=i(),xe=t("ul"),qe=t("li"),bf=p("클래스 맨 처음에 선언한다."),Tf=i(),kn=t("li"),Fe=t("p"),Sf=p("종속 함수"),Of=i(),Ge=t("ul"),fn=t("li"),Ye=t("p"),Hf=p("한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다."),Uf=i(),ot=t("pre"),Df=i(),vn=t("li"),Be=t("p"),Rf=p("개념적 유사성"),Cf=i(),_n=t("ul"),Xe=t("li"),Mf=p("친화도가 높을수록 코드를 가까이 배치한다."),jf=i(),We=t("li"),Nf=p("친화도가 높은 요인은 한 함수가 다른 함수를 호출해 생기는 종속성이 생기는 경우나 명명법이 똑가톡 기본 기능이 유사한 경우"),xf=i(),En=t("li"),Ve=t("p"),qf=p("세로 순서"),Ff=i(),dn=t("ul"),Je=t("li"),Gf=p("가장 중요한 개념을 가장 먼저 표현한다."),Yf=i(),Ke=t("li"),Bf=p("세세한 사항을 최대한 배제한다."),Mc=i(),hn=t("h3"),ct=t("a"),Xf=p("가로 형식 맞추기"),jc=i(),T=t("ul"),ze=t("li"),Wf=p("기존 오픈소스 코드들은 60자 이상부터 떨어진다. 프로그래머는 명백하게 짧은 행을 선호한다."),Vf=i(),Qe=t("li"),Jf=p("100자나 120자에 달해도 나쁘지 않지만 그 이상은 솔직히 주의 부족이다."),Kf=i(),Ze=t("li"),zf=p("가로 공백과 밀집도 가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다."),Qf=i(),ut=t("li"),Zf=p("가로 정렬"),Ln=t("ul"),$e=t("li"),$f=p("코드의 변수값을 강조하기 위해 가로공백을 넣지 말아라 ide에서 다 잡힌다"),gf=i(),ge=t("li"),s1=p("선언부가 길고 강조할게 많다면 클래스를 쪼개야 한다는 의미이다."),n1=i(),it=t("li"),a1=p("들여쓰기"),mn=t("ul"),sp=t("li"),t1=p("들여쓰기 자체가 윤곽도를 보여준다"),l1=i(),np=t("li"),e1=p("들여쓰기한 파일은 구조가 한눈에 들어온더. 변수, 생성자 함수, 접근자 함수, 메서드가 금방 보인다."),p1=i(),ap=t("li"),o1=p("때로는 간단한 if, while, 짧은 함수에서 들여쓰기를 무시하고픈 유혹이 생긴다. 원점으로 돌아가도록 하자"),c1=i(),rt=t("li"),u1=p("팀 규칙"),tp=t("ul"),lp=t("li"),i1=p("팀은 한 가지 규칙에 합의해야 한다. 그리고 모든 팀원은 그 규칙을 따라야 한다."),Nc=i(),yn=t("h1"),kt=t("a"),r1=p("6장 객체와 자료구조"),xc=i(),ft=t("p"),k1=p("변수를 비공개로 정의 하는 이유는 남들이 변수에 의존하지 않게 만들고 싶어서다."),qc=i(),wn=t("h3"),vt=t("a"),f1=p("자료 추상화"),Fc=i(),_s=t("ul"),ep=t("li"),v1=p("변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필요하다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다."),_1=i(),pp=t("li"),E1=p("개발자는 객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다."),Gc=i(),In=t("h3"),_t=t("a"),d1=p("자료/객체 비대칭"),Yc=i(),Es=t("ul"),Pn=t("li"),op=t("p"),h1=p("객체와 자료 구조는 근본적으로 양분된다."),L1=i(),us=t("ul"),cp=t("li"),m1=p("절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 슆다."),y1=i(),up=t("li"),w1=p("절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야 한다."),I1=i(),ip=t("li"),P1=p("둘다 참이다. 다시말해 객체 지향코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다."),A1=i(),An=t("li"),rp=t("p"),b1=p("예시"),T1=i(),bn=t("ul"),Tn=t("li"),kp=t("p"),S1=p("절차적인 접근예시"),O1=i(),Et=t("pre"),H1=i(),Sn=t("li"),fp=t("p"),U1=p("다형성 접근예시"),D1=i(),dt=t("pre"),Bc=i(),On=t("h3"),ht=t("a"),R1=p("디미터 법칙"),Xc=i(),C=t("ul"),vp=t("li"),C1=p("모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다."),M1=i(),Lt=t("li"),j1=p("클래스 C의 메서드 f는 다음과 같은 메서드만 호출해야 한다"),J=t("ul"),_p=t("li"),N1=p("클래스 C"),x1=i(),Ep=t("li"),q1=p("f가 생성한 객체"),F1=i(),dp=t("li"),G1=p("f 인수로 넘어온 객체"),Y1=i(),hp=t("li"),B1=p("C 인스턴스 변수에 저장된 객체"),X1=i(),mt=t("li"),W1=p("기차 충돌"),is=t("ul"),yt=t("li"),V1=p("as-is"),Lp=t("ul"),mp=t("li"),yp=t("strong"),J1=p("final String outputDir = ctext.getOptions().getScracthDir().getAbsolutePath();"),K1=i(),wt=t("li"),z1=p("to-be"),wp=t("ul"),Ip=t("li"),Pp=t("strong"),Q1=p(`Options opts = ctxt.getOptions();
File scractchDir = opts.getScratchDir();
final String outputDir = scracthDir.getAbsolutePath();`),Z1=i(),Ap=t("li"),$1=p("객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 자료구조 라면 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다."),g1=i(),It=t("li"),s3=p("잡종 구조"),Hn=t("ul"),bp=t("li"),n3=p("절반은 객체, 절반은 자료 구조인 잡종 구조가 나온다."),a3=i(),Tp=t("li"),t3=p("이런 잡종 구조는 새로운 함수는 물론이고 새로운 자료 구조도 추가하기 어렵다. 단점만 모아놓은 구조"),l3=i(),Pt=t("li"),e3=p("구조체 감추기"),rs=t("ul"),Sp=t("li"),p3=p("그렇다면 임시 디렉토러의 절대 경로는 어떻게 얻어야 좋을까?"),o3=i(),Op=t("li"),c3=p(`ctxt.getAboslutePathOfScratchDirectoryOption(); → ctxt 객체에 공개해야 하는 메서드가 너무 많아진다
ctx.getScratchDirectoryOption().getAbsolutePath(); → 자료 구조를 반환 한다고 가정한다.`),u3=i(),Hp=t("li"),i3=p(`그렇다면 ctxt 객체에 임시 파일을 생성하라고 시키면 어떨까?
BufferedOutputStream bos = ctxt.createScratchFilesStream(classFileName);
객체에게 맡기기에 적당한 임무로 보인다!`),Wc=i(),Un=t("h3"),At=t("a"),r3=p("자료 전달 객체"),Vc=i(),ns=t("ul"),Up=t("li"),Dp=t("p"),k3=p("자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스이다. 이런 자료구조체를 DTO(Data Transfer Object)라 한다."),f3=i(),Dn=t("li"),Rp=t("p"),v3=p("좀더 일반적인 형태는 Bean 구조이다. 비공개 변수를 조회 설정 함수로 조작하는 방식. 사이비 캡슐화로 일부 순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다."),_3=i(),bt=t("pre"),E3=i(),Rn=t("li"),Cp=t("p"),d3=p("활성 레코드"),h3=i(),Mp=t("ul"),jp=t("li"),L3=p("공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료구조, 대게 save나 find와 같이 탐색함수도 제공한다. 불행히도 비즈니스 규칙 메서드를 추가해 이런 자료 구조를 개체로 취급하는 개발자가 흔하다. 하지만 이는 바람직하지 않다. 활성 레코드는 자료 구조로 취급한다."),Jc=i(),Cn=t("h3"),Tt=t("a"),m3=p("결론"),Kc=i(),as=t("ul"),Np=t("li"),y3=p("객체는 동작을 공개하고 자료를 숨긴다. 기존 동작을 변경하지 않으면서 객체 타입을 추가하기는 쉬운 반면 기존 객체에 새 동작을 추가하기는 어렵다."),w3=i(),xp=t("li"),I3=p("자료 구조는 동작 없이 자료를 노출한다. 기존 자료 구조에 새 동작을 추가하기 쉬우나, 기존 함수에 새 자료 구조를 추가하기는 어렵다."),P3=i(),qp=t("li"),A3=p("시스템을 구현할때 새로운 자료 타입을 추가하는 유연셩이 필요하면 객체가 더 적합하다. 새로운 동작을 추가하는 유연성이 필요하면 절차적인 코드가 더 적합하다. 어느쪽이 맞는가는 상황에 따라 다르다."),zc=i(),Mn=t("h1"),St=t("a"),b3=p("7장 오류처리"),Qc=i(),Ot=t("ul"),Fp=t("li"),T3=p("깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),Zc=i(),jn=t("h3"),Ht=t("a"),S3=p("오류 코드보다 예외를 사용하라"),$c=i(),Ut=t("ul"),Gp=t("li"),O3=p("과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),gc=i(),Nn=t("h3"),Dt=t("a"),H3=p("Try-Catch-Finally 문부터 작성하라"),su=i(),ds=t("ul"),Yp=t("li"),U3=p("예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),D3=i(),Bp=t("li"),R3=p("강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),nu=i(),xn=t("h3"),Rt=t("a"),C3=p("미확인 예외를 사용하라"),au=i(),Ct=t("ul"),Xp=t("li"),M3=p("확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),tu=i(),qn=t("h3"),Mt=t("a"),j3=p("예외에 의미를 제공하라"),lu=i(),jt=t("ul"),Wp=t("li"),N3=p("예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),eu=i(),Fn=t("h3"),Nt=t("a"),x3=p("호출자를 고려해 예외 클래스를 정의하라"),pu=i(),xt=t("ul"),Vp=t("li"),q3=p("오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),ou=i(),Gn=t("pre"),cu=i(),qt=t("ul"),Jp=t("li"),F3=p("위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),uu=i(),Yn=t("h3"),Ft=t("a"),G3=p("정상 흐름을 정의하라"),iu=i(),Gt=t("ul"),Kp=t("li"),Y3=p(`앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다.
특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다.`),ru=i(),Bn=t("h3"),Yt=t("a"),B3=p("null을 반환하지 마라"),ku=i(),Bt=t("ul"),zp=t("li"),X3=p("null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),fu=i(),Xn=t("h3"),Xt=t("a"),W3=p("null을 전달하지 마라"),vu=i(),Wt=t("ul"),Qp=t("li"),V3=p("NullpointException을 야기하는 코드는 만들지 말자"),_u=i(),Wn=t("h3"),Vt=t("a"),J3=p("결론"),Eu=i(),Jt=t("ul"),Zp=t("li"),K3=p("깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),du=i(),Vn=t("h1"),Kt=t("a"),z3=p("8장 경계"),hu=i(),Jn=t("h3"),zt=t("a"),Q3=p("서드파티 코드 사용하기"),Lu=i(),hs=t("ul"),$p=t("li"),Z3=p("인터페이스를 “제공하는” 입장과 “사용하는” 입장 사이에는 필연적인 긴장감이 존재한다."),$3=i(),gp=t("li"),g3=p("사용하는 입장에서 인터페이스의 변경을 우려한다면 래핑하는것도 하나의 방법이다."),mu=i(),Kn=t("h3"),Qt=t("a"),s2=p("경계를 탐험하고 공부하기"),yu=i(),Ls=t("ul"),so=t("li"),n2=p("서드파티 코드를 사용할때 우리는 사용할 코드에 대해 테스트할 필요가 있다."),a2=i(),no=t("li"),t2=p("log4j의 예"),wu=i(),zn=t("pre"),Iu=i(),Qn=t("h3"),Zt=t("a"),l2=p("아직 존재하지 않는 코드 사용하기"),Pu=i(),ms=t("ul"),ao=t("li"),e2=p("아직 개발되지 않은 모듈이 필요한데, 인터페이스를 정의하면 분업이 가능하다"),p2=i(),to=t("li"),o2=p("인터페이스를 정의 함으로써 메인로직을 더 깔끔하게 짤 수 있다."),Au=i(),Zn=t("h3"),$t=t("a"),c2=p("Clean한 경계"),bu=i(),gt=t("ul"),lo=t("li"),u2=p("좋은 소프트웨어는 변경에 유연하게 대처해야 한다. 내부 코드가 서드파티에 영향을 줄수 없게 래핑하듯 변경에 유연하게 대처할수 있는 경계를 만들어야 한다."),Tu=i(),$n=t("h1"),sl=t("a"),i2=p("9장 유닛테스트"),Su=i(),nl=t("p"),r2=p("코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),Ou=i(),gn=t("h3"),al=t("a"),k2=p("The Three Laws of TDD"),Hu=i(),ts=t("ul"),tl=t("li"),eo=t("strong"),f2=p("첫째 법칙:"),v2=p(" 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),_2=i(),ll=t("li"),po=t("strong"),E2=p("둘째 법칙:"),d2=p(" 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),h2=i(),el=t("li"),oo=t("strong"),L2=p("셋째 법칙:"),m2=p(" 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),Uu=i(),pl=t("p"),y2=p("위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),Du=i(),sa=t("h3"),ol=t("a"),w2=p("깨끗한 테스트 코드 유지하기"),Ru=i(),M=t("ul"),co=t("li"),I2=p("테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것"),P2=i(),uo=t("li"),A2=p("테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다"),b2=i(),io=t("li"),ro=t("strong"),T2=p("코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),S2=i(),ko=t("li"),O2=p("테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다."),H2=i(),fo=t("li"),U2=p("테스트 코드가 지저분하면 실제 코드도 망가진다"),Cu=i(),na=t("h3"),cl=t("a"),D2=p("깨끗한 테스트 코드"),Mu=i(),ys=t("ul"),aa=t("li"),R2=p("깨끗한 코드를 만드려면 "),vo=t("strong"),C2=p("가독성"),M2=p(" 이 필요하다"),j2=i(),_o=t("li"),Eo=t("strong"),N2=p("BUILD-OPERATE-CHECK 패턴 → 테스트 자료 만들기, 자료 조작, 결과 확인"),ju=i(),ta=t("pre"),Nu=i(),la=t("h3"),ul=t("a"),x2=p("도메인에 특화된 테스트 언어"),xu=i(),il=t("ul"),ho=t("li"),q2=p("시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),qu=i(),ea=t("h3"),rl=t("a"),F2=p("이중 표준"),Fu=i(),kl=t("ul"),Lo=t("li"),G2=p("테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),Gu=i(),pa=t("pre"),Yu=i(),oa=t("pre"),Bu=i(),ca=t("h3"),fl=t("a"),Y2=p("테스트 당 assert 하나"),Xu=i(),ua=t("pre"),Wu=i(),ws=t("ul"),mo=t("li"),B2=p("위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다"),X2=i(),yo=t("li"),W2=p("이 부분은 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),Vu=i(),ia=t("h3"),vl=t("a"),V2=p("테스트당 개념 하나"),Ju=i(),ra=t("pre"),Ku=i(),Is=t("ul"),_l=t("li"),J2=p("테스트가 내포하는 의미"),ka=t("ul"),El=t("li"),K2=p("(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),fa=t("ol"),wo=t("li"),z2=p("(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),Q2=i(),Io=t("li"),Z2=p("두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),$2=i(),dl=t("li"),g2=p("(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),Po=t("ol"),Ao=t("li"),sv=p("31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),nv=i(),bo=t("li"),av=p("이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),zu=i(),va=t("h3"),hl=t("a"),To=t("strong"),tv=p("F.I.R.S.T"),Qu=i(),Ll=t("p"),lv=p("테스트는 아래 5가지 요소를 충족해야 한다"),Zu=i(),j=t("ul"),So=t("li"),Oo=t("strong"),ev=p("빠르게Fast"),pv=i(),Ho=t("li"),Uo=t("strong"),ov=p("독립적으로Independent → 테스트간 의존관계가 있으면 안된다"),cv=i(),Do=t("li"),Ro=t("strong"),uv=p("반복가능하게Repeatable → 환경에 구애받지 않는"),iv=i(),Co=t("li"),Mo=t("strong"),rv=p("자가검증하는Self-Validating → 테스트가 스스로 bool로 결론나야 한다"),kv=i(),jo=t("li"),No=t("strong"),fv=p("적시에Timely → 테스트 코드를 만들고 운영코드를 작성하라"),$u=i(),_a=t("h3"),ml=t("a"),vv=p("결론"),gu=i(),Ps=t("ul"),xo=t("li"),_v=p("깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다"),Ev=i(),qo=t("li"),dv=p("지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),this.h()},l(s){v=l(s,"H1",{id:!0});var c=e(v);L=l(c,"A",{href:!0});var Gv=e(L);O=o(Gv,"1장 깨끗한 코드"),Gv.forEach(a),c.forEach(a),P=r(s),f=l(s,"UL",{});var yl=e(f);y=l(yl,"LI",{});var Yv=e(y);q=o(Yv,"빨리가는 유일한 방법은 언제나 코드를 깨끗하게 유지하는 습관이다. p7"),Yv.forEach(a),K=r(yl),h=l(yl,"LI",{});var hv=e(h);R=o(hv,"단순한 코드 규칙으로 구현을 시작하는법 p13"),A=l(hv,"UL",{});var As=e(A);z=l(As,"LI",{});var Bv=e(z);Ss=o(Bv,"모든 테스트를 통과한다"),Bv.forEach(a),Q=r(As),Z=l(As,"LI",{});var Xv=e(Z);Os=o(Xv,"중복이 없다"),Xv.forEach(a),$=r(As),X=l(As,"LI",{});var Wv=e(X);ks=o(Wv,"시스템 내 모든 설계 아이디어를 표현한다"),Wv.forEach(a),Hs=r(As),W=l(As,"LI",{});var Vv=e(W);Us=o(Vv,"클래스, 메서드, 함수 등을 최대한 줄인다."),Vv.forEach(a),As.forEach(a),hv.forEach(a),F=r(yl),S=l(yl,"LI",{});var Jv=e(S);Ds=o(Jv,"캠프장을 처음 왔을 때 보다 더 깨끗하게 하고 떠나라 p19"),Jv.forEach(a),yl.forEach(a),b=r(s),d=l(s,"H1",{id:!0});var Kv=e(d);I=l(Kv,"A",{href:!0});var zv=e(I);Ea=o(zv,"2장 의미있는 이름"),zv.forEach(a),Kv.forEach(a),cs=r(s),m=l(s,"UL",{});var D=e(m);G=l(D,"LI",{});var Qv=e(G);da=o(Qv,"의도를 분명히 밝히자: 코드가 무엇을 의미하는지 독자로 하여금 납득이 되어야 한다"),Qv.forEach(a),ha=r(D),fs=l(D,"LI",{});var Zv=e(fs);La=o(Zv,"그릇된 정보를 피하라: 변수나 함수 이름에 잘못된 정보를 포함시키지 말아야 한다. 다른 사람이 코드를 읽을 때 혼란을 줄 수 있으며, 잘못된 가정을 할 수도 있다."),Zv.forEach(a),ma=r(D),Hl=l(D,"LI",{});var $v=e(Hl);qi=o($v,"의미 있게 구분하라: 변수나 함수 이름은 서로 다른 개념을 구분할 수 있도록 명확하고 일관성 있게 작성해야 한다. 혼란을 줄이고 코드의 가독성을 향상시킨다."),$v.forEach(a),Fi=r(D),Ul=l(D,"LI",{});var gv=e(Ul);Gi=o(gv,"발음하기 쉬운 이름을 사용하라. 코드의 이름은 다른 사람들이 발음하기 쉽고 이해하기 쉽게 작성되어야 한다."),gv.forEach(a),Yi=r(D),Dl=l(D,"LI",{});var s_=e(Dl);Bi=o(s_,"검색하기 쉬운 이름을 사용하라. 변수나 함수의 이름은 다른 사람들이 쉽게 검색할 수 있도록 작성되어야 한다. 명확하고 직관적인 이름을 선택하여 코드의 유지보수성을 높이는데 도움이 된다."),s_.forEach(a),Xi=r(D),Rl=l(D,"LI",{});var n_=e(Rl);Wi=o(n_,"인코딩을 피하라: 변수나 함수 이름에 인코딩을 사용하지 않는 것이 좋다. 의미 있는 이름을 사용하여 코드의 가독성을 높이는 것이 중요하다."),n_.forEach(a),Vi=r(D),Cl=l(D,"LI",{});var a_=e(Cl);Ji=o(a_,"자신의 기억력을 자랑하지 마라: 변수 이름을 자신만 아는 이름으로 변환하지 말아라"),a_.forEach(a),Ki=r(D),Ml=l(D,"LI",{});var t_=e(Ml);zi=o(t_,"불필요한 유머나 맥락을 벗어나는 명명법을 사용하지 말고 방법론에 의한 명명법을 쓰자"),t_.forEach(a),D.forEach(a),Fo=r(s),Rs=l(s,"H1",{id:!0});var l_=e(Rs);ya=l(l_,"A",{href:!0});var e_=e(ya);Qi=o(e_,"3장 함수"),e_.forEach(a),l_.forEach(a),Go=r(s),Cs=l(s,"H3",{id:!0});var p_=e(Cs);wa=l(p_,"A",{href:!0});var o_=e(wa);Zi=o(o_,"작게 만들어라"),o_.forEach(a),p_.forEach(a),Yo=r(s),Ia=l(s,"P",{});var c_=e(Ia);$i=o(c_,"호출하는 함수 형식으로 함수는 짧을수록 좋다 2~3줄 내외면 더 좋다. 들여쓰기 구조도 1단이나 2단을 넘어서면 힘들어진다"),c_.forEach(a),Bo=r(s),Ms=l(s,"H3",{id:!0});var u_=e(Ms);Pa=l(u_,"A",{href:!0});var i_=e(Pa);gi=o(i_,"한 가지만 해라"),i_.forEach(a),u_.forEach(a),Xo=r(s),Aa=l(s,"P",{});var r_=e(Aa);sr=o(r_,"추상화 단계에서 일을 하는 가짓수가 하나여야 한다 가령 다른 함수를 호출하는 함수가 존재한다면 그 함수는 한가지 일을 하고 있는것이다."),r_.forEach(a),Wo=r(s),js=l(s,"H3",{id:!0});var k_=e(js);ba=l(k_,"A",{href:!0});var f_=e(ba);nr=o(f_,"함수 당 추상화 수준은 하나로"),f_.forEach(a),k_.forEach(a),Vo=r(s),Ta=l(s,"P",{});var v_=e(Ta);ar=o(v_,"한 함수내에 여러가지 추상화 수준을 섞으면 코드를 읽는 사람이 헷갈린다. 특정 표현이 근본 개념인지 아니면 세부사항인지 구분하기 어려운 탓이다."),v_.forEach(a),Jo=r(s),Sa=l(s,"P",{});var __=e(Sa);tr=o(__,"내려가기 규칙을 활용하자 위에서 아래로 프로그램을 읽을수 있도록 함수 추상화 수준을 한단계씩 내려보자"),__.forEach(a),Ko=r(s),Oa=l(s,"P",{});var E_=e(Oa);lr=o(E_,"TO 설정 페이지와 해제 페이지를 포함라혀면, 설정 페이지를 폼학하고, 테스트 페이지 내용을 포함하고 해제 페이지를 포함한다."),E_.forEach(a),zo=r(s),g=l(s,"UL",{});var wl=e(g);jl=l(wl,"LI",{});var d_=e(jl);er=o(d_,"To 설정 페이지를 포함하려면, 슈트이면 슈트 설정 페이지를 포함한 후 일반 설정 페이지를 포함한다."),d_.forEach(a),pr=r(wl),Nl=l(wl,"LI",{});var h_=e(Nl);or=o(h_,"To 슈트 설정 페이지를 포함하려면, 부모 계층에서 SuiteSetUp 페이지를 찾아 Include문과 페이지 경로를 추가한다."),h_.forEach(a),cr=r(wl),xl=l(wl,"LI",{});var L_=e(xl);ur=o(L_,"To 부모 계층을 검색하려면…"),L_.forEach(a),wl.forEach(a),Qo=r(s),Ns=l(s,"H3",{id:!0});var m_=e(Ns);Ha=l(m_,"A",{href:!0});var y_=e(Ha);ir=o(y_,"Switch문"),y_.forEach(a),m_.forEach(a),Zo=r(s),Ua=l(s,"P",{});var w_=e(Ua);rr=o(w_,"스위치 문을 다형성 객체를 생성하는 코드 안에서 허용하고 상속관계로 숨기고 다른 코드에 노출하지 않는 방법이 있다."),w_.forEach(a),$o=r(s),xs=l(s,"H3",{id:!0});var I_=e(xs);Da=l(I_,"A",{href:!0});var P_=e(Da);kr=o(P_,"서술적인 이름을 사용하라"),P_.forEach(a),I_.forEach(a),go=r(s),Ra=l(s,"P",{});var A_=e(Ra);fr=o(A_,"이름이 길어도 괜찮고 서술적인 이름이 짧고 어려운 이름보다 좋다. 함수 이름을 정할때 여러 단어가 쉽게 읽히는 명명법을 사용하는것이 좋다. 여러 단어를 사용해 함수 기능을 표현하라"),A_.forEach(a),sc=r(s),Ca=l(s,"P",{});var b_=e(Ca);vr=o(b_,"모듈 내에서 함수 이름은 같은 문구,명사,동사를 사용한다."),b_.forEach(a),nc=r(s),qs=l(s,"H3",{id:!0});var T_=e(qs);Ma=l(T_,"A",{href:!0});var S_=e(Ma);_r=o(S_,"함수 인수"),S_.forEach(a),T_.forEach(a),ac=r(s),ja=l(s,"P",{});var O_=e(ja);Er=o(O_,"함수에서 이상적인 인수 개수는 0개이다. 다음은 1개이고 다음은2개이다. 최선은 입력 인수가 없는 경우 ex: IncludeSetupPageInfo(new PageContent) → includeSetupPage()"),O_.forEach(a),tc=r(s),Fs=l(s,"P",{});var Lv=e(Fs);ql=l(Lv,"EM",{});var H_=e(ql);dr=o(H_,"많이쓰는 단항형식"),H_.forEach(a),hr=o(Lv,`
함수에 인수 1개를 넘기는 이유`),Lv.forEach(a),lc=r(s),ss=l(s,"OL",{});var Il=e(ss);Fl=l(Il,"LI",{});var U_=e(Fl);Lr=o(U_,"인수에 질문을 던지는 경우"),U_.forEach(a),mr=r(Il),Gl=l(Il,"LI",{});var D_=e(Gl);yr=o(D_,"인수를 뭔가로 변환해 결과를 반환하는 경우"),D_.forEach(a),wr=r(Il),Yl=l(Il,"LI",{});var R_=e(Yl);Ir=o(R_,"단항 함수 형식의 이벤트"),R_.forEach(a),Il.forEach(a),ec=r(s),Na=l(s,"P",{});var C_=e(Na);Pr=o(C_,"플래그 인수는 추하다. 함수에 부울 값을 넘기는 관례는 차라리 인수별말고 상황별로 함수를 나누는 편이 좋다"),C_.forEach(a),pc=r(s),Gs=l(s,"P",{});var mv=e(Gs);Bl=l(mv,"EM",{});var M_=e(Bl);Ar=o(M_,"이항함수"),M_.forEach(a),br=o(mv,`
인수가 2개인 함수는 1개인 함수보다 이해하기 어렵다. 프로그램을 짜다보면 불가피한 경우도 생기지만 그만큼 위험이 따른다`),mv.forEach(a),oc=r(s),Ys=l(s,"P",{});var yv=e(Ys);Xl=l(yv,"EM",{});var j_=e(Xl);Tr=o(j_,"삼항함수"),j_.forEach(a),Sr=o(yv,`
삼항 함수부터는 신중히 고려해야 한다..`),yv.forEach(a),cc=r(s),Bs=l(s,"P",{});var wv=e(Bs);Wl=l(wv,"EM",{});var N_=e(Wl);Or=o(N_,"동사와 키워드"),N_.forEach(a),Hr=o(wv,`
단항 함수는 함수와 인수가 동사/명사 쌍을 이ㅝ야 한다.
함수 이름에 키워드를 추가하는 편도 좋다`),wv.forEach(a),uc=r(s),Xs=l(s,"H3",{id:!0});var x_=e(Xs);xa=l(x_,"A",{href:!0});var q_=e(xa);Ur=o(q_,"부수 효과를 일으키지 마라"),q_.forEach(a),x_.forEach(a),ic=r(s),qa=l(s,"P",{});var F_=e(qa);Dr=o(F_,"함수에서 한 가지를 하겠다고 약속하고선 남몰래 다른 짓을 하지 말아라!"),F_.forEach(a),rc=r(s),Ws=l(s,"H3",{id:!0});var G_=e(Ws);Fa=l(G_,"A",{href:!0});var Y_=e(Fa);Rr=o(Y_,"명령과 조회를 분리하라!"),Y_.forEach(a),G_.forEach(a),kc=r(s),Ga=l(s,"P",{});var B_=e(Ga);Cr=o(B_,"함수는 뭔가를 수행하거나 뭔가에 답하거나 둘중 하나만 해야한다. 둘 다 하면 안 된다. 객체 상태를 변경하거나 아니면 객체 정보를 반환하거나 둘 중 하나다."),B_.forEach(a),fc=r(s),Vs=l(s,"H3",{id:!0});var X_=e(Vs);Ya=l(X_,"A",{href:!0});var W_=e(Ya);Mr=o(W_,"Try/Catch 블록은 한 함수에서 별도로 처리"),W_.forEach(a),X_.forEach(a),vc=r(s),Ba=l(s,"P",{});var V_=e(Ba);jr=o(V_,"코드 구조에 혼란을 일으키며, 정상 동작과 오류 처리 동작을 뒤섞는다."),V_.forEach(a),_c=r(s),Js=l(s,"H3",{id:!0});var J_=e(Js);Xa=l(J_,"A",{href:!0});var K_=e(Xa);Nr=o(K_,"반복하지 마라"),K_.forEach(a),J_.forEach(a),Ec=r(s),Wa=l(s,"P",{});var z_=e(Wa);xr=o(z_,"중복은 소트트웨어에서 모든 악의 근원이다. 많은 원칙과 기법이 중복을 없애거나 제어할 목적으로 나왔다."),z_.forEach(a),dc=r(s),Ks=l(s,"H1",{id:!0});var Q_=e(Ks);Va=l(Q_,"A",{href:!0});var Z_=e(Va);qr=o(Z_,"4장 주석"),Z_.forEach(a),Q_.forEach(a),hc=r(s),Ja=l(s,"P",{});var $_=e(Ja);Fr=o($_,"잘 달린 주석은 어떤 정보보다 유용하지만, 거짓말을 하는 경우가 많다. 일부가 여기서 저기로 옮겨지면서 발생하는 불상사"),$_.forEach(a),Lc=r(s),Ka=l(s,"P",{});var g_=e(Ka);Gr=o(g_,"진실은 한 곳에만 존재한다. 바로 코드다 코드만이 자기가 하는 일을 진실되게 말한다."),g_.forEach(a),mc=r(s),zs=l(s,"H3",{id:!0});var sE=e(zs);za=l(sE,"A",{href:!0});var nE=e(za);Yr=o(nE,"주석은 나쁜 코드를 보완하지 못한다"),nE.forEach(a),sE.forEach(a),yc=r(s),Qa=l(s,"UL",{});var aE=e(Qa);Vl=l(aE,"LI",{});var tE=e(Vl);Br=o(tE,"표현력이 풍부하고 주석이 거의 없는 코드가, 복잡하고 어수선하며 주석이 많이 달린 코드보다 훨씬 좋다."),tE.forEach(a),aE.forEach(a),wc=r(s),Qs=l(s,"H3",{id:!0});var lE=e(Qs);Za=l(lE,"A",{href:!0});var eE=e(Za);Xr=o(eE,"코드를 의도로 표현하라"),eE.forEach(a),lE.forEach(a),Ic=r(s),$a=l(s,"UL",{});var pE=e($a);Jl=l(pE,"LI",{});var oE=e(Jl);Wr=o(oE,"코드로 대다수 의도를 표현할수 있다 많은 경우 주석으로 달려는 설명을 함수로 만들어 표현해도 충분하다."),oE.forEach(a),pE.forEach(a),Pc=r(s),Zs=l(s,"H3",{id:!0});var cE=e(Zs);ga=l(cE,"A",{href:!0});var uE=e(ga);Vr=o(uE,"좋은 주석"),uE.forEach(a),cE.forEach(a),Ac=r(s),H=l(s,"UL",{});var Y=e(H);Kl=l(Y,"LI",{});var iE=e(Kl);Jr=o(iE,"정말은 좋은 주석은 주석을 달지 않을 방법을 찾아낸 주석이라는 사실을 알아라"),iE.forEach(a),Kr=r(Y),zl=l(Y,"LI",{});var rE=e(zl);zr=o(rE,`법적인 주석
각 소스 파일 첫머리에 주석으로 들어가는 저작권 정보와 소유권 정보`),rE.forEach(a),Qr=r(Y),Ql=l(Y,"LI",{});var kE=e(Ql);Zr=o(kE,`정보를 제공하는 주석
기본적인 정보를 주석으로 제공하면 편리하지만 그래도 함수 이름에 정보를 담는편이 좋다`),kE.forEach(a),$r=r(Y),Zl=l(Y,"LI",{});var fE=e(Zl);gr=o(fE,`의도를 설명하는 주석
두 객체를 비교하는 하는 코드가 있다고 가정했을때 저자의 의도를 보여주는 코드가 좋다`),fE.forEach(a),sk=r(Y),$l=l(Y,"LI",{});var vE=e($l);nk=o(vE,`의미를 명료하게 밝히는 주석
일반적으로 인수나 반환값 자체를 명확하게 만들면 더 좋겠지만, 인수나 반환값이 표준 라이브러리나 변경하지 못하는 코드에 속한다면 의미를 명료하게 밝히는 주석이 유용하다.`),vE.forEach(a),ak=r(Y),gl=l(Y,"LI",{});var _E=e(gl);tk=o(_E,`ex
docs형..
결과를 경고하는 주석
TODO주석
중요성을 강조하는 주석`),_E.forEach(a),Y.forEach(a),bc=r(s),$s=l(s,"H3",{id:!0});var EE=e($s);st=l(EE,"A",{href:!0});var dE=e(st);lk=o(dE,"나쁜 주석"),dE.forEach(a),EE.forEach(a),Tc=r(s),nt=l(s,"P",{});var hE=e(nt);ek=o(hE,"대다수 주석이 속하는 범주, 허술한 코드를 지탱하거나, 엉뚱한 코드를 변명하거나, 미숙한 결정을 합리화 한다."),hE.forEach(a),Sc=r(s),_=l(s,"UL",{});var E=e(_);se=l(E,"LI",{});var LE=e(se);pk=o(LE,"주절거리는 주석: 저자에게만 의미가 있고 의사소통이 어려운 주석들"),LE.forEach(a),ok=r(E),ne=l(E,"LI",{});var mE=e(ne);ck=o(mE,"같은 이야기를 중복하는 주석: 주석이 코드보다 더 많은 정보를 제공하지 못하는 경우"),mE.forEach(a),uk=r(E),ae=l(E,"LI",{});var yE=e(ae);ik=o(yE,"오해할 여지가 있는 주석: 코드보다 읽기도 어려운 주석에 살짝 잘못된 정보를 포함한 경우"),yE.forEach(a),rk=r(E),te=l(E,"LI",{});var wE=e(te);kk=o(wE,"의무적으로 다는 주석: javadocs를 넣으라는 규칙이 낳은 아무가치없는 주석"),wE.forEach(a),fk=r(E),le=l(E,"LI",{});var IE=e(le);vk=o(IE,"이력을 기록하는 주석: git이 있으니 이제 없어도 된다"),IE.forEach(a),_k=r(E),ee=l(E,"LI",{});var PE=e(ee);Ek=o(PE,"있으나 마나 한 주석: 너무 당연한 사실을 언급 가령 생성자를 알려주는 경우"),PE.forEach(a),dk=r(E),pe=l(E,"LI",{});var AE=e(pe);hk=o(AE,"위치를 표시하는 주석: 유용한 경우도 있지만 독자가 흔한 잡음으로 여겨 무시한다"),AE.forEach(a),Lk=r(E),oe=l(E,"LI",{});var bE=e(oe);mk=o(bE,"닫는 괄호에 다는 주석: 함수를 줄이는 편이 낫다."),bE.forEach(a),yk=r(E),ce=l(E,"LI",{});var TE=e(ce);wk=o(TE,"공로를 돌리거나 저자를 표시하는 주석: 이것도 git에 맡기자"),TE.forEach(a),Ik=r(E),ue=l(E,"LI",{});var SE=e(ue);Pk=o(SE,"주석으로 처리한 코드: 주석으로 처리한 코드만큼 밉살스러운 관행도 드물다."),SE.forEach(a),Ak=r(E),ie=l(E,"LI",{});var OE=e(ie);bk=o(OE,"HTML 주석: 주석을 뽑아 웹페이지에 올릴 작정이라면 태그를 삽입해야 하는 책임은 프로그래머가 아니라 도구가 져야 맞다"),OE.forEach(a),Tk=r(E),re=l(E,"LI",{});var HE=e(re);Sk=o(HE,"전역 정보: 상수 값은 코드와 주석이 전혀 통제할수 없다"),HE.forEach(a),Ok=r(E),ke=l(E,"LI",{});var UE=e(ke);Hk=o(UE,"너무 많은 정보: 장황하게 늘어놓지 마라"),UE.forEach(a),Uk=r(E),fe=l(E,"LI",{});var DE=e(fe);Dk=o(DE,"모호한 관계: 주석과 주석이 설명하는 코드는 둘 사이에 관계가 명백해야 한다"),DE.forEach(a),Rk=r(E),ve=l(E,"LI",{});var RE=e(ve);Ck=o(RE,"함수 헤더: 짧은 함수는 긴 설명이 필요 없다. 짧고 한 가지만 수행하며 이름을 잘 붙인 함수가 주석으로 헤더를 추가한 함수보다 훨씬 좋다."),RE.forEach(a),Mk=r(E),_e=l(E,"LI",{});var CE=e(_e);jk=o(CE,"비공개 코드에서 Javadocs: 공개하지 않을 코드라면 자바독스는 쓸모가 없다"),CE.forEach(a),E.forEach(a),Oc=r(s),gs=l(s,"H1",{id:!0});var ME=e(gs);at=l(ME,"A",{href:!0});var jE=e(at);Nk=o(jE,"5장 형식 맞추기"),jE.forEach(a),ME.forEach(a),Hc=r(s),tt=l(s,"P",{});var NE=e(tt);xk=o(NE,"프로그래머라면 형식을 깔끔하게 맞춰 코드를 짜야 한다. 팀으로 일한다면 팀이 합의해 규칙을 정하고 모두가 그 규칙을 따라야 한다."),NE.forEach(a),Uc=r(s),sn=l(s,"H3",{id:!0});var xE=e(sn);lt=l(xE,"A",{href:!0});var qE=e(lt);qk=o(qE,"형식을 맞추는 목적"),qE.forEach(a),xE.forEach(a),Dc=r(s),vs=l(s,"UL",{});var si=e(vs);Ee=l(si,"LI",{});var FE=e(Ee);Fk=o(FE,"코드 형식은 매우 중요하다"),FE.forEach(a),Gk=r(si),de=l(si,"LI",{});var GE=e(de);Yk=o(GE,"오늘 구현한 기능이 다음 버전에서 바뀔 확률은 아주 높다. 가독성이 바뀔 코드의 품질을 결정한다."),GE.forEach(a),si.forEach(a),Rc=r(s),nn=l(s,"H3",{id:!0});var YE=e(nn);et=l(YE,"A",{href:!0});var BE=e(et);Bk=o(BE,"적절한 행 길이를 유지하라"),BE.forEach(a),YE.forEach(a),Cc=r(s),U=l(s,"UL",{});var B=e(U);he=l(B,"LI",{});var XE=e(he);Le=l(XE,"P",{});var WE=e(Le);Xk=o(WE,"대다수가 500줄을 넘지 않고 대부분이 200줄 정도인 파일로도 커다란 시스템을 구축할수 있다."),WE.forEach(a),XE.forEach(a),Wk=r(B),an=l(B,"LI",{});var ni=e(an);me=l(ni,"P",{});var VE=e(me);Vk=o(VE,"신문 기사처럼 작성하라"),VE.forEach(a),Jk=r(ni),V=l(ni,"UL",{});var bs=e(V);ye=l(bs,"LI",{});var JE=e(ye);Kk=o(JE,"최상단 기사를 몇 마디로 요약하는 표제가 나오고, 첫 문단이 기사 내용을 요약한다."),JE.forEach(a),zk=r(bs),we=l(bs,"LI",{});var KE=e(we);Qk=o(KE,"소스 파일도 이와 비슷하게 이름만 보고도 올바른 모듈을 판단 할 정도로 신경 써서 짓는다."),KE.forEach(a),Zk=r(bs),Ie=l(bs,"LI",{});var zE=e(Ie);$k=o(zE,"소스 파일 첫 부분은 고차원 개념과 알고리즘을 설명하고 아래로 내려갈수록 세세하게 묘사한다."),zE.forEach(a),gk=r(bs),Pe=l(bs,"LI",{});var QE=e(Pe);sf=o(QE,"신문은 다양한 기사로 이뤄진다. 대다수 기사가 아주 짧고 날짜, 이름들을 뒤섞은 긴 기사 하나만 싣는다면 아무도 읽지 않을것이다."),QE.forEach(a),bs.forEach(a),ni.forEach(a),nf=r(B),tn=l(B,"LI",{});var ai=e(tn);Ae=l(ai,"P",{});var ZE=e(Ae);af=o(ZE,"개념은 빈 행으로 분리하라"),ZE.forEach(a),tf=r(ai),ln=l(ai,"UL",{});var ti=e(ln);be=l(ti,"LI",{});var $E=e(be);lf=o($E,"모든 코드는 왼쪽에서 오른쪽으로 그리고 위에서 아래로 읽힌다."),$E.forEach(a),ef=r(ti),Te=l(ti,"LI",{});var gE=e(Te);pf=o(gE,"일련의 행 묶음은 완결된 생각 하나를 표현한다."),gE.forEach(a),ti.forEach(a),ai.forEach(a),of=r(B),en=l(B,"LI",{});var li=e(en);Se=l(li,"P",{});var s4=e(Se);cf=o(s4,"세로 밀집도"),s4.forEach(a),uf=r(li),Oe=l(li,"UL",{});var n4=e(Oe);pn=l(n4,"LI",{});var ei=e(pn);He=l(ei,"P",{});var a4=e(He);rf=o(a4,"줄바꿈이 개념을 분리한다면 세로 밀집도는 연광성을 의미한다. 서로 밀접한 코드 행은 세로로 가까이 놓여야 한다는 뜻이다."),a4.forEach(a),kf=r(ei),pt=l(ei,"PRE",{class:!0});var tL=e(pt);tL.forEach(a),ei.forEach(a),n4.forEach(a),li.forEach(a),ff=r(B),on=l(B,"LI",{});var pi=e(on);Ue=l(pi,"P",{});var t4=e(Ue);vf=o(t4,"수직 거리"),t4.forEach(a),_f=r(pi),x=l(pi,"UL",{});var ls=e(x);De=l(ls,"LI",{});var l4=e(De);Re=l(l4,"P",{});var e4=e(Re);Ef=o(e4,"서로 밀접한 개념은 세로로 가까이 둬야 한다. 물론 두 개념이 서로 다른 파일에 속한다면 규칙이 통하지 않는다. 하지만 타당한 근거 없다면 서로 밀접한 개념은 한 파일에 속해야 마땅하다."),e4.forEach(a),l4.forEach(a),df=r(ls),cn=l(ls,"LI",{});var oi=e(cn);Ce=l(oi,"P",{});var p4=e(Ce);hf=o(p4,"변수선언 위치"),p4.forEach(a),Lf=r(oi),un=l(oi,"UL",{});var ci=e(un);Me=l(ci,"LI",{});var o4=e(Me);mf=o(o4,"사용하는 위치에 최대한 가까이 선언한다. 우리가 만든 함수는 매우 짧으므로 지역 변수는 각 함수 맨 처음에 선언한다."),o4.forEach(a),yf=r(ci),je=l(ci,"LI",{});var c4=e(je);wf=o(c4,"루프를 제어하는 변수는 흔히 루프문 내부에 선언한다. (아주 드물지만 블록 상단이나 루프 직전에 선언하는 사례도 있다)"),c4.forEach(a),ci.forEach(a),oi.forEach(a),If=r(ls),rn=l(ls,"LI",{});var ui=e(rn);Ne=l(ui,"P",{});var u4=e(Ne);Pf=o(u4,"인스턴스 변수"),u4.forEach(a),Af=r(ui),xe=l(ui,"UL",{});var i4=e(xe);qe=l(i4,"LI",{});var r4=e(qe);bf=o(r4,"클래스 맨 처음에 선언한다."),r4.forEach(a),i4.forEach(a),ui.forEach(a),Tf=r(ls),kn=l(ls,"LI",{});var ii=e(kn);Fe=l(ii,"P",{});var k4=e(Fe);Sf=o(k4,"종속 함수"),k4.forEach(a),Of=r(ii),Ge=l(ii,"UL",{});var f4=e(Ge);fn=l(f4,"LI",{});var ri=e(fn);Ye=l(ri,"P",{});var v4=e(Ye);Hf=o(v4,"한 함수가 다른 함수를 호출한다면 두 함수는 세로로 가까이 배치한다."),v4.forEach(a),Uf=r(ri),ot=l(ri,"PRE",{class:!0});var lL=e(ot);lL.forEach(a),ri.forEach(a),f4.forEach(a),ii.forEach(a),Df=r(ls),vn=l(ls,"LI",{});var ki=e(vn);Be=l(ki,"P",{});var _4=e(Be);Rf=o(_4,"개념적 유사성"),_4.forEach(a),Cf=r(ki),_n=l(ki,"UL",{});var fi=e(_n);Xe=l(fi,"LI",{});var E4=e(Xe);Mf=o(E4,"친화도가 높을수록 코드를 가까이 배치한다."),E4.forEach(a),jf=r(fi),We=l(fi,"LI",{});var d4=e(We);Nf=o(d4,"친화도가 높은 요인은 한 함수가 다른 함수를 호출해 생기는 종속성이 생기는 경우나 명명법이 똑가톡 기본 기능이 유사한 경우"),d4.forEach(a),fi.forEach(a),ki.forEach(a),ls.forEach(a),pi.forEach(a),xf=r(B),En=l(B,"LI",{});var vi=e(En);Ve=l(vi,"P",{});var h4=e(Ve);qf=o(h4,"세로 순서"),h4.forEach(a),Ff=r(vi),dn=l(vi,"UL",{});var _i=e(dn);Je=l(_i,"LI",{});var L4=e(Je);Gf=o(L4,"가장 중요한 개념을 가장 먼저 표현한다."),L4.forEach(a),Yf=r(_i),Ke=l(_i,"LI",{});var m4=e(Ke);Bf=o(m4,"세세한 사항을 최대한 배제한다."),m4.forEach(a),_i.forEach(a),vi.forEach(a),B.forEach(a),Mc=r(s),hn=l(s,"H3",{id:!0});var y4=e(hn);ct=l(y4,"A",{href:!0});var w4=e(ct);Xf=o(w4,"가로 형식 맞추기"),w4.forEach(a),y4.forEach(a),jc=r(s),T=l(s,"UL",{});var N=e(T);ze=l(N,"LI",{});var I4=e(ze);Wf=o(I4,"기존 오픈소스 코드들은 60자 이상부터 떨어진다. 프로그래머는 명백하게 짧은 행을 선호한다."),I4.forEach(a),Vf=r(N),Qe=l(N,"LI",{});var P4=e(Qe);Jf=o(P4,"100자나 120자에 달해도 나쁘지 않지만 그 이상은 솔직히 주의 부족이다."),P4.forEach(a),Kf=r(N),Ze=l(N,"LI",{});var A4=e(Ze);zf=o(A4,"가로 공백과 밀집도 가로로는 공백을 사용해 밀접한 개념과 느슨한 개념을 표현한다."),A4.forEach(a),Qf=r(N),ut=l(N,"LI",{});var Iv=e(ut);Zf=o(Iv,"가로 정렬"),Ln=l(Iv,"UL",{});var Ei=e(Ln);$e=l(Ei,"LI",{});var b4=e($e);$f=o(b4,"코드의 변수값을 강조하기 위해 가로공백을 넣지 말아라 ide에서 다 잡힌다"),b4.forEach(a),gf=r(Ei),ge=l(Ei,"LI",{});var T4=e(ge);s1=o(T4,"선언부가 길고 강조할게 많다면 클래스를 쪼개야 한다는 의미이다."),T4.forEach(a),Ei.forEach(a),Iv.forEach(a),n1=r(N),it=l(N,"LI",{});var Pv=e(it);a1=o(Pv,"들여쓰기"),mn=l(Pv,"UL",{});var di=e(mn);sp=l(di,"LI",{});var S4=e(sp);t1=o(S4,"들여쓰기 자체가 윤곽도를 보여준다"),S4.forEach(a),l1=r(di),np=l(di,"LI",{});var O4=e(np);e1=o(O4,"들여쓰기한 파일은 구조가 한눈에 들어온더. 변수, 생성자 함수, 접근자 함수, 메서드가 금방 보인다."),O4.forEach(a),di.forEach(a),Pv.forEach(a),p1=r(N),ap=l(N,"LI",{});var H4=e(ap);o1=o(H4,"때로는 간단한 if, while, 짧은 함수에서 들여쓰기를 무시하고픈 유혹이 생긴다. 원점으로 돌아가도록 하자"),H4.forEach(a),c1=r(N),rt=l(N,"LI",{});var Av=e(rt);u1=o(Av,"팀 규칙"),tp=l(Av,"UL",{});var U4=e(tp);lp=l(U4,"LI",{});var D4=e(lp);i1=o(D4,"팀은 한 가지 규칙에 합의해야 한다. 그리고 모든 팀원은 그 규칙을 따라야 한다."),D4.forEach(a),U4.forEach(a),Av.forEach(a),N.forEach(a),Nc=r(s),yn=l(s,"H1",{id:!0});var R4=e(yn);kt=l(R4,"A",{href:!0});var C4=e(kt);r1=o(C4,"6장 객체와 자료구조"),C4.forEach(a),R4.forEach(a),xc=r(s),ft=l(s,"P",{});var M4=e(ft);k1=o(M4,"변수를 비공개로 정의 하는 이유는 남들이 변수에 의존하지 않게 만들고 싶어서다."),M4.forEach(a),qc=r(s),wn=l(s,"H3",{id:!0});var j4=e(wn);vt=l(j4,"A",{href:!0});var N4=e(vt);f1=o(N4,"자료 추상화"),N4.forEach(a),j4.forEach(a),Fc=r(s),_s=l(s,"UL",{});var hi=e(_s);ep=l(hi,"LI",{});var x4=e(ep);v1=o(x4,"변수 사이에 함수라는 계층을 넣는다고 구현이 저절로 감춰지지는 않는다. 구현을 감추려면 추상화가 필요하다. 그보다는 추상 인터페이스를 제공해 사용자가 구현을 모른 채 자료의 핵심을 조작할 수 있어야 진정한 의미의 클래스다."),x4.forEach(a),_1=r(hi),pp=l(hi,"LI",{});var q4=e(pp);E1=o(q4,"개발자는 객체가 포함하는 자료를 표현할 가장 좋은 방법을 심각하게 고민해야 한다."),q4.forEach(a),hi.forEach(a),Gc=r(s),In=l(s,"H3",{id:!0});var F4=e(In);_t=l(F4,"A",{href:!0});var G4=e(_t);d1=o(G4,"자료/객체 비대칭"),G4.forEach(a),F4.forEach(a),Yc=r(s),Es=l(s,"UL",{});var Li=e(Es);Pn=l(Li,"LI",{});var mi=e(Pn);op=l(mi,"P",{});var Y4=e(op);h1=o(Y4,"객체와 자료 구조는 근본적으로 양분된다."),Y4.forEach(a),L1=r(mi),us=l(mi,"UL",{});var Pl=e(us);cp=l(Pl,"LI",{});var B4=e(cp);m1=o(B4,"절차적인 코드는 기존 자료 구조를 변경하지 않으면서 새 함수를 추가하기 쉽다. 반면, 객체 지향 코드는 기존 함수를 변경하지 않으면서 새 클래스를 추가하기 슆다."),B4.forEach(a),y1=r(Pl),up=l(Pl,"LI",{});var X4=e(up);w1=o(X4,"절차적인 코드는 새로운 자료 구조를 추가하기 어렵다. 그러려면 모든 함수를 고쳐야 한다. 객체 지향 코드는 새로운 함수를 추가하기 어렵다. 그러려면 모든 클래스를 고쳐야 한다."),X4.forEach(a),I1=r(Pl),ip=l(Pl,"LI",{});var W4=e(ip);P1=o(W4,"둘다 참이다. 다시말해 객체 지향코드에서 어려운 변경은 절차적인 코드에서 쉬우며, 절차적인 코드에서 어려운 변경은 객체 지향 코드에서 쉽다."),W4.forEach(a),Pl.forEach(a),mi.forEach(a),A1=r(Li),An=l(Li,"LI",{});var yi=e(An);rp=l(yi,"P",{});var V4=e(rp);b1=o(V4,"예시"),V4.forEach(a),T1=r(yi),bn=l(yi,"UL",{});var wi=e(bn);Tn=l(wi,"LI",{});var Ii=e(Tn);kp=l(Ii,"P",{});var J4=e(kp);S1=o(J4,"절차적인 접근예시"),J4.forEach(a),O1=r(Ii),Et=l(Ii,"PRE",{class:!0});var eL=e(Et);eL.forEach(a),Ii.forEach(a),H1=r(wi),Sn=l(wi,"LI",{});var Pi=e(Sn);fp=l(Pi,"P",{});var K4=e(fp);U1=o(K4,"다형성 접근예시"),K4.forEach(a),D1=r(Pi),dt=l(Pi,"PRE",{class:!0});var pL=e(dt);pL.forEach(a),Pi.forEach(a),wi.forEach(a),yi.forEach(a),Li.forEach(a),Bc=r(s),On=l(s,"H3",{id:!0});var z4=e(On);ht=l(z4,"A",{href:!0});var Q4=e(ht);R1=o(Q4,"디미터 법칙"),Q4.forEach(a),z4.forEach(a),Xc=r(s),C=l(s,"UL",{});var es=e(C);vp=l(es,"LI",{});var Z4=e(vp);C1=o(Z4,"모듈은 자신이 조작하는 객체의 속사정을 몰라야 한다는 법칙이다."),Z4.forEach(a),M1=r(es),Lt=l(es,"LI",{});var bv=e(Lt);j1=o(bv,"클래스 C의 메서드 f는 다음과 같은 메서드만 호출해야 한다"),J=l(bv,"UL",{});var Ts=e(J);_p=l(Ts,"LI",{});var $4=e(_p);N1=o($4,"클래스 C"),$4.forEach(a),x1=r(Ts),Ep=l(Ts,"LI",{});var g4=e(Ep);q1=o(g4,"f가 생성한 객체"),g4.forEach(a),F1=r(Ts),dp=l(Ts,"LI",{});var sd=e(dp);G1=o(sd,"f 인수로 넘어온 객체"),sd.forEach(a),Y1=r(Ts),hp=l(Ts,"LI",{});var nd=e(hp);B1=o(nd,"C 인스턴스 변수에 저장된 객체"),nd.forEach(a),Ts.forEach(a),bv.forEach(a),X1=r(es),mt=l(es,"LI",{});var Tv=e(mt);W1=o(Tv,"기차 충돌"),is=l(Tv,"UL",{});var Al=e(is);yt=l(Al,"LI",{});var Sv=e(yt);V1=o(Sv,"as-is"),Lp=l(Sv,"UL",{});var ad=e(Lp);mp=l(ad,"LI",{});var td=e(mp);yp=l(td,"STRONG",{});var ld=e(yp);J1=o(ld,"final String outputDir = ctext.getOptions().getScracthDir().getAbsolutePath();"),ld.forEach(a),td.forEach(a),ad.forEach(a),Sv.forEach(a),K1=r(Al),wt=l(Al,"LI",{});var Ov=e(wt);z1=o(Ov,"to-be"),wp=l(Ov,"UL",{});var ed=e(wp);Ip=l(ed,"LI",{});var pd=e(Ip);Pp=l(pd,"STRONG",{});var od=e(Pp);Q1=o(od,`Options opts = ctxt.getOptions();
File scractchDir = opts.getScratchDir();
final String outputDir = scracthDir.getAbsolutePath();`),od.forEach(a),pd.forEach(a),ed.forEach(a),Ov.forEach(a),Z1=r(Al),Ap=l(Al,"LI",{});var cd=e(Ap);$1=o(cd,"객체라면 내부 구조를 숨겨야 하므로 확실히 디미터 법칙을 위반한다. 자료구조 라면 내부 구조를 노출하므로 디미터 법칙이 적용되지 않는다."),cd.forEach(a),Al.forEach(a),Tv.forEach(a),g1=r(es),It=l(es,"LI",{});var Hv=e(It);s3=o(Hv,"잡종 구조"),Hn=l(Hv,"UL",{});var Ai=e(Hn);bp=l(Ai,"LI",{});var ud=e(bp);n3=o(ud,"절반은 객체, 절반은 자료 구조인 잡종 구조가 나온다."),ud.forEach(a),a3=r(Ai),Tp=l(Ai,"LI",{});var id=e(Tp);t3=o(id,"이런 잡종 구조는 새로운 함수는 물론이고 새로운 자료 구조도 추가하기 어렵다. 단점만 모아놓은 구조"),id.forEach(a),Ai.forEach(a),Hv.forEach(a),l3=r(es),Pt=l(es,"LI",{});var Uv=e(Pt);e3=o(Uv,"구조체 감추기"),rs=l(Uv,"UL",{});var bl=e(rs);Sp=l(bl,"LI",{});var rd=e(Sp);p3=o(rd,"그렇다면 임시 디렉토러의 절대 경로는 어떻게 얻어야 좋을까?"),rd.forEach(a),o3=r(bl),Op=l(bl,"LI",{});var kd=e(Op);c3=o(kd,`ctxt.getAboslutePathOfScratchDirectoryOption(); → ctxt 객체에 공개해야 하는 메서드가 너무 많아진다
ctx.getScratchDirectoryOption().getAbsolutePath(); → 자료 구조를 반환 한다고 가정한다.`),kd.forEach(a),u3=r(bl),Hp=l(bl,"LI",{});var fd=e(Hp);i3=o(fd,`그렇다면 ctxt 객체에 임시 파일을 생성하라고 시키면 어떨까?
BufferedOutputStream bos = ctxt.createScratchFilesStream(classFileName);
객체에게 맡기기에 적당한 임무로 보인다!`),fd.forEach(a),bl.forEach(a),Uv.forEach(a),es.forEach(a),Wc=r(s),Un=l(s,"H3",{id:!0});var vd=e(Un);At=l(vd,"A",{href:!0});var _d=e(At);r3=o(_d,"자료 전달 객체"),_d.forEach(a),vd.forEach(a),Vc=r(s),ns=l(s,"UL",{});var Tl=e(ns);Up=l(Tl,"LI",{});var Ed=e(Up);Dp=l(Ed,"P",{});var dd=e(Dp);k3=o(dd,"자료 구조체의 전형적인 형태는 공개 변수만 있고 함수가 없는 클래스이다. 이런 자료구조체를 DTO(Data Transfer Object)라 한다."),dd.forEach(a),Ed.forEach(a),f3=r(Tl),Dn=l(Tl,"LI",{});var bi=e(Dn);Rp=l(bi,"P",{});var hd=e(Rp);v3=o(hd,"좀더 일반적인 형태는 Bean 구조이다. 비공개 변수를 조회 설정 함수로 조작하는 방식. 사이비 캡슐화로 일부 순수주의자나 만족시킬뿐 별다른 이익을 제공하지 않는다."),hd.forEach(a),_3=r(bi),bt=l(bi,"PRE",{class:!0});var oL=e(bt);oL.forEach(a),bi.forEach(a),E3=r(Tl),Rn=l(Tl,"LI",{});var Ti=e(Rn);Cp=l(Ti,"P",{});var Ld=e(Cp);d3=o(Ld,"활성 레코드"),Ld.forEach(a),h3=r(Ti),Mp=l(Ti,"UL",{});var md=e(Mp);jp=l(md,"LI",{});var yd=e(jp);L3=o(yd,"공개 변수가 있거나 비공개 변수에 조회/설정 함수가 있는 자료구조, 대게 save나 find와 같이 탐색함수도 제공한다. 불행히도 비즈니스 규칙 메서드를 추가해 이런 자료 구조를 개체로 취급하는 개발자가 흔하다. 하지만 이는 바람직하지 않다. 활성 레코드는 자료 구조로 취급한다."),yd.forEach(a),md.forEach(a),Ti.forEach(a),Tl.forEach(a),Jc=r(s),Cn=l(s,"H3",{id:!0});var wd=e(Cn);Tt=l(wd,"A",{href:!0});var Id=e(Tt);m3=o(Id,"결론"),Id.forEach(a),wd.forEach(a),Kc=r(s),as=l(s,"UL",{});var Sl=e(as);Np=l(Sl,"LI",{});var Pd=e(Np);y3=o(Pd,"객체는 동작을 공개하고 자료를 숨긴다. 기존 동작을 변경하지 않으면서 객체 타입을 추가하기는 쉬운 반면 기존 객체에 새 동작을 추가하기는 어렵다."),Pd.forEach(a),w3=r(Sl),xp=l(Sl,"LI",{});var Ad=e(xp);I3=o(Ad,"자료 구조는 동작 없이 자료를 노출한다. 기존 자료 구조에 새 동작을 추가하기 쉬우나, 기존 함수에 새 자료 구조를 추가하기는 어렵다."),Ad.forEach(a),P3=r(Sl),qp=l(Sl,"LI",{});var bd=e(qp);A3=o(bd,"시스템을 구현할때 새로운 자료 타입을 추가하는 유연셩이 필요하면 객체가 더 적합하다. 새로운 동작을 추가하는 유연성이 필요하면 절차적인 코드가 더 적합하다. 어느쪽이 맞는가는 상황에 따라 다르다."),bd.forEach(a),Sl.forEach(a),zc=r(s),Mn=l(s,"H1",{id:!0});var Td=e(Mn);St=l(Td,"A",{href:!0});var Sd=e(St);b3=o(Sd,"7장 오류처리"),Sd.forEach(a),Td.forEach(a),Qc=r(s),Ot=l(s,"UL",{});var Od=e(Ot);Fp=l(Od,"LI",{});var Hd=e(Fp);T3=o(Hd,"깨끗한 코드와 오류 처리는 확실히 연관성이 있다. 상당수 코드 기반은 전적으로 오류 처리 코드에 좌우된다. 여기저기 흩어진 오류 처리 코드 때문에 실제 코드가 하는 일을 파악하기가 거의 불가능하다는 의미다."),Hd.forEach(a),Od.forEach(a),Zc=r(s),jn=l(s,"H3",{id:!0});var Ud=e(jn);Ht=l(Ud,"A",{href:!0});var Dd=e(Ht);S3=o(Dd,"오류 코드보다 예외를 사용하라"),Dd.forEach(a),Ud.forEach(a),$c=r(s),Ut=l(s,"UL",{});var Rd=e(Ut);Gp=l(Rd,"LI",{});var Cd=e(Gp);O3=o(Cd,"과거에는 오류 플래그를 설정하거나 호출자에게 오류 코드를 반환하는 방법이 전부였다. 위와 같은 방법을 사용하면 호출자 코드가 복잡해지기 때문에 오류가 발생하면 예외를 던지는 편이 낫다."),Cd.forEach(a),Rd.forEach(a),gc=r(s),Nn=l(s,"H3",{id:!0});var Md=e(Nn);Dt=l(Md,"A",{href:!0});var jd=e(Dt);H3=o(jd,"Try-Catch-Finally 문부터 작성하라"),jd.forEach(a),Md.forEach(a),su=r(s),ds=l(s,"UL",{});var Si=e(ds);Yp=l(Si,"LI",{});var Nd=e(Yp);U3=o(Nd,"예외에서 프로그램 안에다 범위를 정의한다는 사실은 매우 흥미롭다. 예외가 발생할 코드를 짤 때는 try-catch-finally문으로 발생하는것이 일관성있게 코드를 유지할수 있게하고, 호출자가 기대하는 상태를 야기할수 있다."),Nd.forEach(a),D3=r(Si),Bp=l(Si,"LI",{});var xd=e(Bp);R3=o(xd,"강제로 예외를 일으키는 테스트 케이스를 작성한 후 테스트를 통과하게 코드를 작성하는 방법을 통해 트랜잭션 범위를 구현하는 방법을 추천한다. 이는 트랜잭션의 본질을 유지하기 쉬워진다."),xd.forEach(a),Si.forEach(a),nu=r(s),xn=l(s,"H3",{id:!0});var qd=e(xn);Rt=l(qd,"A",{href:!0});var Fd=e(Rt);C3=o(Fd,"미확인 예외를 사용하라"),Fd.forEach(a),qd.forEach(a),au=r(s),Ct=l(s,"UL",{});var Gd=e(Ct);Xp=l(Gd,"LI",{});var Yd=e(Xp);M3=o(Yd,"확인된 예외는 OCP법칙을 위반하고, 많은 비용을 초래한다. 일반적인 애플리케이션은 의존성이라는 비용이 이익보다 크다."),Yd.forEach(a),Gd.forEach(a),tu=r(s),qn=l(s,"H3",{id:!0});var Bd=e(qn);Mt=l(Bd,"A",{href:!0});var Xd=e(Mt);j3=o(Xd,"예외에 의미를 제공하라"),Xd.forEach(a),Bd.forEach(a),lu=r(s),jt=l(s,"UL",{});var Wd=e(jt);Wp=l(Wd,"LI",{});var Vd=e(Wp);N3=o(Vd,"예외를 던질 때는 전후 상황을 충분히 덧붙인다. 오류 메시지에 정보를 담아 예외와 함께 던진다."),Vd.forEach(a),Wd.forEach(a),eu=r(s),Fn=l(s,"H3",{id:!0});var Jd=e(Fn);Nt=l(Jd,"A",{href:!0});var Kd=e(Nt);x3=o(Kd,"호출자를 고려해 예외 클래스를 정의하라"),Kd.forEach(a),Jd.forEach(a),pu=r(s),xt=l(s,"UL",{});var zd=e(xt);Vp=l(zd,"LI",{});var Qd=e(Vp);q3=o(Qd,"오류를 분류하는 방법은 수없이 많다. 애플리케이션에서 오류를 정의할 때 프로그래머에게 가장 중요한 관심사는 오류를 잡아내는 방법이 되어야 한다."),Qd.forEach(a),zd.forEach(a),ou=r(s),Gn=l(s,"PRE",{class:!0});var cL=e(Gn);cL.forEach(a),cu=r(s),qt=l(s,"UL",{});var Zd=e(qt);Jp=l(Zd,"LI",{});var $d=e(Jp);F3=o($d,"위 LocalPort 클래스를 ACMEPort를 감싸고 예외처리용 클래스는 외부 라이브러리와 프로그램 사이에서 의존성이 크게 줄어드는 방법으로 유용하다."),$d.forEach(a),Zd.forEach(a),uu=r(s),Yn=l(s,"H3",{id:!0});var gd=e(Yn);Ft=l(gd,"A",{href:!0});var sh=e(Ft);G3=o(sh,"정상 흐름을 정의하라"),sh.forEach(a),gd.forEach(a),iu=r(s),Gt=l(s,"UL",{});var nh=e(Gt);Kp=l(nh,"LI",{});var ah=e(Kp);Y3=o(ah,`앞 절에서 충고한 지침을 충실히 따른다면 비즈니스 논리와 오류 처리가 잘 분리된 코드가 나온다. 하지만 때론 중단이 적절하지 않은 방식일수도 있다.
특수 상황을 처리할 필요가 없다면 더 간결한 코드작성이 가능해진다.`),ah.forEach(a),nh.forEach(a),ru=r(s),Bn=l(s,"H3",{id:!0});var th=e(Bn);Yt=l(th,"A",{href:!0});var lh=e(Yt);B3=o(lh,"null을 반환하지 마라"),lh.forEach(a),th.forEach(a),ku=r(s),Bt=l(s,"UL",{});var eh=e(Bt);zp=l(eh,"LI",{});var ph=e(zp);X3=o(ph,"null을 반환하는 코드는 일거리를 늘릴 뿐만 아니라 호출자에게 문제를 떠넘긴다. 특수사례 케이스로 넘기거나 빈배열 등을 넘기도록 하자"),ph.forEach(a),eh.forEach(a),fu=r(s),Xn=l(s,"H3",{id:!0});var oh=e(Xn);Xt=l(oh,"A",{href:!0});var ch=e(Xt);W3=o(ch,"null을 전달하지 마라"),ch.forEach(a),oh.forEach(a),vu=r(s),Wt=l(s,"UL",{});var uh=e(Wt);Qp=l(uh,"LI",{});var ih=e(Qp);V3=o(ih,"NullpointException을 야기하는 코드는 만들지 말자"),ih.forEach(a),uh.forEach(a),_u=r(s),Wn=l(s,"H3",{id:!0});var rh=e(Wn);Vt=l(rh,"A",{href:!0});var kh=e(Vt);J3=o(kh,"결론"),kh.forEach(a),rh.forEach(a),Eu=r(s),Jt=l(s,"UL",{});var fh=e(Jt);Zp=l(fh,"LI",{});var vh=e(Zp);K3=o(vh,"깨끗한 코드는 읽기도 좋아야 하지만 안정성도 높아야 한다. 오류 처리를 프로그램 논리와 분리하면 독립적인 추론이 가능해지며 코드 유지보수성도 크게 높아진다."),vh.forEach(a),fh.forEach(a),du=r(s),Vn=l(s,"H1",{id:!0});var _h=e(Vn);Kt=l(_h,"A",{href:!0});var Eh=e(Kt);z3=o(Eh,"8장 경계"),Eh.forEach(a),_h.forEach(a),hu=r(s),Jn=l(s,"H3",{id:!0});var dh=e(Jn);zt=l(dh,"A",{href:!0});var hh=e(zt);Q3=o(hh,"서드파티 코드 사용하기"),hh.forEach(a),dh.forEach(a),Lu=r(s),hs=l(s,"UL",{});var Oi=e(hs);$p=l(Oi,"LI",{});var Lh=e($p);Z3=o(Lh,"인터페이스를 “제공하는” 입장과 “사용하는” 입장 사이에는 필연적인 긴장감이 존재한다."),Lh.forEach(a),$3=r(Oi),gp=l(Oi,"LI",{});var mh=e(gp);g3=o(mh,"사용하는 입장에서 인터페이스의 변경을 우려한다면 래핑하는것도 하나의 방법이다."),mh.forEach(a),Oi.forEach(a),mu=r(s),Kn=l(s,"H3",{id:!0});var yh=e(Kn);Qt=l(yh,"A",{href:!0});var wh=e(Qt);s2=o(wh,"경계를 탐험하고 공부하기"),wh.forEach(a),yh.forEach(a),yu=r(s),Ls=l(s,"UL",{});var Hi=e(Ls);so=l(Hi,"LI",{});var Ih=e(so);n2=o(Ih,"서드파티 코드를 사용할때 우리는 사용할 코드에 대해 테스트할 필요가 있다."),Ih.forEach(a),a2=r(Hi),no=l(Hi,"LI",{});var Ph=e(no);t2=o(Ph,"log4j의 예"),Ph.forEach(a),Hi.forEach(a),wu=r(s),zn=l(s,"PRE",{class:!0});var uL=e(zn);uL.forEach(a),Iu=r(s),Qn=l(s,"H3",{id:!0});var Ah=e(Qn);Zt=l(Ah,"A",{href:!0});var bh=e(Zt);l2=o(bh,"아직 존재하지 않는 코드 사용하기"),bh.forEach(a),Ah.forEach(a),Pu=r(s),ms=l(s,"UL",{});var Ui=e(ms);ao=l(Ui,"LI",{});var Th=e(ao);e2=o(Th,"아직 개발되지 않은 모듈이 필요한데, 인터페이스를 정의하면 분업이 가능하다"),Th.forEach(a),p2=r(Ui),to=l(Ui,"LI",{});var Sh=e(to);o2=o(Sh,"인터페이스를 정의 함으로써 메인로직을 더 깔끔하게 짤 수 있다."),Sh.forEach(a),Ui.forEach(a),Au=r(s),Zn=l(s,"H3",{id:!0});var Oh=e(Zn);$t=l(Oh,"A",{href:!0});var Hh=e($t);c2=o(Hh,"Clean한 경계"),Hh.forEach(a),Oh.forEach(a),bu=r(s),gt=l(s,"UL",{});var Uh=e(gt);lo=l(Uh,"LI",{});var Dh=e(lo);u2=o(Dh,"좋은 소프트웨어는 변경에 유연하게 대처해야 한다. 내부 코드가 서드파티에 영향을 줄수 없게 래핑하듯 변경에 유연하게 대처할수 있는 경계를 만들어야 한다."),Dh.forEach(a),Uh.forEach(a),Tu=r(s),$n=l(s,"H1",{id:!0});var Rh=e($n);sl=l(Rh,"A",{href:!0});var Ch=e(sl);i2=o(Ch,"9장 유닛테스트"),Ch.forEach(a),Rh.forEach(a),Su=r(s),nl=l(s,"P",{});var Mh=e(nl);r2=o(Mh,"코드를 테스트 하는 테스트코드는 없었던 개념이였지만, 애자일과 TDD의 영향으로 많은 개발자들이 자동화된 유닛테스트를 만들고 있다."),Mh.forEach(a),Ou=r(s),gn=l(s,"H3",{id:!0});var jh=e(gn);al=l(jh,"A",{href:!0});var Nh=e(al);k2=o(Nh,"The Three Laws of TDD"),Nh.forEach(a),jh.forEach(a),Hu=r(s),ts=l(s,"UL",{});var Ol=e(ts);tl=l(Ol,"LI",{});var Dv=e(tl);eo=l(Dv,"STRONG",{});var xh=e(eo);f2=o(xh,"첫째 법칙:"),xh.forEach(a),v2=o(Dv," 실패하는 단위 테스트를 작성할 때까지 실제 코드를 작성하지 않는다."),Dv.forEach(a),_2=r(Ol),ll=l(Ol,"LI",{});var Rv=e(ll);po=l(Rv,"STRONG",{});var qh=e(po);E2=o(qh,"둘째 법칙:"),qh.forEach(a),d2=o(Rv," 컴파일은 실패하지 않으면서 실행이 실패하는 정도로만 단위 테스트를 작성한다."),Rv.forEach(a),h2=r(Ol),el=l(Ol,"LI",{});var Cv=e(el);oo=l(Cv,"STRONG",{});var Fh=e(oo);L2=o(Fh,"셋째 법칙:"),Fh.forEach(a),m2=o(Cv," 현재 실패하는 테스트를 통과할 정도로만 실제 코드를 작성한다."),Cv.forEach(a),Ol.forEach(a),Uu=r(s),pl=l(s,"P",{});var Gh=e(pl);y2=o(Gh,"위 법칙을 따르면 엄청난 양의 테스트 코드가 등장한다. 사실상 모든 코드를 테스트 하는수준"),Gh.forEach(a),Du=r(s),sa=l(s,"H3",{id:!0});var Yh=e(sa);ol=l(Yh,"A",{href:!0});var Bh=e(ol);w2=o(Bh,"깨끗한 테스트 코드 유지하기"),Bh.forEach(a),Yh.forEach(a),Ru=r(s),M=l(s,"UL",{});var ps=e(M);co=l(ps,"LI",{});var Xh=e(co);I2=o(Xh,"테스트 코드를 막짜선 안된다, 사실상 관리가 어려워서 폐기하는 코드가 나중에는 등장할것"),Xh.forEach(a),P2=r(ps),uo=l(ps,"LI",{});var Wh=e(uo);A2=o(Wh,"테스트 코드를 짜는 노력이 허사가 되지 않게 실제 코드 못지 않게 깨끗하게 짜야 한다"),Wh.forEach(a),b2=r(ps),io=l(ps,"LI",{});var Vh=e(io);ro=l(Vh,"STRONG",{});var Jh=e(ro);T2=o(Jh,"코드에 유연성, 유지보수성, 재사용성을 제공하는 버팀목이 단위 테스트이다."),Jh.forEach(a),Vh.forEach(a),S2=r(ps),ko=l(ps,"LI",{});var Kh=e(ko);O2=o(Kh,"테스트코드가 있으면 변경에 대한 공포도 줄어들고 유연성도 증가한다."),Kh.forEach(a),H2=r(ps),fo=l(ps,"LI",{});var zh=e(fo);U2=o(zh,"테스트 코드가 지저분하면 실제 코드도 망가진다"),zh.forEach(a),ps.forEach(a),Cu=r(s),na=l(s,"H3",{id:!0});var Qh=e(na);cl=l(Qh,"A",{href:!0});var Zh=e(cl);D2=o(Zh,"깨끗한 테스트 코드"),Zh.forEach(a),Qh.forEach(a),Mu=r(s),ys=l(s,"UL",{});var Di=e(ys);aa=l(Di,"LI",{});var Ri=e(aa);R2=o(Ri,"깨끗한 코드를 만드려면 "),vo=l(Ri,"STRONG",{});var $h=e(vo);C2=o($h,"가독성"),$h.forEach(a),M2=o(Ri," 이 필요하다"),Ri.forEach(a),j2=r(Di),_o=l(Di,"LI",{});var gh=e(_o);Eo=l(gh,"STRONG",{});var s5=e(Eo);N2=o(s5,"BUILD-OPERATE-CHECK 패턴 → 테스트 자료 만들기, 자료 조작, 결과 확인"),s5.forEach(a),gh.forEach(a),Di.forEach(a),ju=r(s),ta=l(s,"PRE",{class:!0});var iL=e(ta);iL.forEach(a),Nu=r(s),la=l(s,"H3",{id:!0});var n5=e(la);ul=l(n5,"A",{href:!0});var a5=e(ul);x2=o(a5,"도메인에 특화된 테스트 언어"),a5.forEach(a),n5.forEach(a),xu=r(s),il=l(s,"UL",{});var t5=e(il);ho=l(t5,"LI",{});var l5=e(ho);q2=o(l5,"시스템 조작 API를 사용하기보단 테스트를 위한 함수와 유틸리티를 이용하면 보다 간결한 테스트 코드를 작성할수 있게된다."),l5.forEach(a),t5.forEach(a),qu=r(s),ea=l(s,"H3",{id:!0});var e5=e(ea);rl=l(e5,"A",{href:!0});var p5=e(rl);F2=o(p5,"이중 표준"),p5.forEach(a),e5.forEach(a),Fu=r(s),kl=l(s,"UL",{});var o5=e(kl);Lo=l(o5,"LI",{});var c5=e(Lo);G2=o(c5,"테스트 API에 적용하는 표준은 실제 코드에 들어가는 표준과는 다를수 있다. 실제 코드만큼 효율적인 필요는 없고 환경도 판이하게 다르기 때문이다."),c5.forEach(a),o5.forEach(a),Gu=r(s),pa=l(s,"PRE",{class:!0});var rL=e(pa);rL.forEach(a),Yu=r(s),oa=l(s,"PRE",{class:!0});var kL=e(oa);kL.forEach(a),Bu=r(s),ca=l(s,"H3",{id:!0});var u5=e(ca);fl=l(u5,"A",{href:!0});var i5=e(fl);Y2=o(i5,"테스트 당 assert 하나"),i5.forEach(a),u5.forEach(a),Xu=r(s),ua=l(s,"PRE",{class:!0});var fL=e(ua);fL.forEach(a),Wu=r(s),ws=l(s,"UL",{});var Ci=e(ws);mo=l(Ci,"LI",{});var r5=e(mo);B2=o(r5,"위에서 보듯 테스트 코드를 분리하면 중복되는 경우가 많아진다"),r5.forEach(a),X2=r(Ci),yo=l(Ci,"LI",{});var k5=e(yo);W2=o(k5,"이 부분은 템플릿 메서드를 사용하면 중복을 많이 줄일수 있다(given-when-then)"),k5.forEach(a),Ci.forEach(a),Vu=r(s),ia=l(s,"H3",{id:!0});var f5=e(ia);vl=l(f5,"A",{href:!0});var v5=e(vl);V2=o(v5,"테스트당 개념 하나"),v5.forEach(a),f5.forEach(a),Ju=r(s),ra=l(s,"PRE",{class:!0});var vL=e(ra);vL.forEach(a),Ku=r(s),Is=l(s,"UL",{});var Mi=e(Is);_l=l(Mi,"LI",{});var Mv=e(_l);J2=o(Mv,"테스트가 내포하는 의미"),ka=l(Mv,"UL",{});var ji=e(ka);El=l(ji,"LI",{});var jv=e(El);K2=o(jv,"(5월처럼) 31일로 끝나는 달의 마지막 날짜가 주어지는 경우"),fa=l(jv,"OL",{});var Ni=e(fa);wo=l(Ni,"LI",{});var _5=e(wo);z2=o(_5,"(6월처럼) 30일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되어서는 안 된다."),_5.forEach(a),Q2=r(Ni),Io=l(Ni,"LI",{});var E5=e(Io);Z2=o(E5,"두 달을 더하면 그리고 두 번째 달이 31일로 끝나면 날짜는 31일이 되어야 한다."),E5.forEach(a),Ni.forEach(a),jv.forEach(a),$2=r(ji),dl=l(ji,"LI",{});var Nv=e(dl);g2=o(Nv,"(6월처럼) 30일로 끝나는 달의 마지막 날짜가 주어지는 경우"),Po=l(Nv,"OL",{});var d5=e(Po);Ao=l(d5,"LI",{});var h5=e(Ao);sv=o(h5,"31일로 끝나는 한 달을 더하면 날짜는 30일이 되어야지 31일이 되면 안 된다."),h5.forEach(a),d5.forEach(a),Nv.forEach(a),ji.forEach(a),Mv.forEach(a),nv=r(Mi),bo=l(Mi,"LI",{});var L5=e(bo);av=o(L5,"이렇게 코드가 장황해지면 읽기에 불편할수 있다. 한 테스트에 한개의 개념만 채택하자"),L5.forEach(a),Mi.forEach(a),zu=r(s),va=l(s,"H3",{id:!0});var m5=e(va);hl=l(m5,"A",{href:!0});var y5=e(hl);To=l(y5,"STRONG",{});var w5=e(To);tv=o(w5,"F.I.R.S.T"),w5.forEach(a),y5.forEach(a),m5.forEach(a),Qu=r(s),Ll=l(s,"P",{});var I5=e(Ll);lv=o(I5,"테스트는 아래 5가지 요소를 충족해야 한다"),I5.forEach(a),Zu=r(s),j=l(s,"UL",{});var os=e(j);So=l(os,"LI",{});var P5=e(So);Oo=l(P5,"STRONG",{});var A5=e(Oo);ev=o(A5,"빠르게Fast"),A5.forEach(a),P5.forEach(a),pv=r(os),Ho=l(os,"LI",{});var b5=e(Ho);Uo=l(b5,"STRONG",{});var T5=e(Uo);ov=o(T5,"독립적으로Independent → 테스트간 의존관계가 있으면 안된다"),T5.forEach(a),b5.forEach(a),cv=r(os),Do=l(os,"LI",{});var S5=e(Do);Ro=l(S5,"STRONG",{});var O5=e(Ro);uv=o(O5,"반복가능하게Repeatable → 환경에 구애받지 않는"),O5.forEach(a),S5.forEach(a),iv=r(os),Co=l(os,"LI",{});var H5=e(Co);Mo=l(H5,"STRONG",{});var U5=e(Mo);rv=o(U5,"자가검증하는Self-Validating → 테스트가 스스로 bool로 결론나야 한다"),U5.forEach(a),H5.forEach(a),kv=r(os),jo=l(os,"LI",{});var D5=e(jo);No=l(D5,"STRONG",{});var R5=e(No);fv=o(R5,"적시에Timely → 테스트 코드를 만들고 운영코드를 작성하라"),R5.forEach(a),D5.forEach(a),os.forEach(a),$u=r(s),_a=l(s,"H3",{id:!0});var C5=e(_a);ml=l(C5,"A",{href:!0});var M5=e(ml);vv=o(M5,"결론"),M5.forEach(a),C5.forEach(a),gu=r(s),Ps=l(s,"UL",{});var xi=e(Ps);xo=l(xi,"LI",{});var j5=e(xo);_v=o(j5,"깨끗한 테스트코드는 실제 코드의 유지보수성, 재사용성의 보존을 강화하고 프로젝트를 건강하게 해준다"),j5.forEach(a),Ev=r(xi),qo=l(xi,"LI",{});var N5=e(qo);dv=o(N5,"지속적으로 코드를 꺠끗하게 관리하고 간결하게 정리하도록하자"),N5.forEach(a),xi.forEach(a),this.h()},h(){k(L,"href","#1장-깨끗한-코드"),k(v,"id","1장-깨끗한-코드"),k(I,"href","#2장-의미있는-이름"),k(d,"id","2장-의미있는-이름"),k(ya,"href","#3장-함수"),k(Rs,"id","3장-함수"),k(wa,"href","#작게-만들어라"),k(Cs,"id","작게-만들어라"),k(Pa,"href","#한-가지만-해라"),k(Ms,"id","한-가지만-해라"),k(ba,"href","#함수-당-추상화-수준은-하나로"),k(js,"id","함수-당-추상화-수준은-하나로"),k(Ha,"href","#switch문"),k(Ns,"id","switch문"),k(Da,"href","#서술적인-이름을-사용하라"),k(xs,"id","서술적인-이름을-사용하라"),k(Ma,"href","#함수-인수"),k(qs,"id","함수-인수"),k(xa,"href","#부수-효과를-일으키지-마라"),k(Xs,"id","부수-효과를-일으키지-마라"),k(Fa,"href","#명령과-조회를-분리하라"),k(Ws,"id","명령과-조회를-분리하라"),k(Ya,"href","#trycatch-블록은-한-함수에서-별도로-처리"),k(Vs,"id","trycatch-블록은-한-함수에서-별도로-처리"),k(Xa,"href","#반복하지-마라"),k(Js,"id","반복하지-마라"),k(Va,"href","#4장-주석"),k(Ks,"id","4장-주석"),k(za,"href","#주석은-나쁜-코드를-보완하지-못한다"),k(zs,"id","주석은-나쁜-코드를-보완하지-못한다"),k(Za,"href","#코드를-의도로-표현하라"),k(Qs,"id","코드를-의도로-표현하라"),k(ga,"href","#좋은-주석"),k(Zs,"id","좋은-주석"),k(st,"href","#나쁜-주석"),k($s,"id","나쁜-주석"),k(at,"href","#5장-형식-맞추기"),k(gs,"id","5장-형식-맞추기"),k(lt,"href","#형식을-맞추는-목적"),k(sn,"id","형식을-맞추는-목적"),k(et,"href","#적절한-행-길이를-유지하라"),k(nn,"id","적절한-행-길이를-유지하라"),k(pt,"class","language-java"),k(ot,"class","language-java"),k(ct,"href","#가로-형식-맞추기"),k(hn,"id","가로-형식-맞추기"),k(kt,"href","#6장-객체와-자료구조"),k(yn,"id","6장-객체와-자료구조"),k(vt,"href","#자료-추상화"),k(wn,"id","자료-추상화"),k(_t,"href","#자료객체-비대칭"),k(In,"id","자료객체-비대칭"),k(Et,"class","language-java"),k(dt,"class","language-java"),k(ht,"href","#디미터-법칙"),k(On,"id","디미터-법칙"),k(At,"href","#자료-전달-객체"),k(Un,"id","자료-전달-객체"),k(bt,"class","language-java"),k(Tt,"href","#결론"),k(Cn,"id","결론"),k(St,"href","#7장-오류처리"),k(Mn,"id","7장-오류처리"),k(Ht,"href","#오류-코드보다-예외를-사용하라"),k(jn,"id","오류-코드보다-예외를-사용하라"),k(Dt,"href","#try-catch-finally-문부터-작성하라"),k(Nn,"id","try-catch-finally-문부터-작성하라"),k(Rt,"href","#미확인-예외를-사용하라"),k(xn,"id","미확인-예외를-사용하라"),k(Mt,"href","#예외에-의미를-제공하라"),k(qn,"id","예외에-의미를-제공하라"),k(Nt,"href","#호출자를-고려해-예외-클래스를-정의하라"),k(Fn,"id","호출자를-고려해-예외-클래스를-정의하라"),k(Gn,"class","language-java"),k(Ft,"href","#정상-흐름을-정의하라"),k(Yn,"id","정상-흐름을-정의하라"),k(Yt,"href","#null을-반환하지-마라"),k(Bn,"id","null을-반환하지-마라"),k(Xt,"href","#null을-전달하지-마라"),k(Xn,"id","null을-전달하지-마라"),k(Vt,"href","#결론-1"),k(Wn,"id","결론-1"),k(Kt,"href","#8장-경계"),k(Vn,"id","8장-경계"),k(zt,"href","#서드파티-코드-사용하기"),k(Jn,"id","서드파티-코드-사용하기"),k(Qt,"href","#경계를-탐험하고-공부하기"),k(Kn,"id","경계를-탐험하고-공부하기"),k(zn,"class","language-java"),k(Zt,"href","#아직-존재하지-않는-코드-사용하기"),k(Qn,"id","아직-존재하지-않는-코드-사용하기"),k($t,"href","#clean한-경계"),k(Zn,"id","clean한-경계"),k(sl,"href","#9장-유닛테스트"),k($n,"id","9장-유닛테스트"),k(al,"href","#the-three-laws-of-tdd"),k(gn,"id","the-three-laws-of-tdd"),k(ol,"href","#깨끗한-테스트-코드-유지하기"),k(sa,"id","깨끗한-테스트-코드-유지하기"),k(cl,"href","#깨끗한-테스트-코드"),k(na,"id","깨끗한-테스트-코드"),k(ta,"class","language-java"),k(ul,"href","#도메인에-특화된-테스트-언어"),k(la,"id","도메인에-특화된-테스트-언어"),k(rl,"href","#이중-표준"),k(ea,"id","이중-표준"),k(pa,"class","language-java"),k(oa,"class","language-java"),k(fl,"href","#테스트-당-assert-하나"),k(ca,"id","테스트-당-assert-하나"),k(ua,"class","language-java"),k(vl,"href","#테스트당-개념-하나"),k(ia,"id","테스트당-개념-하나"),k(ra,"class","language-java"),k(hl,"href","#first"),k(va,"id","first"),k(ml,"href","#결론-2"),k(_a,"id","결론-2")},m(s,c){u(s,v,c),n(v,L),n(L,O),u(s,P,c),u(s,f,c),n(f,y),n(y,q),n(f,K),n(f,h),n(h,R),n(h,A),n(A,z),n(z,Ss),n(A,Q),n(A,Z),n(Z,Os),n(A,$),n(A,X),n(X,ks),n(A,Hs),n(A,W),n(W,Us),n(f,F),n(f,S),n(S,Ds),u(s,b,c),u(s,d,c),n(d,I),n(I,Ea),u(s,cs,c),u(s,m,c),n(m,G),n(G,da),n(m,ha),n(m,fs),n(fs,La),n(m,ma),n(m,Hl),n(Hl,qi),n(m,Fi),n(m,Ul),n(Ul,Gi),n(m,Yi),n(m,Dl),n(Dl,Bi),n(m,Xi),n(m,Rl),n(Rl,Wi),n(m,Vi),n(m,Cl),n(Cl,Ji),n(m,Ki),n(m,Ml),n(Ml,zi),u(s,Fo,c),u(s,Rs,c),n(Rs,ya),n(ya,Qi),u(s,Go,c),u(s,Cs,c),n(Cs,wa),n(wa,Zi),u(s,Yo,c),u(s,Ia,c),n(Ia,$i),u(s,Bo,c),u(s,Ms,c),n(Ms,Pa),n(Pa,gi),u(s,Xo,c),u(s,Aa,c),n(Aa,sr),u(s,Wo,c),u(s,js,c),n(js,ba),n(ba,nr),u(s,Vo,c),u(s,Ta,c),n(Ta,ar),u(s,Jo,c),u(s,Sa,c),n(Sa,tr),u(s,Ko,c),u(s,Oa,c),n(Oa,lr),u(s,zo,c),u(s,g,c),n(g,jl),n(jl,er),n(g,pr),n(g,Nl),n(Nl,or),n(g,cr),n(g,xl),n(xl,ur),u(s,Qo,c),u(s,Ns,c),n(Ns,Ha),n(Ha,ir),u(s,Zo,c),u(s,Ua,c),n(Ua,rr),u(s,$o,c),u(s,xs,c),n(xs,Da),n(Da,kr),u(s,go,c),u(s,Ra,c),n(Ra,fr),u(s,sc,c),u(s,Ca,c),n(Ca,vr),u(s,nc,c),u(s,qs,c),n(qs,Ma),n(Ma,_r),u(s,ac,c),u(s,ja,c),n(ja,Er),u(s,tc,c),u(s,Fs,c),n(Fs,ql),n(ql,dr),n(Fs,hr),u(s,lc,c),u(s,ss,c),n(ss,Fl),n(Fl,Lr),n(ss,mr),n(ss,Gl),n(Gl,yr),n(ss,wr),n(ss,Yl),n(Yl,Ir),u(s,ec,c),u(s,Na,c),n(Na,Pr),u(s,pc,c),u(s,Gs,c),n(Gs,Bl),n(Bl,Ar),n(Gs,br),u(s,oc,c),u(s,Ys,c),n(Ys,Xl),n(Xl,Tr),n(Ys,Sr),u(s,cc,c),u(s,Bs,c),n(Bs,Wl),n(Wl,Or),n(Bs,Hr),u(s,uc,c),u(s,Xs,c),n(Xs,xa),n(xa,Ur),u(s,ic,c),u(s,qa,c),n(qa,Dr),u(s,rc,c),u(s,Ws,c),n(Ws,Fa),n(Fa,Rr),u(s,kc,c),u(s,Ga,c),n(Ga,Cr),u(s,fc,c),u(s,Vs,c),n(Vs,Ya),n(Ya,Mr),u(s,vc,c),u(s,Ba,c),n(Ba,jr),u(s,_c,c),u(s,Js,c),n(Js,Xa),n(Xa,Nr),u(s,Ec,c),u(s,Wa,c),n(Wa,xr),u(s,dc,c),u(s,Ks,c),n(Ks,Va),n(Va,qr),u(s,hc,c),u(s,Ja,c),n(Ja,Fr),u(s,Lc,c),u(s,Ka,c),n(Ka,Gr),u(s,mc,c),u(s,zs,c),n(zs,za),n(za,Yr),u(s,yc,c),u(s,Qa,c),n(Qa,Vl),n(Vl,Br),u(s,wc,c),u(s,Qs,c),n(Qs,Za),n(Za,Xr),u(s,Ic,c),u(s,$a,c),n($a,Jl),n(Jl,Wr),u(s,Pc,c),u(s,Zs,c),n(Zs,ga),n(ga,Vr),u(s,Ac,c),u(s,H,c),n(H,Kl),n(Kl,Jr),n(H,Kr),n(H,zl),n(zl,zr),n(H,Qr),n(H,Ql),n(Ql,Zr),n(H,$r),n(H,Zl),n(Zl,gr),n(H,sk),n(H,$l),n($l,nk),n(H,ak),n(H,gl),n(gl,tk),u(s,bc,c),u(s,$s,c),n($s,st),n(st,lk),u(s,Tc,c),u(s,nt,c),n(nt,ek),u(s,Sc,c),u(s,_,c),n(_,se),n(se,pk),n(_,ok),n(_,ne),n(ne,ck),n(_,uk),n(_,ae),n(ae,ik),n(_,rk),n(_,te),n(te,kk),n(_,fk),n(_,le),n(le,vk),n(_,_k),n(_,ee),n(ee,Ek),n(_,dk),n(_,pe),n(pe,hk),n(_,Lk),n(_,oe),n(oe,mk),n(_,yk),n(_,ce),n(ce,wk),n(_,Ik),n(_,ue),n(ue,Pk),n(_,Ak),n(_,ie),n(ie,bk),n(_,Tk),n(_,re),n(re,Sk),n(_,Ok),n(_,ke),n(ke,Hk),n(_,Uk),n(_,fe),n(fe,Dk),n(_,Rk),n(_,ve),n(ve,Ck),n(_,Mk),n(_,_e),n(_e,jk),u(s,Oc,c),u(s,gs,c),n(gs,at),n(at,Nk),u(s,Hc,c),u(s,tt,c),n(tt,xk),u(s,Uc,c),u(s,sn,c),n(sn,lt),n(lt,qk),u(s,Dc,c),u(s,vs,c),n(vs,Ee),n(Ee,Fk),n(vs,Gk),n(vs,de),n(de,Yk),u(s,Rc,c),u(s,nn,c),n(nn,et),n(et,Bk),u(s,Cc,c),u(s,U,c),n(U,he),n(he,Le),n(Le,Xk),n(U,Wk),n(U,an),n(an,me),n(me,Vk),n(an,Jk),n(an,V),n(V,ye),n(ye,Kk),n(V,zk),n(V,we),n(we,Qk),n(V,Zk),n(V,Ie),n(Ie,$k),n(V,gk),n(V,Pe),n(Pe,sf),n(U,nf),n(U,tn),n(tn,Ae),n(Ae,af),n(tn,tf),n(tn,ln),n(ln,be),n(be,lf),n(ln,ef),n(ln,Te),n(Te,pf),n(U,of),n(U,en),n(en,Se),n(Se,cf),n(en,uf),n(en,Oe),n(Oe,pn),n(pn,He),n(He,rf),n(pn,kf),n(pn,pt),pt.innerHTML=W5,n(U,ff),n(U,on),n(on,Ue),n(Ue,vf),n(on,_f),n(on,x),n(x,De),n(De,Re),n(Re,Ef),n(x,df),n(x,cn),n(cn,Ce),n(Ce,hf),n(cn,Lf),n(cn,un),n(un,Me),n(Me,mf),n(un,yf),n(un,je),n(je,wf),n(x,If),n(x,rn),n(rn,Ne),n(Ne,Pf),n(rn,Af),n(rn,xe),n(xe,qe),n(qe,bf),n(x,Tf),n(x,kn),n(kn,Fe),n(Fe,Sf),n(kn,Of),n(kn,Ge),n(Ge,fn),n(fn,Ye),n(Ye,Hf),n(fn,Uf),n(fn,ot),ot.innerHTML=V5,n(x,Df),n(x,vn),n(vn,Be),n(Be,Rf),n(vn,Cf),n(vn,_n),n(_n,Xe),n(Xe,Mf),n(_n,jf),n(_n,We),n(We,Nf),n(U,xf),n(U,En),n(En,Ve),n(Ve,qf),n(En,Ff),n(En,dn),n(dn,Je),n(Je,Gf),n(dn,Yf),n(dn,Ke),n(Ke,Bf),u(s,Mc,c),u(s,hn,c),n(hn,ct),n(ct,Xf),u(s,jc,c),u(s,T,c),n(T,ze),n(ze,Wf),n(T,Vf),n(T,Qe),n(Qe,Jf),n(T,Kf),n(T,Ze),n(Ze,zf),n(T,Qf),n(T,ut),n(ut,Zf),n(ut,Ln),n(Ln,$e),n($e,$f),n(Ln,gf),n(Ln,ge),n(ge,s1),n(T,n1),n(T,it),n(it,a1),n(it,mn),n(mn,sp),n(sp,t1),n(mn,l1),n(mn,np),n(np,e1),n(T,p1),n(T,ap),n(ap,o1),n(T,c1),n(T,rt),n(rt,u1),n(rt,tp),n(tp,lp),n(lp,i1),u(s,Nc,c),u(s,yn,c),n(yn,kt),n(kt,r1),u(s,xc,c),u(s,ft,c),n(ft,k1),u(s,qc,c),u(s,wn,c),n(wn,vt),n(vt,f1),u(s,Fc,c),u(s,_s,c),n(_s,ep),n(ep,v1),n(_s,_1),n(_s,pp),n(pp,E1),u(s,Gc,c),u(s,In,c),n(In,_t),n(_t,d1),u(s,Yc,c),u(s,Es,c),n(Es,Pn),n(Pn,op),n(op,h1),n(Pn,L1),n(Pn,us),n(us,cp),n(cp,m1),n(us,y1),n(us,up),n(up,w1),n(us,I1),n(us,ip),n(ip,P1),n(Es,A1),n(Es,An),n(An,rp),n(rp,b1),n(An,T1),n(An,bn),n(bn,Tn),n(Tn,kp),n(kp,S1),n(Tn,O1),n(Tn,Et),Et.innerHTML=J5,n(bn,H1),n(bn,Sn),n(Sn,fp),n(fp,U1),n(Sn,D1),n(Sn,dt),dt.innerHTML=K5,u(s,Bc,c),u(s,On,c),n(On,ht),n(ht,R1),u(s,Xc,c),u(s,C,c),n(C,vp),n(vp,C1),n(C,M1),n(C,Lt),n(Lt,j1),n(Lt,J),n(J,_p),n(_p,N1),n(J,x1),n(J,Ep),n(Ep,q1),n(J,F1),n(J,dp),n(dp,G1),n(J,Y1),n(J,hp),n(hp,B1),n(C,X1),n(C,mt),n(mt,W1),n(mt,is),n(is,yt),n(yt,V1),n(yt,Lp),n(Lp,mp),n(mp,yp),n(yp,J1),n(is,K1),n(is,wt),n(wt,z1),n(wt,wp),n(wp,Ip),n(Ip,Pp),n(Pp,Q1),n(is,Z1),n(is,Ap),n(Ap,$1),n(C,g1),n(C,It),n(It,s3),n(It,Hn),n(Hn,bp),n(bp,n3),n(Hn,a3),n(Hn,Tp),n(Tp,t3),n(C,l3),n(C,Pt),n(Pt,e3),n(Pt,rs),n(rs,Sp),n(Sp,p3),n(rs,o3),n(rs,Op),n(Op,c3),n(rs,u3),n(rs,Hp),n(Hp,i3),u(s,Wc,c),u(s,Un,c),n(Un,At),n(At,r3),u(s,Vc,c),u(s,ns,c),n(ns,Up),n(Up,Dp),n(Dp,k3),n(ns,f3),n(ns,Dn),n(Dn,Rp),n(Rp,v3),n(Dn,_3),n(Dn,bt),bt.innerHTML=z5,n(ns,E3),n(ns,Rn),n(Rn,Cp),n(Cp,d3),n(Rn,h3),n(Rn,Mp),n(Mp,jp),n(jp,L3),u(s,Jc,c),u(s,Cn,c),n(Cn,Tt),n(Tt,m3),u(s,Kc,c),u(s,as,c),n(as,Np),n(Np,y3),n(as,w3),n(as,xp),n(xp,I3),n(as,P3),n(as,qp),n(qp,A3),u(s,zc,c),u(s,Mn,c),n(Mn,St),n(St,b3),u(s,Qc,c),u(s,Ot,c),n(Ot,Fp),n(Fp,T3),u(s,Zc,c),u(s,jn,c),n(jn,Ht),n(Ht,S3),u(s,$c,c),u(s,Ut,c),n(Ut,Gp),n(Gp,O3),u(s,gc,c),u(s,Nn,c),n(Nn,Dt),n(Dt,H3),u(s,su,c),u(s,ds,c),n(ds,Yp),n(Yp,U3),n(ds,D3),n(ds,Bp),n(Bp,R3),u(s,nu,c),u(s,xn,c),n(xn,Rt),n(Rt,C3),u(s,au,c),u(s,Ct,c),n(Ct,Xp),n(Xp,M3),u(s,tu,c),u(s,qn,c),n(qn,Mt),n(Mt,j3),u(s,lu,c),u(s,jt,c),n(jt,Wp),n(Wp,N3),u(s,eu,c),u(s,Fn,c),n(Fn,Nt),n(Nt,x3),u(s,pu,c),u(s,xt,c),n(xt,Vp),n(Vp,q3),u(s,ou,c),u(s,Gn,c),Gn.innerHTML=Q5,u(s,cu,c),u(s,qt,c),n(qt,Jp),n(Jp,F3),u(s,uu,c),u(s,Yn,c),n(Yn,Ft),n(Ft,G3),u(s,iu,c),u(s,Gt,c),n(Gt,Kp),n(Kp,Y3),u(s,ru,c),u(s,Bn,c),n(Bn,Yt),n(Yt,B3),u(s,ku,c),u(s,Bt,c),n(Bt,zp),n(zp,X3),u(s,fu,c),u(s,Xn,c),n(Xn,Xt),n(Xt,W3),u(s,vu,c),u(s,Wt,c),n(Wt,Qp),n(Qp,V3),u(s,_u,c),u(s,Wn,c),n(Wn,Vt),n(Vt,J3),u(s,Eu,c),u(s,Jt,c),n(Jt,Zp),n(Zp,K3),u(s,du,c),u(s,Vn,c),n(Vn,Kt),n(Kt,z3),u(s,hu,c),u(s,Jn,c),n(Jn,zt),n(zt,Q3),u(s,Lu,c),u(s,hs,c),n(hs,$p),n($p,Z3),n(hs,$3),n(hs,gp),n(gp,g3),u(s,mu,c),u(s,Kn,c),n(Kn,Qt),n(Qt,s2),u(s,yu,c),u(s,Ls,c),n(Ls,so),n(so,n2),n(Ls,a2),n(Ls,no),n(no,t2),u(s,wu,c),u(s,zn,c),zn.innerHTML=Z5,u(s,Iu,c),u(s,Qn,c),n(Qn,Zt),n(Zt,l2),u(s,Pu,c),u(s,ms,c),n(ms,ao),n(ao,e2),n(ms,p2),n(ms,to),n(to,o2),u(s,Au,c),u(s,Zn,c),n(Zn,$t),n($t,c2),u(s,bu,c),u(s,gt,c),n(gt,lo),n(lo,u2),u(s,Tu,c),u(s,$n,c),n($n,sl),n(sl,i2),u(s,Su,c),u(s,nl,c),n(nl,r2),u(s,Ou,c),u(s,gn,c),n(gn,al),n(al,k2),u(s,Hu,c),u(s,ts,c),n(ts,tl),n(tl,eo),n(eo,f2),n(tl,v2),n(ts,_2),n(ts,ll),n(ll,po),n(po,E2),n(ll,d2),n(ts,h2),n(ts,el),n(el,oo),n(oo,L2),n(el,m2),u(s,Uu,c),u(s,pl,c),n(pl,y2),u(s,Du,c),u(s,sa,c),n(sa,ol),n(ol,w2),u(s,Ru,c),u(s,M,c),n(M,co),n(co,I2),n(M,P2),n(M,uo),n(uo,A2),n(M,b2),n(M,io),n(io,ro),n(ro,T2),n(M,S2),n(M,ko),n(ko,O2),n(M,H2),n(M,fo),n(fo,U2),u(s,Cu,c),u(s,na,c),n(na,cl),n(cl,D2),u(s,Mu,c),u(s,ys,c),n(ys,aa),n(aa,R2),n(aa,vo),n(vo,C2),n(aa,M2),n(ys,j2),n(ys,_o),n(_o,Eo),n(Eo,N2),u(s,ju,c),u(s,ta,c),ta.innerHTML=$5,u(s,Nu,c),u(s,la,c),n(la,ul),n(ul,x2),u(s,xu,c),u(s,il,c),n(il,ho),n(ho,q2),u(s,qu,c),u(s,ea,c),n(ea,rl),n(rl,F2),u(s,Fu,c),u(s,kl,c),n(kl,Lo),n(Lo,G2),u(s,Gu,c),u(s,pa,c),pa.innerHTML=g5,u(s,Yu,c),u(s,oa,c),oa.innerHTML=sL,u(s,Bu,c),u(s,ca,c),n(ca,fl),n(fl,Y2),u(s,Xu,c),u(s,ua,c),ua.innerHTML=nL,u(s,Wu,c),u(s,ws,c),n(ws,mo),n(mo,B2),n(ws,X2),n(ws,yo),n(yo,W2),u(s,Vu,c),u(s,ia,c),n(ia,vl),n(vl,V2),u(s,Ju,c),u(s,ra,c),ra.innerHTML=aL,u(s,Ku,c),u(s,Is,c),n(Is,_l),n(_l,J2),n(_l,ka),n(ka,El),n(El,K2),n(El,fa),n(fa,wo),n(wo,z2),n(fa,Q2),n(fa,Io),n(Io,Z2),n(ka,$2),n(ka,dl),n(dl,g2),n(dl,Po),n(Po,Ao),n(Ao,sv),n(Is,nv),n(Is,bo),n(bo,av),u(s,zu,c),u(s,va,c),n(va,hl),n(hl,To),n(To,tv),u(s,Qu,c),u(s,Ll,c),n(Ll,lv),u(s,Zu,c),u(s,j,c),n(j,So),n(So,Oo),n(Oo,ev),n(j,pv),n(j,Ho),n(Ho,Uo),n(Uo,ov),n(j,cv),n(j,Do),n(Do,Ro),n(Ro,uv),n(j,iv),n(j,Co),n(Co,Mo),n(Mo,rv),n(j,kv),n(j,jo),n(jo,No),n(No,fv),u(s,$u,c),u(s,_a,c),n(_a,ml),n(ml,vv),u(s,gu,c),u(s,Ps,c),n(Ps,xo),n(xo,_v),n(Ps,Ev),n(Ps,qo),n(qo,dv)},p:bL,d(s){s&&a(v),s&&a(P),s&&a(f),s&&a(b),s&&a(d),s&&a(cs),s&&a(m),s&&a(Fo),s&&a(Rs),s&&a(Go),s&&a(Cs),s&&a(Yo),s&&a(Ia),s&&a(Bo),s&&a(Ms),s&&a(Xo),s&&a(Aa),s&&a(Wo),s&&a(js),s&&a(Vo),s&&a(Ta),s&&a(Jo),s&&a(Sa),s&&a(Ko),s&&a(Oa),s&&a(zo),s&&a(g),s&&a(Qo),s&&a(Ns),s&&a(Zo),s&&a(Ua),s&&a($o),s&&a(xs),s&&a(go),s&&a(Ra),s&&a(sc),s&&a(Ca),s&&a(nc),s&&a(qs),s&&a(ac),s&&a(ja),s&&a(tc),s&&a(Fs),s&&a(lc),s&&a(ss),s&&a(ec),s&&a(Na),s&&a(pc),s&&a(Gs),s&&a(oc),s&&a(Ys),s&&a(cc),s&&a(Bs),s&&a(uc),s&&a(Xs),s&&a(ic),s&&a(qa),s&&a(rc),s&&a(Ws),s&&a(kc),s&&a(Ga),s&&a(fc),s&&a(Vs),s&&a(vc),s&&a(Ba),s&&a(_c),s&&a(Js),s&&a(Ec),s&&a(Wa),s&&a(dc),s&&a(Ks),s&&a(hc),s&&a(Ja),s&&a(Lc),s&&a(Ka),s&&a(mc),s&&a(zs),s&&a(yc),s&&a(Qa),s&&a(wc),s&&a(Qs),s&&a(Ic),s&&a($a),s&&a(Pc),s&&a(Zs),s&&a(Ac),s&&a(H),s&&a(bc),s&&a($s),s&&a(Tc),s&&a(nt),s&&a(Sc),s&&a(_),s&&a(Oc),s&&a(gs),s&&a(Hc),s&&a(tt),s&&a(Uc),s&&a(sn),s&&a(Dc),s&&a(vs),s&&a(Rc),s&&a(nn),s&&a(Cc),s&&a(U),s&&a(Mc),s&&a(hn),s&&a(jc),s&&a(T),s&&a(Nc),s&&a(yn),s&&a(xc),s&&a(ft),s&&a(qc),s&&a(wn),s&&a(Fc),s&&a(_s),s&&a(Gc),s&&a(In),s&&a(Yc),s&&a(Es),s&&a(Bc),s&&a(On),s&&a(Xc),s&&a(C),s&&a(Wc),s&&a(Un),s&&a(Vc),s&&a(ns),s&&a(Jc),s&&a(Cn),s&&a(Kc),s&&a(as),s&&a(zc),s&&a(Mn),s&&a(Qc),s&&a(Ot),s&&a(Zc),s&&a(jn),s&&a($c),s&&a(Ut),s&&a(gc),s&&a(Nn),s&&a(su),s&&a(ds),s&&a(nu),s&&a(xn),s&&a(au),s&&a(Ct),s&&a(tu),s&&a(qn),s&&a(lu),s&&a(jt),s&&a(eu),s&&a(Fn),s&&a(pu),s&&a(xt),s&&a(ou),s&&a(Gn),s&&a(cu),s&&a(qt),s&&a(uu),s&&a(Yn),s&&a(iu),s&&a(Gt),s&&a(ru),s&&a(Bn),s&&a(ku),s&&a(Bt),s&&a(fu),s&&a(Xn),s&&a(vu),s&&a(Wt),s&&a(_u),s&&a(Wn),s&&a(Eu),s&&a(Jt),s&&a(du),s&&a(Vn),s&&a(hu),s&&a(Jn),s&&a(Lu),s&&a(hs),s&&a(mu),s&&a(Kn),s&&a(yu),s&&a(Ls),s&&a(wu),s&&a(zn),s&&a(Iu),s&&a(Qn),s&&a(Pu),s&&a(ms),s&&a(Au),s&&a(Zn),s&&a(bu),s&&a(gt),s&&a(Tu),s&&a($n),s&&a(Su),s&&a(nl),s&&a(Ou),s&&a(gn),s&&a(Hu),s&&a(ts),s&&a(Uu),s&&a(pl),s&&a(Du),s&&a(sa),s&&a(Ru),s&&a(M),s&&a(Cu),s&&a(na),s&&a(Mu),s&&a(ys),s&&a(ju),s&&a(ta),s&&a(Nu),s&&a(la),s&&a(xu),s&&a(il),s&&a(qu),s&&a(ea),s&&a(Fu),s&&a(kl),s&&a(Gu),s&&a(pa),s&&a(Yu),s&&a(oa),s&&a(Bu),s&&a(ca),s&&a(Xu),s&&a(ua),s&&a(Wu),s&&a(ws),s&&a(Vu),s&&a(ia),s&&a(Ju),s&&a(ra),s&&a(Ku),s&&a(Is),s&&a(zu),s&&a(va),s&&a(Qu),s&&a(Ll),s&&a(Zu),s&&a(j),s&&a($u),s&&a(_a),s&&a(gu),s&&a(Ps)}}}function UL(w){let v,L;const O=[w[0],Fv];let P={$$slots:{default:[HL]},$$scope:{ctx:w}};for(let f=0;f<O.length;f+=1)P=qv(P,O[f]);return v=new OL({props:P}),{c(){yL(v.$$.fragment)},l(f){wL(v.$$.fragment,f)},m(f,y){IL(v,f,y),L=!0},p(f,[y]){const q=y&1?PL(O,[y&1&&x5(f[0]),y&0&&x5(Fv)]):{};y&2&&(q.$$scope={dirty:y,ctx:f}),v.$set(q)},i(f){L||(B5(v.$$.fragment,f),L=!0)},o(f){X5(v.$$.fragment,f),L=!1},d(f){AL(v,f)}}}const Fv={title:"클린코드 요약",summary:"클린코드 정독후 요약사항을 정리합니다.",date:"2023-11-09"};function DL(w,v,L){return w.$$set=O=>{L(0,v=qv(qv({},v),q5(O)))},v=q5(v),[v]}class RL extends F5{constructor(v){super(),G5(this,v,DL,UL,Y5,{})}}const ML=Object.freeze(Object.defineProperty({__proto__:null,default:RL,metadata:Fv},Symbol.toStringTag,{value:"Module"}));export{RL as P,ML as _};
